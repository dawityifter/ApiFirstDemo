{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "BillGO Bill Pay API",
    "description" : "BillGO Bill Pay API allows you to access the full BillGO power in bill pay.",
    "version" : "20220302",
    "x-logo" : {
      "url" : "https://api-docs.billgo-dev.com/assets/BillGOlogo_white.png",
      "backgroundColor" : "#101010",
      "altText" : "BillGO logo"
    }
  },
  "servers" : [ {
    "url" : "http://localhost",
    "description" : "local development"
  }, {
    "url" : "https://gw.billgo.com/fuse",
    "description" : "BillGO Production Environment"
  }, {
    "url" : "https://gw.billgo-sandbox.com/fuse",
    "description" : "BillGO UAT Environment"
  } ],
  "tags" : [ {
    "name" : "Overview",
    "description" : "This documentation describes BillGO Bill Pay API. On the left, you can navigate between API sets to explore the capabilities. Explore the `Overview` section to get a general understanding of how to interact with the various API endpoints. If you have any questions, please reach out to developers@billgo.com.\n# Core Concepts\nYou should be familiar with the following when building to this API.\n## Merchant Linking\nWhen a user decides to link a payee, the user must provide the necessary login details required to access the user’s merchant account. Merchants ask for a variety of merchant-specific details. To determine which details the user should provide, the `Datum` property of the `Merchant` contains the list of login datums that are required. The user should be presented with input fields for each datum in this list. The `Description` should be presented as the placeholder text, and where provided, the `Pattern` is a regular expression that can be used to validate the input of the user. For the `Password`  type, the answer the user provides may optionally be masked. Additionally, for any `Datum` where the `sensitive` property is `true`, masking the user's input is good practice. For the `Choice` and `QuestionAnswerChoice` datum types, the user should be presented with a combo box or dropdown of the choices to pick from. For the Date datum type, the user should be presented with a calendar picker from which a date (day, month, and year) can be chosen.\n\nOnce these details have been collected from the user, they can be passed to BillGO. BillGO will immediately return a newly-created merchant object whose LinkStatus will be `SYNCING`. This indicates a merchant sync is under way. Once the datums have been verified by the merchant, the LinkStatus will become `SYNCING_DATUMS_VERIFIED`. Once in this status, no additional information will be required from the user, and the user can be given the option of allowing the sync to complete in the background. While the LinkStatus is `SYNCING` or `SYNCING_DATUMS_VERIFIED`, the Retrieve Merchant API should be called periodically at a recommended interval of once every five seconds. Once the LinkStatus transitions to another status, periodic updates can cease.\n\nIf the user makes a mistake when entering their details or if the merchant determines additional details are necessary, the LinkStatus will become `DATUMS_INVALID` or `DATUMS_MISSING`. The user should then be prompted to enter the details for any datums whose Status is Invalid or Missing. Rather than creating a new merchant, the Update Merchant API should be used to provide these updated values. The syncing process will resume and periodic refreshes can once again commence.\n\nOnce the merchant sync has completed successfully, the LinkStatus will become `SYNCED` and any merchant accounts will be returned. Going forward, BillGO will continue to sync data from the merchant on an ongoing basis. Future sync attempts are optimized around the user’s billing cycle and activity. Assuming the user’s log-in details do not change, this synchronization process will continue into the future. However, it is possible for a user or the merchant to change or reset details for a variety of reasons. When BillGO encounters this situation, the LinkStatus can become `DATUMS_INVALID` or `DATUMS_MISSING`. The user should be reprompted for details at this point and once they are gathered, the Update Merchant API should be used.\n\nIf an unexpected error occurs while the user is attempting to add or update a merchant, the LinkStatus can become `PENDING`. The provided Notice should be displayed to the user since it will provide details about the situation. This status is transient and should generally correct itself within minutes to hours, depending on the underlying issue. If an individual user hits a unique, account-specific problem, the merchant may remain in this status for a longer period of time. The application can continue to call the Retrieve Merchant API to detect when the merchant has transitioned out of Pending. In practice, this should be performed at most once per minute for the first 15 minutes and then hourly for the next 24 hours. After 24 hours, the merchant can be retrieved daily.\n\nIt is separately possible for a merchant to lock a user’s account, possibly as a result of too many failed login attempts. When this occurs, the LinkStatus is `LOCKED`. The provided Notice should be displayed to the user since it will describe actions the user can take to resolve the locked situation. BillGO will continue to attempt to sync this merchant over time in order to detect whether the user’s account transitions out of the `LOCKED` status. Due to this behavior, the merchant should only be deleted by the user.\n\nIt is also possible for a user to provide login details for a merchant but for the user to not yet associate those login details with a billing account. When this occurs, the LinkStatus is `CLOSED` and the Notice property will contain details for the user on how to correct the situation. BillGO will continue to attempt to sync this merchant over time in order to detect whether the user’s account transitions out of the closed status. Due to this behavior, the merchant should only be deleted by the user.\n\nIf a merchant is down for maintenance while the user is attempting to add or update a merchant or if a merchant remains down for an extended period of time, the LinkStatus can become Outage and the Notice property will contain details about the situation. BillGO will continue to attempt to sync this merchant over time in order to detect when the merchant is no longer down for maintenance. Due to this behavior, the merchant should only be deleted by the user.\n\nIf a merchant does not yet support syncing (IsLinkingEnabled is false), the LinkStatus will become `DATUMS_VALID`once the user’s datums have been verified. The section [Unsupported Merchants](Unsupported Merchants) below explains in detail how to handle these merchants.\n\nBecause merchants can sometimes take a long time to complete a sync, it is recommended  a timer be started each time an Add Merchant API or Update Merchant API call is performed. If 70 seconds elapses and the LinkStatus is still `SYNCING` or `SYNCING_DATUMS_VERIFIED` after the next retrieval, it is recommended  the user be presented with a message indicating syncing is taking longer than expected and to allow them to dismiss any modal dialog that may be displayed. Polling can continue to occur in the background as needed, and, if possible, the user can be notified when the sync has eventually completed.\n<a name=\"Unsupported Merchants\"></a>## Unsupported Merchants\nThe BillGO merchant database is a comprehensive collection of merchants within the United States. Within this database, BillGO can synchronize billing information for more than 10,000 of these merchants. The rest are currently unsupported but are present within the database. To determine whether a record supports synchronization, the IsLinkingEnabled property can be inspected.\n\nWithin the BillGO user experience, BillGO exposes all relevant merchants in the database, including ones for which synchronization is not yet supported. When a user provides login details for a merchant that doesn’t yet support synchronization, BillGO will verify these details and continue to prompt the user until verified ones have been provided. When this occurs, the merchant will transition to a special synchronization status (LinkStatus becomes `DATUMS_VALID`). The merchant remain in this state until synchronization support is being added. At that point, the login details will be re-verified, and if still valid, billing details will be delivered to the user.\n\nThis approach allows the user to provide all of their merchants and provides them with a easy means to discover when support for new merchants occurs. This approach is optional. If not desired, merchants that do not yet support synchronization can be filtered from results presented to the user. However, it is strongly suggested to provide your user with this option (perhaps annotated with specific language beforehand), because BillGO cannot support new merchants without this information. In addition, total support volume tends to decrease when you support this option.\n## Merchant Deprecation\nEvery merchant within the BillGO database is represented as a record. Records are immutable and map to a particular account registration for a particular merchant. For a user to receive a set of login details (most commonly a username and password), the user must register an account with a merchant. Typically, this registration process requires the user to enter personal information and other account billing data present on their billing statement. Once a user performs this registration, they are able to provide the login details to the BillGO service. Subsequently, BillGO will synchronize the billing informationfor that user.\n\nHowever, when merchants redesign their billing and payment portal, especially when switching billing providers or payment processors, it is not uncommon for the merchant to require full re-registration by all users. When this occurs, BillGO will transition the associated record to no longer being able to be added (IsAddingEnabled becomes false), and any merchants that have been associated with users will become deprecated (LinkStatus becomes Deprecated). The merchant will have a record ID that the user is being migrated to (MigratedRecordId) and a user-directed message (Notice). The user directed message is meant to be as clear as possible for the user. This message will be shown in the support tool.\n\nOnce deprecation occurs, the deprecated merchant will no longer be synchronized and the user must re-register before adding a merchant for the new record. The deprecated merchant can be left to contain a record of past payments or it can be removed at the user's discretion.\n\n## Resource Caching\nBillGO exposes resources in a way that allows users of the API to maintain a local cache of the resources that can be stored and updated over time. The local cache can be maintained by using the Updated timestamp on each resource in conjunction with resource state changes that are represented in responses from the BillGO service.\n\nFor a particular resource type, resources will be returned in one of several consistently named collections in any service response. These collections indicate whether a resource has been added, updated, removed or is included in a full list. In the case of additions, updates, and removals, the cache can use a combination of the Id property to uniquely identify the resource (and add/update/remove accordingly) and the Updated property of the resource to determine whether the cached copy should be replaced. With a full list, the entire cache can be replaced in its entirety.\n\nTo illustrate with the Merchant resource type, Merchant resources can be returned in the following collections:\n\nMerchants: This represents a full list of merchants within the user account. When this collection is returned, the cached list of merchants should be replaced in its entirety with this list.\n\nMerchantsAdded: This represents a list of merchants that were added as part of the operation. Items in this collection should be added to the cache.\n\nMerchantsUpdated: This represents a list of merchants that were updated as part of the operation. Items in this collection should be added if not present in the cache or updated by examining the Id property.\n\nMerchantsRemoved: This represents a list of merchants that were removed as part of the operation. Items in this collection should be removed from the cache, if present, by using the Id property.\n\nOther resource types will return those resources in similarly-named collections. The behavior outlined above for merchants is applicable to all resource types.\n# BillGO Bill Pay API Examples\nThere is an up-to-date collection of examples on how to exercise the API available at [BillGO Bill Pay API](https://documenter.getpostman.com/view/5565499/TzCS6mj9)\n# Sandbox\nThe Sandbox is available for User Acceptance Testing.\n## Merchants\nAll merchants presented in the test environment return only test data; they do not interact with real merchant websites. These merchants take any combination of datums as long as they validate against the given datum patterns specified in the record. **Real merchant credentials should never be used in the test environment**.\n\nSpecial test records are available within the test environment to aid in testing specific merchant conditions. Each of these special test records will have the `isTest` property set to `true`. A sample list of these records follow, along with a description of when and how to use them. Unless specified otherwise, all test records will successfully athenticate using any string for the <code>username</code> and \"Password!\" as the <code>Password</code>.\n## Datums\nThe following are special test records that can be used to validate your implementation of datum handling during \"Create Merchant\" and \"Update Merchant\". Make sure to test against all these records.\n<table>\n<thead>\n<tr><th>Record</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>GEICO <code>GEICO_testCBP</code></td><td>Simple <code>Username</code> &amp; <code>Password</code> datums</td></tr>\n<tr><td>Toyota Financial Services <code>Toyota_Financial_Services_testCBP</code></td><td><code>Text</code> datum</td></tr>\n<tr><td>Sallie Mae Student Loans <code>Sallie_Mae_Student_Loans_testCBP</code></td><td><code>Text</code> datum &amp; <code>Date</code> datum</td></tr>\n<tr><td>Good to Go! <code>Good_to_Go_testCBP</code></td><td>Static <code>Choice</code> datum</td></tr>\n<tr><td>Mortgage Questions <code>Mortgage_Questions_testCBP</code></td><td><code>QuestionAnswer</code> datum (\"Seattle\") &amp; dynamic <code>QuestionAnswerChoice</code> datum (\"2244 132nd Ave. SE\")</td></tr>\n<tr><td>Sprint <code>Sprint_testCBP</code></td><td>Two-factor authentication using <code>QuestionAnswer</code> datum (Code \"12345\")</td></tr>\n<tr><td>Discover Card <code>Discover_Card_testCBP</code></td><td>Two-factor authentication using <code>QuestionAnswer</code> &amp; <code>QuestionAnswerChoice</code> datums (Code \"12345\")</td></tr>\n<tr><td>USAA <code>USAA_testCBP</code></td><td>Five successive <code>QuestionAnswer</code> datums (PIN \"1234\", others \"Prism\")</td></tr>\n<tr><td>Progressive Insurance <code>Progressive_Insurance_testCBP</code></td><td>Odd sync attempts successful, even sync attempts return <code>DatumsInvalid</code></td></tr>\n</tbody>\n</table>\n\n## Payee Accounts\nA number of test records are available that generate unpaid payee accounts with various properties set:\n<table>\n<thead>\n<tr><th>Record</th><th style=\"text-align:center\">Nickname</th><th style=\"text-align:center\">Minimum Due</th><th style=\"text-align:center\">Past Due</th><th style=\"text-align:center\">Due Date</th><th style=\"text-align:center\">Balance</th><th style=\"text-align:center\">Payments</th></tr>\n</thead>\n<tbody>\n<tr><td>Capital One <code>Capital_One_Credit_Card_testCBP</code></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">Today</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">1</td></tr>\n<tr><td>NV Energy <code>NV_Energy_testCBP</code></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">Tomorrow</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">4</td></tr>\n<tr><td>Wells Fargo <code>Wells_Fargo_testCBP</code></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">+3</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">2</td></tr>\n<tr><td>American Express <code>American_Express_testCBP</code></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">+4</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">5</td></tr>\n<tr><td>Walmart Credit Card <code>Walmart_Credit_Card_testCBP</code></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">+5</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">0</td></tr>\n<tr><td>Macy's Credit Card <code>Macy's_Credit_Card_testCBP</code></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">+6</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">1</td></tr>\n<tr><td>Infiniti Financial Services <code>Infiniti_Financial_Services_testCBP</code></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">+9</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">6</td></tr>\n<tr><td>GEICO <code>GEICO_testCBP</code></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">+10</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">0</td></tr>\n<tr><td>Atmos Energy <code>Atmos_Energy_testCBP</code></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">+12</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">3</td></tr>\n<tr><td>T-Mobile <code>T-Mobile_testCBP</code></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">+18</td><td style=\"text-align:center\"></td><td style=\"text-align:center\">5</td></tr>\n<tr><td>JCPenney Rewards Credit Card <code>JCPenney_Rewards_Credit_Card_testCBP</code></td><td style=\"text-align:center\"></td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">+23</td><td style=\"text-align:center\">✔</td><td style=\"text-align:center\">6</td></tr>\n</tbody>\n</table>\n\nThe following records exhibit specific bill and payee account behavior. Make sure  your implementation handles all the situations presented by these payees as well. You will encounter these situations in the Production environment.\n<table>\n<thead>\n<tr><th>Record Name</th><th>Record ID</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>YMCA</td><td><code>YMCA_testCBP</code></td><td>No bill due (<code>Empty</code>)</td></tr>\n<tr><td>Verizon Wireless</td><td><code>Verizon_Wireless_testCBP</code></td><td>Bill on autopay (<code>ServiceAutomatic</code>)</td></tr>\n<tr><td>Old Navy Credit Card</td><td><code>Old_Navy_Credit_Card_testCBP</code></td><td>Scheduled bill (<code>ServiceScheduled</code>)</td></tr>\n<tr><td>Green Dot</td><td><code>Green_Dot_testCBP</code></td><td>No merchant accounts</td></tr>\n<tr><td>State Farm</td><td><code>State_Farm_testCBP</code></td><td>Two merchant accounts, due in past</td></tr>\n<tr><td>Kohl's Credit Card</td><td><code>Kohl's_Credit_Card_testCBP</code></td><td>Three merchant accounts</td></tr>\n<tr><td>Zales Credit Card</td><td><code>Zales_Credit_Card_testCBP</code></td><td>Due <code>Soon</code> &amp; due <code>Now</code> bills</td></tr>\n<tr><td>Bill Me Later</td><td><code>Bill_Me_Later_Deprecated_testCBP</code></td><td><code>Deprecated</code> merchant, migrated to PayPal</td></tr>\n<tr><td>PayPal</td><td><code>PayPal_testCBP</code></td><td><code>Unpaid</code> bill with a balance</td></tr>\n<tr><td>GMAC Mortgage</td><td><code>GMAC_Mortgage_testCBP</code></td><td><code>Unpaid</code> mortgage bill, gets <code>Deprecated</code> after a minute, migrated to Ocwen</td></tr>\n<tr><td>Ocwen</td><td><code>Ocwen_Loan_Servicing_testCBP</code></td><td><code>Unpaid</code> mortgage bill</td></tr>\n<tr><td>Audible</td><td><code>Audible_testCBP</code></td><td><code>Closed</code> merchant</td></tr>\n<tr><td>King County Animal Services</td><td><code>King_County_Animal_Services_testCBP</code></td><td><code>Locked</code> merchant (\"unlocks\" on subsequent sync)</td></tr>\n<tr><td>Microsoft Account</td><td><code>Microsoft_Account_testCBP</code></td><td><code>DatumsValid</code> merchant</td></tr>\n<tr><td>Charter Spectrum</td><td><code>Charter_Spectrum_testCBP</code></td><td><code>Pending</code> merchant</td></tr>\n<tr><td>Prudential Life Insurance</td><td><code>Prudential_Life_Insurance_testCBP</code></td><td>Very slow sync</td></tr>\n<tr><td>Verizon Residential</td><td><code>Verizon_Residential_testCBP</code></td><td>Record ID updates to Verizon Wireless</td></tr>\n<tr><td>Comcast</td><td><code>Comcast_testCBP</code></td><td>Merchant document available</td></tr>\n<tr><td>LoanCare</td><td><code>LoanCare_testCBP</code></td><td>Merchant <code>Locked</code> few minutes adding merchant. Two-factor authentication using <code>QuestionAnswer</code> datum (Code \"98765\")</td></tr>\n</tbody>\n</table>\n\n## Custom Merchants\nThe following test records let you manipulate the data being returned. For example, you can return a custom due date \nand the amount due. By providing bill due dates in the past, you are able to generate a historical list of bills via \nthe \"Update Payee Account\" API.\n<table>\n<thead>\n<tr><th>Record: Choose Your Own Adventure <code>Choose_Your_Own_Adventure_testCBP</code></th></tr>\n</thead>\n<tbody>\n<tr><td>Beyond a <code>Username</code> and <code>Password</code>, this record takes an \"Initial State\" <code>Choice</code> datum (<code>Closed</code>, <code>Locked</code>, <code>Outage</code>, or \"Bill\"), an \"Amount Due\" <code>Text</code> datum, and a \"Due Date\" <code>Date</code> datum. The <code>Choice</code> datum determines the initial state of the merchant. In addition, by triggering a sync via <code>/merchants/{MerchantId}/sync</code>, the merchant will cycle through states: { <code>Closed</code> / <code>Locked</code> / <code>Outage</code> } -&gt; Bill -&gt; <code>DatumsInvalid</code> -&gt; { <code>Closed</code> / <code>Locked</code> / <code>Outage</code> / Bill } -&gt; ... Once you get <code>DatumsInvalid</code> you can update <code>/merchants/{MerchantId}</code> with new options of <code>Choice</code>, <code>Text</code>, and <code>Date</code> to determine what you want to see next. For example, if you choose \"Bill\" then the amount due on the bill will be determined by the <code>Text</code> datum and the due date will be determined by the <code>Date</code> datum.</td></tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr><th>Record: Target <code>Target_REDcard_testCBP</code></th></tr>\n</thead>\n<tbody>\n<tr><td>This record takes four datums - <code>Username</code>, <code>Password</code>, <code>ZipCode</code> and <code>Last 4 digits of SSN</code>. \"Add Merchant\" will return with a <code>DatumsMissing</code> status requiring a Two Factor Authentication (2FA) using a QuestionAnswer datum(Question - <code>Which year did you graduate?</code>). The answer <code>2000</code> can be provided via \"Update Merchant\" <code>POST /merchants/{MerchantId}</code>.</td></tr>\n</tbody>\n</table>\n\n<table>\n<thead>\n<tr><th>Record: The Swiss Colony Choose 'N Charge <code>The_Swiss_Colony_Choose_'N_Charge_testCBP</code></th></tr>\n</thead>\n<tbody>\n<tr><td>This record takes three datums: <code>Username</code>, <code>Password</code>, and a <code>Choice</code> for the number of merchant accounts: 1, 2, 3, 4, or 5. Pick the number of merchant accounts you want first, then \"Add Merchant\" will return with two instances of <code>QuestionAnswer</code> per merchant account.</td></tr>\n<tr><td>For example: With two merchant accounts, you'll get \"Name of Merchant Account #1\" and \"Details of Merchant Account #1\", \"Name of Merchant Account #2\" and \"Details of Merchant Account #2\", etc.</td></tr>\n<tr><td>The first <code>QuestionAnswer</code> of the pair determines the <code>Name</code> of the corresponding merchant account. This will only be needed one time, since it never changes. The second <code>QuestionAnswer</code> determines the details of the merchant account. It expects values in the form of comma-separated, key-value pairs. This <code>QuestionAnswer</code> will come back (as <code>DatumsInvalid</code>) every other sync so you can modify the details of the merchant account.</td></tr>\n<tr><td>For example: \"Name of Merchant Account #1\" could be \"1234\", and \"Details of Merchant Account #1\" might be \"Nickname=My Mortgage, AmountDue=100.00, MinimumDue=25.00, PastDue=50.00, InvoiceDate=01/15/2017, DueDate=02/13/2017\"</td></tr>\n<tr><td>Valid keys are <code>AmountDue</code>, <code>MinimumDue</code>, <code>PastDue</code>, <code>DueDate</code>, <code>InvoiceDate</code>, <code>Nickname</code>. Keys are case-insensitive. Most keys are optional. If filling out \"Details\" for the first time, <code>AmountDue</code> is required. If <code>AmountDue</code> is positive, then <code>DueDate</code> is required as well, otherwise <code>DueDate</code> will be ignored. If you were not to provide valid key-value pairs on subsequent syncs, we will re-use the previous info.</td></tr>\n</tbody>\n</table>\n\n## Payments\n<p>The following test records provide different payment scenarios:</p>\n<table>\n<thead>\n<tr><th>Record: Dominion Energy <code>Dominion_Energy_testCBP</code></th></tr>\n</thead>\n<tbody>\n<tr><td>This record provides a way to test failed payment scenarios.</td></tr>\n<tr><td>In addition to <code>Username</code> and <code>Password</code>, this record takes a \"Payment Status\" <code>Choice</code> datum (<code>Completed</code>, <code>DatumsNeeded</code>, <code>MerchantActionRequired</code>, <code>PaymentAmountDeclined</code>, or <code>PayeeAccountDeclined</code>). The <code>Choice</code> datum specifies the expected payment payment state (Payment <code>ExtendedStatus</code>).</td></tr>\n<tr><td>If <code>DatumsNeeded</code> is selected, all the datums for the merchant will be invalidated, and you will have one minute to return with the new datums (including the expected password). If you do respond within this interval, the payment payment will fail.</td></tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr><th>Record: Frontier Communications <code>Frontier_Communications_testCBP</code></th></tr>\n</thead>\n<tbody>\n<tr><td>This record provides a way to test outage during payment.</td></tr>\n<tr><td>Upon making a payment, a payment payment in <code>PaymentStatus</code>=<code>Processing</code> + <code>PaymentExtendedStatus</code>=<code>Outage</code> is generated.</td></tr>\n</tbody>\n</table>\n\n<table>\n<thead>\n<tr><th>Record: Century Link <code>CenturyLink_testCBP</code></th></tr>\n</thead>\n<tbody>\n<tr><td>This record mimics the ability to pay an amount less than the amount due. Upon making a payment for this record, the <code>AmountRequested</code> in the payment will be a lesser value than the <code>AmountPaid</code>.</td></tr>\n</tbody>\n</table>\n\n"
  }, {
    "name" : "Authentication",
    "description" : "BillGO requires mutual TLS (mTLS) for authentication (certificate pinning).BillGO provides a `*.billgo-{environment}.com` public SSL certificate issued from a trusted certificate authority for our UAT and Production environments\n\nWe expect to receive a public X.509 certificate for your systems in the form of a `.cer` or `.pem` file which we load into our trust stores to validate that the communication to BillGO originated from your systems.\n\nWe also support SFTP file transfer where needed. PGP encryption of files transferred over SFTP can be used.\n\nWe will provide you with a user@billgoserver SFTP location and BillGO public PGP key. We expect to receive a user on your SFTP host location, user@remoteserver, and the host PGP public key for that user from you. We will use your PGP public key to encrypt the files transferred and sign the encrypted file with the BillGO private PGP key. You can use the BillGO public key to verify the file integrity and your private PGP key to decrypt the files transferred.\n"
  }, {
    "name" : "Versioning",
    "description" : "BillGO avoids backwards-incompatible changes when at all possible. The API will be versioned in the event that a backward incompatible change needs to be introduced.\n\nEach client has an API version assigned to their integration. BillGO will support you in transitioning."
  }, {
    "name" : "Merchant Directory",
    "description" : "The following set of APIs support search functionality.\n\n# Sample UI\nHere is an example that presents the recommended merchants.<img src=\"https://api-docs.billgo-dev.com/assets/merchant_directory_ui.png\" alt=\"Merchant Directory UI\"></img>\n\n\n# Flow Diagram\nThis flow diagram outlines how to interact with our API to produce this screen.<img src=\"https://api-docs.billgo-dev.com/assets/merchant_selection_process.png\" alt=\"Merchant Selection Process\"></img>"
  }, {
    "name" : "Address Validation",
    "description" : "Returns verified address suggestions for the address provided."
  }, {
    "name" : "Users",
    "description" : "API set for managing user profiles with BillGO."
  }, {
    "name" : "Funding Accounts",
    "description" : "API set for managing the `User`'s `FundingAccounts`."
  }, {
    "name" : "Customer Funding Accounts",
    "description" : "API set for managing the `User`'s `CustomerFundingAccounts`."
  }, {
    "name" : "Payees",
    "description" : "The following set of APIs support payee management functionality."
  }, {
    "name" : "Payee Accounts",
    "description" : "The following set of APIs support payee account management functionality."
  }, {
    "name" : "Bills",
    "description" : "A set of APIs to access bills."
  }, {
    "name" : "Documents",
    "description" : "The following set of APIs support document functionality."
  }, {
    "name" : "Payments",
    "description" : "The following set of APIs support payment management functionality.\n# Payment Status\nThe following are the descriptions of the status and associated codes. More status and codes may be added at any time, so don't rely on only these existing in your code.\n## Status\n<table>\n<thead>\n<tr><th>Status</th><th>Prior State</th><th>Description</th><th>Applies To</th></tr>\n</thead>\n<tbody>\n<tr><td>PENDING</td><td>PENDING</td><td>This status is reserved for any payment that has not been picked up for processing.</td><td>All</td></tr>\n<tr><td>PENDING_DEBITED</td><td></td><td>This status is used when the customer has been debited but the payment is still able to be edited.</td><td>All non-realtime payments. Realtime payments will move directly from PENDING to PENDING_DEBITED to PROCESSING.</td></tr>\n<tr><td>PROCESSING</td><td>PENDING</td><td>Once a payment is in PROCESSING, the payment cannot be edited.</td><td>All</td></tr>\n<tr><td>INFORMATION_NEEDED</td><td></td><td>This is flagged if more information is needed from the customer to make the same-day / real-time payment if time allows. We can skip this and fall back to a redundant network if not desired.</td><td>Real-time / same-day payments</td></tr>\n<tr><td>CANCELED</td><td></td><td>This is when the user has canceled the payment or the payment can't be made in the case of insufficient funds or fraud. Canceling is available if the payment is in one of the following status: PENDING, PENDING_DEBITED, INFORMATION_NEEDED.</td><td>All</td></tr>\n<tr><td>FAILURE</td><td></td><td>This is an internal status that indicates there was an error with the payment.</td><td>All</td></tr>\n<tr><td>COMPLETED</td><td></td><td>This status signals the payment has been sent to a rail to be paid. Or, in the case of EBN or CHECK, it means the payment was sent to the network.</td><td>All</td></tr>\n<tr><td>SUBMITTED</td><td></td><td>This status signals the payment has been sent to a rail to be paid. Or, in the case of EBN or CHECK, it means the payment was sent to the network.</td><td>All</td></tr>\n<tr><td>SUCCESS</td><td>COMPLETED</td><td>This status signals that the payment was successfully completed. For real-time payments, the biller has accepted the payment. For other delivery rails, it means that the rail as signed that the payment has been successful.</td><td>All</td></tr>\n<tr><td>SUCCESS_RETURN</td><td></td>SUCCESS<td>This status is used if a full return was processed for the user.</td><td>All</td></tr>\n<tr><td>SUCCESS_PARTIAL_RETURN</td><td>SUCCESS</td><td>This status is when a partial return for the payment was processed for the user.</td><td>All</td></tr>\n</tbody>\n</table>\n\n## Status Codes\n<table>\n<thead>\n<tr><th>Status</th><th>Category</th><th>Code</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>FAILURE</td><td>BillerActionRequired</td><td>BillNotFound</td><td>The payment failed because this bill can no longer be found on the website.</td></tr>\n<tr><td></td><td></td><td>CardSecurityCodeIncorrect</td><td>The payment failed because the security code of the card used for the payment was incorrect.</td></tr>\n<tr><td></td><td></td><td>Deprecated</td><td>The payment failed because the merchant has updated its online system.</td></tr>\n<tr><td></td><td></td><td>Locked</td><td>The payment failed because the user's login credentials are locked.</td></tr>\n<tr><td></td><td></td><td>Outage</td><td>The payment failed because the merchant's website is experiencing an outage.</td></tr>\n<tr><td></td><td></td><td>PaymentDisabled</td><td>The payment failed because the merchant is reporting the user is not eligible to make online payments.</td></tr>\n<tr><td></td><td></td><td>Subsumed</td><td>The payment failed because the merchant indicates  the user may have already made the payment via other means.</td></tr>\n<tr><td></td><td>PaymentAccountDeclined</td><td>BankOnly</td><td>The payment failed because the merchant accepts only bank account payments.</td></tr>\n<tr><td></td><td></td><td>CardExpired</td><td>The payment failed because the card used for making the payment has expired.</td></tr>\n<tr><td></td><td></td><td>CardOnly</td><td>The payment failed because the merchant accepts only card payments.</td></tr>\n<tr><td></td><td></td><td>CardSecurityCodeIncorrect</td><td>The payment failed because the security code of the card used for the payment was incorrect.</td></tr>\n<tr><td></td><td></td><td>CreateSecurityQuestions</td><td>The payment failed because the merchant is requiring the user to set security questions on the online account.</td></tr>\n<tr><td></td><td></td><td>Declined</td><td>The payment failed because the merchant did not accept the payment.</td></tr>\n<tr><td></td><td></td><td>ExternalNotAllowed</td><td>The payment failed because the merchant won't allow payments from an external bank.</td></tr>\n<tr><td></td><td></td><td>ExternalNotValidated</td><td>The payment failed because the external bank account used must first be validated on the merchant's website.</td></tr>\n<tr><td></td><td></td><td>VirtualPaymentAllocation</td><td>The payment failed because the merchant will not accept the payment account at this time.</td></tr>\n<tr><td></td><td></td><td>ZipCodeIncorrect</td><td>The payment failed because the payment account has an incorrect ZIP Code.</td></tr>\n<tr><td></td><td>PaymentAmountDeclined</td><td>LessThanAmountDisallowed</td><td>The payment failed because the merchant won't allow a payment of less than a specific amount.</td></tr>\n<tr><td></td><td></td><td>LessThanOwedDisallowed</td><td>The payment failed because the merchant won't allow payment amounts less than the amount owed.</td></tr>\n<tr><td></td><td></td><td>NewLargerAmountDue</td><td>The payment failed because the merchant is reporting  the user now owes a larger amount.</td></tr>\n<tr><td></td><td>DatumsNeeded</td><td>IdentificationCodeRequired</td><td>The payment failed because merchant required another one-time code verification.</td></tr>\n<tr><td></td><td></td><td>DatumsInvalid</td><td>The payment failed because the user's answers did not match  the datums the merchant has on file.</td></tr>\n<tr><td></td><td></td><td>DatumsMissing</td><td>The payment failed because the user did not provide the answers to the merchant's questions required for the payment to complete.</td></tr>\n<tr><td></td><td>Other</td><td>ComplianceDeclined</td><td>The payment was failed because we're having trouble verifying details about the user.</td></tr>\n<tr><td></td><td></td><td>ExpirationTimeExceeded</td><td>The payment was failed because it reached the specified expiration time.</td></tr>\n<tr><td>CANCELED</td><td>PaymentCanceled</td><td>BillNotFound</td><td>The payment was canceled.</td></tr>\n<tr><td></td><td></td><td>CSR</td><td>The payment was canceled by the customer service representative.</td></tr>\n<tr><td></td><td></td><td>Customer</td><td>The payment was canceled by the customer.</td></tr>\n<tr><td></td><td></td><td>NSF</td><td>The payment was cancelled due to insufficient funds.</td></tr>\n<tr><td></td><td></td><td>Fraud</td><td>The payment was identified as fraudulent.</td></tr>\n</tbody>\n</table>\n\n"
  }, {
    "name" : "Schedules",
    "description" : "The following set of APIs support recurring payments."
  }, {
    "name" : "Notifications",
    "description" : "Notifications summarize events of interest for a user. Such events may include \"new bill available\", \"bill due tomorrow\", \"payee missing datum\", and \"payee locked\". Notifications are transient and may only exist for short periods of time (for example, a notification denoting \"bill due tomorrow\" may only be around for one day, before being replaced with a new notification \"bill due today\").\n\nSince notifications are events of interest to a user, you should feel free to treat the full list of notifications like a transient \"news feed\" for a user and to show these notifications directly. User-friendly text will be provided in the notification's `title` and `subtitle` properties. In addition, the `level` property can be used to determine the priority and/or mechanism to notify the user (SMS vs. e-mail, for example). Other properties on the notification, like `payeeAccountIds` will tell you which `Payee` the notification relates to.# Notification Types\nThe following are the user notification types we currently support: `SYNC`, `BILL`, `PAYMENT`, and `PAYEE_ACCOUNT`. For each type, you can look at the \"status\" and optionally, \"extendedStatus\" for more detailed information. More types and extended statuses may be added at any time, so don't rely on only these types existing in your code.\n## Link\n<table>\n<thead>\n<tr><th>LinkStatus</th><th>LinkExtendedStatus</th><th>Message</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>DatumsMissing</td><td></td><td>Login Details Missing</td><td>The payee is missing some login details.</td></tr>\n<tr><td>DatumsInvalid</td><td></td><td>Login Details Invalid</td><td>The payee's login details are incorrect.</td></tr>\n<tr><td>DatumsValid</td><td></td><td>Login Details Successfully Validated</td><td>The payee's datums have been verified.</td></tr>\n<tr><td>Linked</td><td></td><td>Merchant Linked</td><td>The payee was synced for the first time.</td></tr>\n<tr><td>Locked</td><td></td><td>Merchant Account Locked</td><td>The payment account has been locked on the payee's website.</td></tr>\n<tr><td>Locked</td><td>IdentificationCodeRequired</td><td>MFA Needed</td><td>The payee requires a multi-factor authentication code.</td></tr>\n<tr><td>Closed</td><td></td><td>Merchant Site Closed</td><td>The payment account has been closed on the payee's website.</td></tr>\n<tr><td>Outage</td><td></td><td>Merchant Site Experiencing an Outage</td><td>The payee website is experiencing problems. Info may be out of date.</td></tr>\n</tbody>\n</table>\n\n## Bill\n<table>\n<thead>\n<tr><th>BillStatus</th><th>BillExtendedStatus</th><th>Message</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Unpaid</td><td>Available</td><td>New Bill Created</td><td>A new bill is available.</td></tr>\n<tr><td>Unpaid</td><td>Available</td><td>New Bill Invoice Available</td><td>A new bill invoice is available.</td></tr>\n<tr><td>Unpaid</td><td>NearDue</td><td>Bill Due Soon</td><td>The bill is due soon.</td></tr>\n<tr><td>Unpaid</td><td>Due</td><td>Bill Due Today</td><td>The bill is due today or is due now.</td></tr>\n<tr><td>Unpaid</td><td>PastDue</td><td>Bill Past Due</td><td>The bill was due in the past.</td></tr>\n<tr><td>ServiceAutomatic</td><td></td><td></td><td>The bill is on autopay on the payee's website.</td></tr>\n<tr><td>ServiceScheduled</td><td></td><td></td><td>The bill is scheduled on the payee's website.</td></tr>\n<tr><td>RecurringAutomatic</td><td></td><td>Bill Now On Autopay</td><td>The bill is on autopay via the BillGO service.</td></tr>\n<tr><td>RecurringScheduled</td><td></td><td>Bill Payment Scheduled</td><td>The bill is scheduled via the BillGO service.</td></tr>\n</tbody>\n</table>\n\n## PayeeAccount\n<table>\n<thead>\n<tr><th>PayeeAccountStatus</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>None</td><td>The account lacks status.</td></tr>\n<tr><td>Expiring</td><td>The account is expiring.</td></tr>\n<tr><td>Expired</td><td>The account has expired.</td></tr>\n<tr><td>Invalid</td><td>The account is invalid.</td></tr>\n</tbody>\n</table>\n\n## Payment\n<table>\n<thead>\n<tr><th>PaymentStatus</th><th>PaymentExtendedStatus</th><th>Message</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>Processing</td><td>Outage</td><td></td><td>The payment has not yet been paid because of a payee outage.</td></tr>\n<tr><td>Completed</td><td></td><td></td><td>The payment has posted to processor for execution.</td></tr>\n<tr><td>Success</td><td></td><td>Payment Successful</td><td>The payment has been confirmed by the payee.</td></tr>\n<tr><td>Canceled</td><td></td><td></td><td>The payment has been canceled by the user.</td></tr>\n<tr><td>Failed</td><td></td><td></td><td>The payment failed and payment was not received by the payee.</td></tr>\n<tr><td>Failed</td><td>DatumsNeeded</td><td>Payment Not Successful-- Login Details may need to be updated</td><td>The payment failed because of missing or invalid datums.</td></tr>\n<tr><td>Failed</td><td>PayeeAccountDeclined</td><td></td><td>The payment failed because the payment account was not accepted by the payee.</td></tr>\n<tr><td>Failed</td><td>PayeeActionRequired</td><td></td><td>The payment failed because an action was required by the payee.</td></tr>\n<tr><td>Failed</td><td>PaymentAmountDeclined</td><td></td><td>The payment failed because the payment amount was not accepted by the payee.</td></tr>\n</tbody>\n</table>\n\n## User\n<table>\n<thead>\n<tr><th>Message</th><th>Description</th></tr>\n</thead>\n<tbody>\n<tr><td>User Created</td><td>A new user has been added.</td></tr>\n<tr><td>User Email Address Updated</td><td>User's email address has been updated. </td></tr>\n<tr><td>User Phone Number Updated</td><td>User's phone number has been updated.</td></tr>\n</tbody>\n</table>\n\n"
  }, {
    "name" : "Webhooks",
    "description" : "Webhooks can be used to be notified asynchronously of changes that happen to system resources. Since BillGO is responsible for keeping data in sync over time, it is both possible and expected for this data to change outside of and due to a client-initiated request. A webhook can be utilized to learn of these changes in an asynchronous manner. By registering a webhook URL, we will notify you any time a system resource change occurs within your account.\n\nThe webhook should be a dedicated endpoint on your server. The webhook URL can be configured per-environment - Production and User Acceptance Test. Once this URL and notifications to receive has been configured, every time relevant data within the BillGO system changes, a POST to the URL will be performed. The provided URL must use mTLS connection to ensure data is not transmitted in the clear.\n## Security\nTo secure your webhook endpoints so they are not accessed by a third party, the BillGO Bill Pay API requires mTLS connection (aka certificate pinning).\n## Response\nTo acknowledge receipt of a webhook notification, your endpoint should return a 2xx HTTP status code. Any other information returned in the response will be ignored. All response codes outside this range, including 3xx, 4xx, and 5xx status codes will be treated as failures.\n\nIf a webhook notification is not successfully received for any reason, BillGO will continue to resend the webhook using an exponential back off algorithm until successfully delivered. Webhook notifications are sent asynchronously and are not guaranteed to be delivered or received in order. You should protect against duplicate notifications by making notification processing idempotent. A notification identifier is guaranteed to be unique.\n## Best Practices\nIf your webhook script performs complex logic, or makes network calls, it's possible the script may timeout before BillGO receives your response. As a result, you may want to have your endpoint immediately acknowledge receipt by returning a 2xx HTTP status code before processing the webhook notification. Similarly, although we will reattempt delivery of a webhook in the event of an error response, it's best to save or cache the webhook notification and immediately acknowledge receipt before processing. Keep complex logic out of your webhook script in order to keep event ordering more predictable.\n## Notifications\nIn BillGO, system resource changes are exposed as notifications. As a client, you can configure which notifications you'd like to receive. Any time a system resource changes, notifications are created, and a webhook notification will be triggered. Included in the payload are current and previous state of the system resource as defined in the resource descriptions in the API. A consumer of the webhook may compare the received notification previous and current state data to determine what action should be taken. This allows you to capture system state and notify your customers as needed. The USER_NOTIFICATION details.resourceType is for all notifications that we have categorized as important for the user.\n\nNotification fields:\n<table>\n    <tr><th>Field</th><th>Description</th></tr>\n    <tr><td>id</td><td>The unique identifier for the notification</td></tr>\n    <tr><td>created</td><td>The timestamp of when the notification was created</td></tr>\n    <tr><td>updated</td><td>The timestamp of when the notification was updated</td></tr>\n    <tr><td>delivered</td><td>The timestamp of when the notification was delivered</td></tr>\n    <tr><td>deliveryAttempts</td><td>The number of attempts made to deliver the notification</td></tr>\n    <tr><td>details</td><td>The notification details</td></tr>\n    <tr><td>details.userId</td><td>The identifier for the User</td></tr>\n    <tr><td>details.partnerUserId</td><td>The partner identifier for the User that allows the partner to access the BillGO User</td></tr>\n    <tr><td>details.resourceType</td><td>Indicates the type of the resource (USER, PAYEE, PAYEE_ACCOUNT, BILL, DOCUMENT, PAYMENT, SCHEDULE, USER_NOTIFICATION, USER_JWT)</td></tr>\n    <tr><td>details.resourceUrl</td><td>The relative URL to retrieve the resource that the notification is associated with</td></tr>\n    <tr><td>details.resource</td><td>The new or updated JSON string representation of the resource that the notification is associated with</td></tr>\n    <tr><td>details.previousResource</td><td>The previous JSON string representation of the resource that the notification is associated with</td></tr>\n    <tr><td>details.apiVersion</td><td>The API version of the resource that the notification is associated with</td></tr>\n    <tr><td>details.isTest</td><td>Indicates if the notification is for a test resource</td></tr>\n    <tr><td>details.operationType</td><td>Indicates if the resource was `CREATED`, `UPDATED`, or `REMOVED`</td></tr>\n</table>\n\n## Example Payloads\n\n### User\n\n\n    {\n\n    \"id\":\"e_fbd40f3f63b14400824b945635a63d52\",\n\n    \"created\":\"2018-01-01T13:01:01Z\",\n\n    \"updated\":\"2018-01-01T13:30:01Z\",\n\n    \"delivered\":\"2018-01-01T13:30:01Z\",\n\n    \"deliveryAttempts\":\"1\",\n\n    \"details\":{\n\n        \"resourceType\":\"USER\",\n\n        \"resourceUrl\":\"/users/user_a212f949-c989-4e90-bd16-ee4085a9157a\",\n\n        \"resource\":\"{\\\"id\\\":\\\"user_a212f949-c989-4e90-bd16-ee4085a9157a\\\",\\\"created\\\":{\\\"epochSecond\\\":1605737233,\\\"nano\\\":500000000},\\\"updated\\\":{\\\"epochSecond\\\":1605737233,\\\"nano\\\":500000000},\\\"partnerUserId\\\":\\\"bill.billerson1605737222742\\\",\\\"status\\\":\\\"ACTIVE\\\",\\\"reasonForDisabling\\\":null,\\\"reasonForEnabling\\\":null,\\\"profile\\\":{\\\"type\\\":\\\"PERSONAL\\\",\\\"accountHolderName\\\":{\\\"type\\\":\\\"INDIVIDUAL\\\",\\\"firstName\\\":\\\"Bill\\\",\\\"middleNameOrInitial\\\":null,\\\"lastName\\\":\\\"Billerson\\\",\\\"suffix\\\":\\\"III\\\",\\\"businessName\\\":null,\\\"openFormNameField\\\":null},\\\"taxId\\\":\\\"123-45-6789\\\",\\\"dateOfBirth\\\":{\\\"year\\\":1969,\\\"month\\\":\\\"JULY\\\",\\\"monthValue\\\":7,\\\"dayOfMonth\\\":4,\\\"chronology\\\":{\\\"calendarType\\\":\\\"iso8601\\\",\\\"id\\\":\\\"ISO\\\"},\\\"leapYear\\\":false,\\\"dayOfWeek\\\":\\\"FRIDAY\\\",\\\"dayOfYear\\\":185,\\\"era\\\":\\\"CE\\\"},\\\"primaryPhone\\\":{\\\"phoneNumber\\\":\\\"+1 970 123 4561\\\",\\\"extension\\\":null,\\\"type\\\":\\\"MOBILE\\\",\\\"verified\\\":null},\\\"secondaryPhone\\\":{\\\"phoneNumber\\\":null,\\\"extension\\\":null,\\\"type\\\":null,\\\"verified\\\":null},\\\"tertiaryPhone\\\":{\\\"phoneNumber\\\":null,\\\"extension\\\":null,\\\"type\\\":null,\\\"verified\\\":null},\\\"emailAddress\\\":null,\\\"emailVerified\\\":null,\\\"emailLastUpdated\\\":null,\\\"customerConsent\\\":{},\\\"addresses\\\":[{\\\"defaultAddress\\\":true,\\\"id\\\":\\\"addr_e2985df5-8026-4e98-8caa-5d87e877d0f0\\\",\\\"created\\\":{\\\"epochSecond\\\":1605737233,\\\"nano\\\":576000000},\\\"updated\\\":{\\\"epochSecond\\\":1605737233,\\\"nano\\\":576000000},\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"MAILING\\\",\\\"verified\\\":null,\\\"addressLine1\\\":\\\"3003 E Harmony Rd\\\",\\\"addressLine2\\\":\\\"Ste 500\\\",\\\"city\\\":\\\"Fort Collins\\\",\\\"stateAbbreviation\\\":\\\"CO\\\",\\\"postalCode\\\":\\\"80528-9628\\\",\\\"countryCode\\\":\\\"US\\\"}],\\\"accountSubType\\\":null,\\\"businessProprietor\\\":null,\\\"bankAccountEnrollmentDate\\\":null,\\\"enrollmentSource\\\":null,\\\"olbStartDate\\\":null,\\\"billPaySinceDate\\\":null,\\\"customerRelationshipStartDate\\\":null},\\\"accountOrigin\\\":\\\"NEW\\\",\\\"test\\\":false,\\\"payees\\\":null}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":\"v.20200501\",\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"CREATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### Payee\n\n\n    {\n\n    \"id\":\"e_fbd40f3f63b14400824b945635a63d52\",\n\n    \"created\":\"2018-01-01T13:01:01Z\",\n\n    \"updated\":\"2018-01-01T13:30:01Z\",\n\n    \"delivered\":\"2018-01-01T13:30:01Z\",\n\n    \"deliveryAttempts\":\"1\",\n\n    \"details\":{\n\n        \"resourceType\":\"PAYEE\",\n\n        \"resourceUrl\":\"/users/user_aa314deb-4f05-408d-90be-8ba0efe12427/payees/payee_5b8aa9de-148e-463c-9efd-cff0930f10b9\",\n\n        \"resource\":\"{\\\"id\\\":\\\"payee_5b8aa9de-148e-463c-9efd-cff0930f10b9\\\",\\\"created\\\":{\\\"nano\\\":580000000,\\\"epochSecond\\\":1605737690},\\\"updated\\\":{\\\"nano\\\":580000000,\\\"epochSecond\\\":1605737690},\\\"status\\\":\\\"ACTIVE\\\",\\\"name\\\":\\\"GEICO (Test)\\\",\\\"merchantPhoneNumber\\\":\\\"+1 970 867 5309\\\",\\\"naicsCodes\\\":null,\\\"linkData\\\":null,\\\"notice\\\":null,\\\"accounts\\\":null,\\\"merchantLink\\\":null,\\\"merchantLocationId\\\":null,\\\"merchantAddress\\\":null,\\\"trusted\\\":false,\\\"linkStatus\\\":null,\\\"payerAddress\\\":null}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":\"v.20200501\",\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"CREATED\"\n\n      }\n\n    }\n\n\n\n### Payee Account\n\n\n    {\n\n    \"id\":\"e_fbd40f3f63b14400824b945635a63d52\",\n\n    \"created\":\"2018-01-01T13:01:01Z\",\n\n    \"updated\":\"2018-01-01T13:30:01Z\",\n\n    \"delivered\":\"2018-01-01T13:30:01Z\",\n\n    \"deliveryAttempts\":\"1\",\n\n    \"details\":{\n\n        \"resourceType\":\"PAYEE_ACCOUNT\",\n\n        \"resourceUrl\":\"/users/user_aa314deb-4f05-408d-90be-8ba0efe12427/payeeaccounts/pacct_bbe916c5-f722-4048-9d13-82081a02c626\",\n\n        \"resource\":\"{\\\"id\\\":\\\"pacct_bbe916c5-f722-4048-9d13-82081a02c626\\\",\\\"created\\\":{\\\"nano\\\":318000000,\\\"epochSecond\\\":1605737794},\\\"updated\\\":{\\\"nano\\\":318000000,\\\"epochSecond\\\":1605737794},\\\"established\\\":{\\\"nano\\\":0,\\\"epochSecond\\\":1539534060},\\\"hidden\\\":false,\\\"status\\\":\\\"PENDING\\\",\\\"name\\\":\\\"Ford F150 Insurance\\\",\\\"notice\\\":null,\\\"accountRemittanceInfo\\\":null,\\\"paymentInfo\\\":{\\\"id\\\":\\\"pinfo_220834f6-f4a3-45e2-a2b5-de42b90c0fa3\\\",\\\"created\\\":{\\\"nano\\\":320000000,\\\"epochSecond\\\":1605737794},\\\"updated\\\":{\\\"nano\\\":320000000,\\\"epochSecond\\\":1605737794},\\\"isPayable\\\":null,\\\"lastPayment\\\":null,\\\"nextPayment\\\":null,\\\"isCustomerFundingAccountTypeSupported\\\":null,\\\"fundingAccount\\\":{\\\"id\\\":\\\"fa_08aca226-a7fa-4669-aac9-7eba69aadd0b\\\",\\\"created\\\":{\\\"nano\\\":345000000,\\\"epochSecond\\\":1605737779},\\\"updated\\\":{\\\"nano\\\":345000000,\\\"epochSecond\\\":1605737779},\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"ACCOUNT_DETAILS\\\",\\\"defaultFundingAccount\\\":true,\\\"partnerId\\\":null,\\\"nickname\\\":null,\\\"bankAccount\\\":{\\\"id\\\":\\\"ba_8c9d92e4-f4c9-48eb-9b4c-8ba8b322b6a6\\\",\\\"created\\\":{\\\"nano\\\":328000000,\\\"epochSecond\\\":1605737779},\\\"updated\\\":{\\\"nano\\\":346000000,\\\"epochSecond\\\":1605737779},\\\"type\\\":\\\"DDA\\\",\\\"subType\\\":\\\"CHECKING\\\",\\\"authorizedUsers\\\":[],\\\"accountNumber\\\":\\\"####1875\\\",\\\"routingNumber\\\":\\\"102001017\\\"}},\\\"customerFundingAccount\\\":null,\\\"recurringSchedule\\\":null},\\\"billStatus\\\":null,\\\"payerAddress\\\":{\\\"id\\\":\\\"addr_025475ac-3a15-4a55-8335-30da38dc07db\\\",\\\"created\\\":{\\\"nano\\\":602000000,\\\"epochSecond\\\":1605737532},\\\"updated\\\":{\\\"nano\\\":321000000,\\\"epochSecond\\\":1605737794},\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"MAILING\\\",\\\"verified\\\":null,\\\"addressLine1\\\":\\\"3003 E Harmony Rd\\\",\\\"addressLine2\\\":\\\"Ste 500\\\",\\\"city\\\":\\\"Fort Collins\\\",\\\"stateAbbreviation\\\":\\\"CO\\\",\\\"postalCode\\\":\\\"80528-9628\\\",\\\"countryCode\\\":\\\"US\\\"},\\\"owedBalance\\\":null,\\\"payments\\\":[],\\\"latestBill\\\":null,\\\"documentEnrollmentStatus\\\":\\\"NONE\\\",\\\"latestDocumentId\\\":null,\\\"base64PayeeLogo\\\":null,\\\"payeeInfo\\\":{\\\"linkStatus\\\":\\\"NOT_LINKABLE\\\"},\\\"payeeLink\\\":null,\\\"accountToAccountPayeeInfo\\\":{\\\"id\\\":\\\"parema_7738b885-34b9-48b8-b454-6bd683045dc6\\\",\\\"created\\\":{\\\"nano\\\":317000000,\\\"epochSecond\\\":1605737794},\\\"updated\\\":{\\\"nano\\\":317000000,\\\"epochSecond\\\":1605737794},\\\"bankAccountLast4\\\":\\\"####8484\\\",\\\"routingNumberLast4\\\":\\\"#####6789\\\",\\\"payeeAccountType\\\":\\\"CHECKING\\\"}}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":\"v.20200501\",\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"CREATED\"\n\n      }\n\n    }\n\n\n\n### Payment\n\n\n    {\n\n    \"id\":\"e_fbd40f3f63b14400824b945635a63d52\",\n\n    \"created\":\"2018-01-01T13:01:01Z\",\n\n    \"updated\":\"2018-01-01T13:01:01Z\",\n\n    \"delivered\":\"2018-01-01T13:30:01Z\",\n\n    \"deliveryAttempts\":\"1\",\n\n    \"details\":{\n\n        \"resourceType\":\"PAYMENT\",\n\n        \"resourceUrl\":\"/users/bill.billerson1605737525050/payments/pymt_9eb637c7-3fbb-453e-a2a0-ef05c118b0c0\",\n\n        \"resource\":\"{\\\"id\\\":\\\"pymt_9eb637c7-3fbb-453e-a2a0-ef05c118b0c0\\\",\\\"created\\\":{\\\"nano\\\":184000000,\\\"epochSecond\\\":1605737848},\\\"updated\\\":{\\\"nano\\\":184000000,\\\"epochSecond\\\":1605737848},\\\"originationType\\\":\\\"RECURRENCE_SCHEDULE_PAYMENT\\\",\\\"partnerId\\\":\\\"bill.billerson16057375250502020-11-18T22:17:28.103Z\\\",\\\"status\\\":\\\"PENDING\\\",\\\"statusCode\\\":null,\\\"sendOnDate\\\":{\\\"year\\\":2020,\\\"month\\\":\\\"NOVEMBER\\\",\\\"chronology\\\":{\\\"id\\\":\\\"ISO\\\",\\\"calendarType\\\":\\\"iso8601\\\"},\\\"monthValue\\\":11,\\\"dayOfMonth\\\":18,\\\"dayOfWeek\\\":\\\"WEDNESDAY\\\",\\\"dayOfYear\\\":323,\\\"era\\\":\\\"CE\\\",\\\"leapYear\\\":true},\\\"deliverByDate\\\":null,\\\"memo\\\":\\\"this is a memo\\\",\\\"feeAllowance\\\":null,\\\"paymentAmount\\\":{\\\"amount\\\":\\\"168.94\\\",\\\"currency\\\":\\\"USD\\\"},\\\"fundingAccount\\\":{\\\"id\\\":\\\"fa_08aca226-a7fa-4669-aac9-7eba69aadd0b\\\",\\\"created\\\":{\\\"nano\\\":345000000,\\\"epochSecond\\\":1605737779},\\\"updated\\\":{\\\"nano\\\":345000000,\\\"epochSecond\\\":1605737779},\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"ACCOUNT_DETAILS\\\",\\\"defaultFundingAccount\\\":true,\\\"partnerId\\\":null,\\\"nickname\\\":null,\\\"bankAccount\\\":{\\\"id\\\":\\\"ba_8c9d92e4-f4c9-48eb-9b4c-8ba8b322b6a6\\\",\\\"created\\\":{\\\"nano\\\":328000000,\\\"epochSecond\\\":1605737779},\\\"updated\\\":{\\\"nano\\\":346000000,\\\"epochSecond\\\":1605737779},\\\"type\\\":\\\"DDA\\\",\\\"subType\\\":\\\"CHECKING\\\",\\\"authorizedUsers\\\":[],\\\"accountNumber\\\":\\\"####1875\\\",\\\"routingNumber\\\":\\\"102001017\\\"}},\\\"customerFundingAccount\\\":null,\\\"paymentResult\\\":null,\\\"payeeAccountLink\\\":{\\\"uri\\\":\\\"/users/bill.billerson1605737525050/payeeaccounts/pacct_bbe916c5-f722-4048-9d13-82081a02c626\\\",\\\"params\\\":{\\\"rel\\\":\\\"payee account\\\"},\\\"title\\\":null,\\\"type\\\":null,\\\"uriBuilder\\\":{\\\"absolute\\\":false},\\\"rel\\\":\\\"payee account\\\",\\\"rels\\\":[\\\"payee\\\",\\\"account\\\"]},\\\"recurrenceScheduleId\\\":null,\\\"attributes\\\":null,\\\"payeeSummary\\\":null}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":\"v.20200501\",\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"CREATED\"\n\n      }\n\n    }\n\n\n\n### User Created\n\n\n    {\n\n    \"id\":5bf39377-fc8c-7b13-a4f4-4e72a9de3a81,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"USER\",\n\n        \"resourceUrl\":\"/users/fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"resource\":\"{\\\"id\\\":\\\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\\\",\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"partnerUserId\\\":\\\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\\\",\\\"status\\\":\\\"ACTIVE\\\",\\\"reasonForDisabling\\\":null,\\\"reasonForEnabling\\\":null,\\\"profile\\\":{\\\"type\\\":\\\"PERSONAL\\\",\\\"accountHolderName\\\":{\\\"type\\\":\\\"INDIVIDUAL\\\",\\\"firstName\\\":\\\"Nancy\\\",\\\"middleNameOrInitial\\\":\\\"K\\\",\\\"lastName\\\":\\\"Wilson\\\",\\\"suffix\\\":null,\\\"businessName\\\":null,\\\"openFormNameField\\\":null},\\\"taxId\\\":\\\"123-45-6789\\\",\\\"dateOfBirth\\\":\\\"1959-01-03\\\",\\\"primaryPhone\\\":{\\\"phoneNumber\\\":\\\"+ 719 271 0052\\\",\\\"extension\\\":null,\\\"type\\\":\\\"MOBILE\\\",\\\"verified\\\":null},\\\"secondaryPhone\\\":null,\\\"tertiaryPhone\\\":null,\\\"emailAddress\\\":\\\"test.email.address@billgo.com\\\",\\\"emailVerified\\\":null,\\\"emailLastUpdated\\\":null,\\\"customerConsent\\\":null,\\\"addresses\\\":[{\\\"defaultAddress\\\":true,\\\"addressLine3\\\":null,\\\"addressLine4\\\":null,\\\"province\\\":null,\\\"id\\\":null,\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"PHYSICAL\\\",\\\"verified\\\":null,\\\"addressLine1\\\":\\\"6830 NE Bothell Way\\\",\\\"addressLine2\\\":\\\"Ste C\\\",\\\"city\\\":\\\"Kenmore\\\",\\\"stateAbbreviation\\\":\\\"WA\\\",\\\"postalCode\\\":\\\"98028-3546\\\",\\\"countryCode\\\":\\\"US\\\"}],\\\"accountSubType\\\":null,\\\"businessProprietor\\\":null,\\\"bankAccountEnrollmentDate\\\":null,\\\"enrollmentSource\\\":null,\\\"olbStartDate\\\":null,\\\"billPaySinceDate\\\":null,\\\"customerRelationshipStartDate\\\":null},\\\"accountOrigin\\\":\\\"NEW\\\",\\\"test\\\":null,\\\"payees\\\":null}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":null,\n\n        \"isTest\":null,\n\n        \"operationType\":\"CREATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### User Updated\n\n\n    {\n\n    \"id\":200e148d-5896-47a9-a923-a818554317c9,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"USER\",\n\n        \"resourceUrl\":\"/users/fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"resource\":\"{\\\"id\\\":\\\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\\\",\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"partnerUserId\\\":\\\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\\\",\\\"status\\\":\\\"ARCHIVED\\\",\\\"reasonForDisabling\\\":null,\\\"reasonForEnabling\\\":null,\\\"profile\\\":{\\\"type\\\":\\\"PERSONAL\\\",\\\"accountHolderName\\\":{\\\"type\\\":\\\"INDIVIDUAL\\\",\\\"firstName\\\":\\\"Jane\\\",\\\"middleNameOrInitial\\\":null,\\\"lastName\\\":\\\"Clark\\\",\\\"suffix\\\":null,\\\"businessName\\\":null,\\\"openFormNameField\\\":null},\\\"taxId\\\":\\\"62-4347688\\\",\\\"dateOfBirth\\\":\\\"1973-12-04\\\",\\\"primaryPhone\\\":{\\\"phoneNumber\\\":\\\"+ 719 271 0052\\\",\\\"extension\\\":null,\\\"type\\\":\\\"MOBILE\\\",\\\"verified\\\":null},\\\"secondaryPhone\\\":null,\\\"tertiaryPhone\\\":null,\\\"emailAddress\\\":\\\"test.email.address@billgo.com\\\",\\\"emailVerified\\\":null,\\\"emailLastUpdated\\\":null,\\\"customerConsent\\\":null,\\\"addresses\\\":[{\\\"defaultAddress\\\":true,\\\"addressLine3\\\":null,\\\"addressLine4\\\":null,\\\"province\\\":null,\\\"id\\\":null,\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"PHYSICAL\\\",\\\"verified\\\":null,\\\"addressLine1\\\":\\\"6830 NE Bothell Way\\\",\\\"addressLine2\\\":\\\"Ste C\\\",\\\"city\\\":\\\"Kenmore\\\",\\\"stateAbbreviation\\\":\\\"WA\\\",\\\"postalCode\\\":\\\"98028-3546\\\",\\\"countryCode\\\":\\\"US\\\"}],\\\"accountSubType\\\":null,\\\"businessProprietor\\\":null,\\\"bankAccountEnrollmentDate\\\":null,\\\"enrollmentSource\\\":null,\\\"olbStartDate\\\":null,\\\"billPaySinceDate\\\":null,\\\"customerRelationshipStartDate\\\":null},\\\"accountOrigin\\\":\\\"NEW\\\",\\\"test\\\":null,\\\"payees\\\":null}\",\n\n        \"previousResource\":\"{\\\"id\\\":null,\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"partnerUserId\\\":\\\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\\\",\\\"status\\\":\\\"ACTIVE\\\",\\\"reasonForDisabling\\\":null,\\\"reasonForEnabling\\\":null,\\\"profile\\\":{\\\"type\\\":\\\"PERSONAL\\\",\\\"accountHolderName\\\":{\\\"type\\\":\\\"INDIVIDUAL\\\",\\\"firstName\\\":\\\"Jane\\\",\\\"middleNameOrInitial\\\":null,\\\"lastName\\\":\\\"Clark\\\",\\\"suffix\\\":null,\\\"businessName\\\":null,\\\"openFormNameField\\\":null},\\\"taxId\\\":\\\"62-4347688\\\",\\\"dateOfBirth\\\":\\\"1973-12-04\\\",\\\"primaryPhone\\\":{\\\"phoneNumber\\\":\\\"+ 719 271 0052\\\",\\\"extension\\\":null,\\\"type\\\":\\\"MOBILE\\\",\\\"verified\\\":null},\\\"secondaryPhone\\\":null,\\\"tertiaryPhone\\\":null,\\\"emailAddress\\\":\\\"test.email.address@billgo.com\\\",\\\"emailVerified\\\":null,\\\"emailLastUpdated\\\":null,\\\"customerConsent\\\":null,\\\"addresses\\\":[{\\\"defaultAddress\\\":true,\\\"addressLine3\\\":null,\\\"addressLine4\\\":null,\\\"province\\\":null,\\\"id\\\":null,\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"PHYSICAL\\\",\\\"verified\\\":null,\\\"addressLine1\\\":\\\"6830 NE Bothell Way\\\",\\\"addressLine2\\\":\\\"Ste C\\\",\\\"city\\\":\\\"Kenmore\\\",\\\"stateAbbreviation\\\":\\\"WA\\\",\\\"postalCode\\\":\\\"98028-3546\\\",\\\"countryCode\\\":\\\"US\\\"}],\\\"accountSubType\\\":null,\\\"businessProprietor\\\":null,\\\"bankAccountEnrollmentDate\\\":null,\\\"enrollmentSource\\\":null,\\\"olbStartDate\\\":null,\\\"billPaySinceDate\\\":null,\\\"customerRelationshipStartDate\\\":null},\\\"accountOrigin\\\":\\\"NEW\\\",\\\"test\\\":null,\\\"payees\\\":null}\",\n\n        \"apiVersion\":null,\n\n        \"isTest\":null,\n\n        \"operationType\":\"UPDATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### User Removed\n\n\n    {\n\n    \"id\":9badc1b6-ffc6-4015-9939-544c6172261e,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"USER\",\n\n        \"resourceUrl\":null,\n\n        \"resource\":null,\n\n        \"previousResource\":\"{\\\"id\\\":null,\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"partnerUserId\\\":\\\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\\\",\\\"status\\\":\\\"ACTIVE\\\",\\\"reasonForDisabling\\\":null,\\\"reasonForEnabling\\\":null,\\\"profile\\\":{\\\"type\\\":\\\"PERSONAL\\\",\\\"accountHolderName\\\":{\\\"type\\\":\\\"INDIVIDUAL\\\",\\\"firstName\\\":\\\"Henry\\\",\\\"middleNameOrInitial\\\":null,\\\"lastName\\\":\\\"Davis\\\",\\\"suffix\\\":\\\"Sr\\\",\\\"businessName\\\":null,\\\"openFormNameField\\\":null},\\\"taxId\\\":\\\"321-54-9876\\\",\\\"dateOfBirth\\\":\\\"1848-01-24\\\",\\\"primaryPhone\\\":{\\\"phoneNumber\\\":\\\"+ 719 271 0052\\\",\\\"extension\\\":null,\\\"type\\\":\\\"MOBILE\\\",\\\"verified\\\":null},\\\"secondaryPhone\\\":null,\\\"tertiaryPhone\\\":null,\\\"emailAddress\\\":\\\"test.email.address@billgo.com\\\",\\\"emailVerified\\\":null,\\\"emailLastUpdated\\\":null,\\\"customerConsent\\\":null,\\\"addresses\\\":[{\\\"defaultAddress\\\":true,\\\"addressLine3\\\":null,\\\"addressLine4\\\":null,\\\"province\\\":null,\\\"id\\\":null,\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"status\\\":\\\"ACTIVE\\\",\\\"type\\\":\\\"PHYSICAL\\\",\\\"verified\\\":null,\\\"addressLine1\\\":\\\"6830 NE Bothell Way\\\",\\\"addressLine2\\\":\\\"Ste C\\\",\\\"city\\\":\\\"Kenmore\\\",\\\"stateAbbreviation\\\":\\\"WA\\\",\\\"postalCode\\\":\\\"98028-3546\\\",\\\"countryCode\\\":\\\"US\\\"}],\\\"accountSubType\\\":null,\\\"businessProprietor\\\":null,\\\"bankAccountEnrollmentDate\\\":null,\\\"enrollmentSource\\\":null,\\\"olbStartDate\\\":null,\\\"billPaySinceDate\\\":null,\\\"customerRelationshipStartDate\\\":null},\\\"accountOrigin\\\":\\\"NEW\\\",\\\"test\\\":null,\\\"payees\\\":null}\",\n\n        \"apiVersion\":null,\n\n        \"isTest\":null,\n\n        \"operationType\":\"REMOVED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### User Notification\n\n\n    {\n\n    \"id\":c6296b30-92cd-4408-892c-72737a5980f8,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"USER_NOTIFICATION\",\n\n        \"resourceUrl\":\"/users/fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"resource\":\"{\\\"id\\\":\\\"94637191-f17b-4ed5-bb2d-653ec3b97795\\\",\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"delivered\\\":null,\\\"deliveryStatus\\\":\\\"QUEUED\\\",\\\"deliveryAttempts\\\":0,\\\"details\\\":{\\\"userId\\\":\\\"578df455-4869-4e33-bbfa-d4e061ec9942\\\",\\\"partnerUserId\\\":\\\"9079b6e9-f419-4304-8d90-4d7dfab1c8bb\\\",\\\"level\\\":\\\"NORMAL\\\",\\\"type\\\":\\\"PAYMENT\\\",\\\"payeeAccountIds\\\":null,\\\"status\\\":\\\"\\\",\\\"state\\\":{\\\"seen\\\":false,\\\"read\\\":false,\\\"dismissed\\\":false},\\\"content\\\":{\\\"title\\\":\\\"Payment: AT&T Mobility\\\",\\\"subtitle\\\":null,\\\"content\\\":\\\"Payment to AT&T Mobility was made for $125.00\\\"},\\\"extendedStatus\\\":\\\"NONE\\\"}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":null,\n\n        \"isTest\":null,\n\n        \"operationType\":\"CREATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### Schedule Created\n\n\n    {\n\n    \"id\":033a978b-fca3-45f2-b747-5de4198d965d,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"SCHEDULE\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"SCHEDULE\",\n\n        \"resourceUrl\":\"/users/fc4522ad-ceb0-4f92-8aa8-9501a2252f25/schedules/s_161777ee-8ff0-4df4-a22e-c0a6cfc16236\",\n\n        \"resource\":\"{\\\"id\\\":\\\"s_161777ee-8ff0-4df4-a22e-c0a6cfc16236\\\",\\\"externalId\\\":null,\\\"created\\\":\\\"2021-02-17T21:33:28.174457Z\\\",\\\"updated\\\":\\\"2021-02-17T21:33:28.174457Z\\\",\\\"partnerScheduleId\\\":null,\\\"status\\\":null,\\\"calendarBased\\\":null,\\\"billBased\\\":{\\\"paymentAmountConfig\\\":\\\"FIXED_AMOUNT\\\",\\\"daysRelativeToDueDate\\\":\\\"DUE_DATE\\\",\\\"fixedAmount\\\":{\\\"amount\\\":\\\"1.00\\\",\\\"currency\\\":\\\"USD\\\"},\\\"payCurrentBill\\\":false,\\\"validFixedAmount\\\":true,\\\"validNonFixedAmount\\\":true,\\\"validPaymentAllowance\\\":true},\\\"holidaySchedulingStrategy\\\":\\\"PAY_EARLY\\\",\\\"notifications\\\":null,\\\"feeAllowance\\\":null,\\\"endingSetting\\\":null,\\\"lastPayment\\\":null,\\\"nextPayment\\\":null,\\\"payeeAccountSummary\\\":null,\\\"payeeAccountLink\\\":null,\\\"payeeAccountId\\\":\\\"169fb8fd-a6bf-4e7f-863d-cc994bce2818\\\",\\\"initialPaymentAmount\\\":null,\\\"ofxToken\\\":null,\\\"paymentDeviceInfo\\\":null}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":null,\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"CREATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### Schedule Updated\n\n\n    {\n\n    \"id\":04578785-904b-498f-840c-add15a366488,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"SCHEDULE\",\n\n        \"resourceUrl\":\"/users/fc4522ad-ceb0-4f92-8aa8-9501a2252f25/schedules/s_7c07ecfc-26ca-4e2d-9474-f4c6c40e4960\",\n\n        \"resource\":\"{\\\"id\\\":\\\"s_7c07ecfc-26ca-4e2d-9474-f4c6c40e4960\\\",\\\"externalId\\\":null,\\\"created\\\":\\\"2021-02-17T21:33:28.177608Z\\\",\\\"updated\\\":\\\"2021-02-17T21:33:28.177608Z\\\",\\\"partnerScheduleId\\\":null,\\\"status\\\":\\\"TERMINATED\\\",\\\"calendarBased\\\":null,\\\"billBased\\\":{\\\"paymentAmountConfig\\\":\\\"FIXED_AMOUNT\\\",\\\"daysRelativeToDueDate\\\":\\\"DUE_DATE\\\",\\\"fixedAmount\\\":{\\\"amount\\\":\\\"1.00\\\",\\\"currency\\\":\\\"USD\\\"},\\\"payCurrentBill\\\":false,\\\"validFixedAmount\\\":true,\\\"validNonFixedAmount\\\":true,\\\"validPaymentAllowance\\\":true},\\\"holidaySchedulingStrategy\\\":\\\"PAY_EARLY\\\",\\\"notifications\\\":null,\\\"feeAllowance\\\":null,\\\"endingSetting\\\":null,\\\"lastPayment\\\":null,\\\"nextPayment\\\":null,\\\"payeeAccountSummary\\\":null,\\\"payeeAccountLink\\\":null,\\\"payeeAccountId\\\":\\\"75154651-cbb0-4a6e-b3bf-330121205d81\\\",\\\"initialPaymentAmount\\\":null,\\\"ofxToken\\\":null,\\\"paymentDeviceInfo\\\":null}\",\n\n        \"previousResource\":\"{\\\"id\\\":\\\"s_7c07ecfc-26ca-4e2d-9474-f4c6c40e4960\\\",\\\"externalId\\\":null,\\\"created\\\":\\\"2021-02-17T21:33:28.177608Z\\\",\\\"updated\\\":\\\"2021-02-17T21:33:28.177608Z\\\",\\\"partnerScheduleId\\\":null,\\\"status\\\":null,\\\"calendarBased\\\":null,\\\"billBased\\\":{\\\"paymentAmountConfig\\\":\\\"FIXED_AMOUNT\\\",\\\"daysRelativeToDueDate\\\":\\\"DUE_DATE\\\",\\\"fixedAmount\\\":{\\\"amount\\\":\\\"1.00\\\",\\\"currency\\\":\\\"USD\\\"},\\\"payCurrentBill\\\":false,\\\"validFixedAmount\\\":true,\\\"validNonFixedAmount\\\":true,\\\"validPaymentAllowance\\\":true},\\\"holidaySchedulingStrategy\\\":\\\"PAY_EARLY\\\",\\\"notifications\\\":null,\\\"feeAllowance\\\":null,\\\"endingSetting\\\":null,\\\"lastPayment\\\":null,\\\"nextPayment\\\":null,\\\"payeeAccountSummary\\\":null,\\\"payeeAccountLink\\\":null,\\\"payeeAccountId\\\":\\\"75154651-cbb0-4a6e-b3bf-330121205d81\\\",\\\"initialPaymentAmount\\\":null,\\\"ofxToken\\\":null,\\\"paymentDeviceInfo\\\":null}\",\n\n        \"apiVersion\":null,\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"UPDATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### Schedule Removed\n\n\n    {\n\n    \"id\":32660d0f-e47f-47e5-8ff7-bbdfb28b22e9,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"SCHEDULE\",\n\n        \"resourceUrl\":null,\n\n        \"resource\":null,\n\n        \"previousResource\":\"{\\\"id\\\":\\\"s_4cdc4e99-fe97-4837-a7ea-2f067db0dea5\\\",\\\"externalId\\\":null,\\\"created\\\":\\\"2021-02-17T21:33:28.180067Z\\\",\\\"updated\\\":\\\"2021-02-17T21:33:28.180067Z\\\",\\\"partnerScheduleId\\\":null,\\\"status\\\":null,\\\"calendarBased\\\":null,\\\"billBased\\\":{\\\"paymentAmountConfig\\\":\\\"FIXED_AMOUNT\\\",\\\"daysRelativeToDueDate\\\":\\\"DUE_DATE\\\",\\\"fixedAmount\\\":{\\\"amount\\\":\\\"1.00\\\",\\\"currency\\\":\\\"USD\\\"},\\\"payCurrentBill\\\":false,\\\"validFixedAmount\\\":true,\\\"validNonFixedAmount\\\":true,\\\"validPaymentAllowance\\\":true},\\\"holidaySchedulingStrategy\\\":\\\"PAY_EARLY\\\",\\\"notifications\\\":null,\\\"feeAllowance\\\":null,\\\"endingSetting\\\":null,\\\"lastPayment\\\":null,\\\"nextPayment\\\":null,\\\"payeeAccountSummary\\\":null,\\\"payeeAccountLink\\\":null,\\\"payeeAccountId\\\":\\\"9ae016da-3e91-457d-a54f-7b744d45e37b\\\",\\\"initialPaymentAmount\\\":null,\\\"ofxToken\\\":null,\\\"paymentDeviceInfo\\\":null}\",\n\n        \"apiVersion\":null,\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"REMOVED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### Bill Created\n\n\n    {\n\n    \"id\":f5a61c25-1ff6-46cd-a978-038b9cc02b37,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"BILL\",\n\n        \"resourceUrl\":\"/users/a854331b-5f81-44f2-b080-d122acfed5f7/bills/6c68bb81-b1da-400d-bd16-c0b75294fd6d\",\n\n        \"resource\":\"{\\\"id\\\":\\\"6c68bb81-b1da-400d-bd16-c0b75294fd6d\\\",\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"lastUpdated\\\":null,\\\"name\\\":null,\\\"nickName\\\":null,\\\"status\\\":null,\\\"extendedStatus\\\":null,\\\"amountDue\\\":{\\\"amount\\\":\\\"94401.06\\\",\\\"currency\\\":\\\"USD\\\"},\\\"minimumDue\\\":{\\\"amount\\\":\\\"18880.21\\\",\\\"currency\\\":\\\"USD\\\"},\\\"pastDue\\\":{\\\"amount\\\":\\\"4720.05\\\",\\\"currency\\\":\\\"USD\\\"},\\\"amountScheduled\\\":null,\\\"invoiceDate\\\":null,\\\"dueDate\\\":\\\"2021-02-27\\\",\\\"scheduledDate\\\":null,\\\"paidDate\\\":null,\\\"paidExternalDate\\\":null,\\\"skippedDate\\\":\\\"2021-03-19\\\",\\\"notice\\\":null,\\\"relatedDocumentIds\\\":null,\\\"payeeAccountLink\\\":null}\",\n\n        \"previousResource\":null,\n\n        \"apiVersion\":null,\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"CREATED\",\n\n        \"userId\":\"fc4522ad-ceb0-4f92-8aa8-9501a2252f25\",\n\n        \"partnerUserId\":\"972ff9fb-e97e-4f5a-aacf-066519ec9fa8\"\n\n      }\n\n    }\n\n\n\n### Bill Updated\n\n\n    {\n\n    \"id\":c1ef2035-2c76-458e-a6ee-cddc917b07e9,\n\n    \"created\":\"2021-02-17T21:33:31.344490Z\",\n\n    \"updated\":2021-02-17T21:33:52.432580Z,\n\n    \"delivered\":null,\n\n    \"deliveryStatus\":\"QUEUED\",\n\n    \"deliveryAttempts\":0,\n\n    \"details\":{\n\n        \"resourceType\":\"BILL\",\n\n        \"resourceUrl\":\"/users/a854331b-5f81-44f2-b080-d122acfed5f7/bills/0e8b8464-d2c1-4710-b872-8d9d3a3c7486\",\n\n        \"resource\":\"{\\\"id\\\":\\\"0e8b8464-d2c1-4710-b872-8d9d3a3c7486\\\",\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"lastUpdated\\\":null,\\\"name\\\":null,\\\"nickName\\\":null,\\\"status\\\":\\\"PAID\\\",\\\"extendedStatus\\\":null,\\\"amountDue\\\":{\\\"amount\\\":\\\"49163.46\\\",\\\"currency\\\":\\\"USD\\\"},\\\"minimumDue\\\":{\\\"amount\\\":\\\"9832.69\\\",\\\"currency\\\":\\\"USD\\\"},\\\"pastDue\\\":{\\\"amount\\\":\\\"2458.17\\\",\\\"currency\\\":\\\"USD\\\"},\\\"amountScheduled\\\":null,\\\"invoiceDate\\\":null,\\\"dueDate\\\":\\\"2021-02-27\\\",\\\"scheduledDate\\\":null,\\\"paidDate\\\":null,\\\"paidExternalDate\\\":null,\\\"skippedDate\\\":\\\"2021-03-19\\\",\\\"notice\\\":null,\\\"relatedDocumentIds\\\":null,\\\"payeeAccountLink\\\":null}\",\n\n        \"previousResource\":\"{\\\"id\\\":\\\"0e8b8464-d2c1-4710-b872-8d9d3a3c7486\\\",\\\"externalId\\\":null,\\\"created\\\":null,\\\"updated\\\":null,\\\"lastUpdated\\\":null,\\\"name\\\":null,\\\"nickName\\\":null,\\\"status\\\":null,\\\"extendedStatus\\\":null,\\\"amountDue\\\":{\\\"amount\\\":\\\"49163.46\\\",\\\"currency\\\":\\\"USD\\\"},\\\"minimumDue\\\":{\\\"amount\\\":\\\"9832.69\\\",\\\"currency\\\":\\\"USD\\\"},\\\"pastDue\\\":{\\\"amount\\\":\\\"2458.17\\\",\\\"currency\\\":\\\"USD\\\"},\\\"amountScheduled\\\":null,\\\"invoiceDate\\\":null,\\\"dueDate\\\":\\\"2021-02-27\\\",\\\"scheduledDate\\\":null,\\\"paidDate\\\":null,\\\"paidExternalDate\\\":null,\\\"skippedDate\\\":\\\"2021-03-19\\\",\\\"notice\\\":null,\\\"relatedDocumentIds\\\":null,\\\"payeeAccountLink\\\":null}\",\n\n        \"apiVersion\":null,\n\n        \"isTest\":\"false\",\n\n        \"operationType\":\"UPDATED\",\n\n        \"userId\":\"a854331b-5f81-44f2-b080-d122acfed5f7\",\n\n        \"partnerUserId\":\"79f726db-4b41-4639-b94d-40b807d69f5a\"\n\n      }\n\n    }\n\n\n"
  }, {
    "name" : "Access Data",
    "description" : "The following set of APIs support recurring payments."
  }, {
    "name" : "Reports",
    "description" : "The following set of APIs return reports on API Access, Payments, and Billers."
  }, {
    "name" : "Changelog",
    "description" : "The following changelog reflects updates to the API over time. All changes are backwards compatible unless otherwise specified.\n## March 2022\n- Added Postal Code validation in UserAddressRequestDto and AddressRequestDto to allows formats: 12345, 123456789, 12345-6789 for US country code.\n- Added RemittanceAccountNumberOrigin accountNumberOrigin to PayeeAccountRemittanceUpdateDto to track the source of the account number.\n## January 2022\n- Added GET `Notifications V2` endpoint in place of the old POST-based endpoint.\n- Added POST `Review Schedule` endpoint.\n## December 2021\n- Added `bankHolidays` to `PaymentConstraints`.\n- Added `VIRTUAL_CARD_CONSENT` documentation for `PaymentConstraints` `ExtendedStatus`.\n- Added `ReviewPaymentRequest` for `/user/{userId}/payments/review.\n  - Replaces `PaymentRequest`\n  - Removes `feeAllowance`\n  - Adds `deliverByDate` to support scheduling payments based on the user selected deliver by date.\n- Updated `PaymentInfoRequest` to require `FundingAccount` or `CustomerFundingAccount`.\n- Reviewed and updated the `SchedulesAPI` documentation as well as the documentation for requests and responses.\n  - Removed `feeAllowance`\n  - Removed `initialPaymentAmount`\n- Added 'EbnAccountNumberMask' and 'EbnAccountNumberMask' list to 'MerchantDto'.\n- Added 'PAYEE_ACCOUNT_HOLDER_NAME' and 'PAYEE_ACCOUNT_PAYER_ADDRESS' to `PaymentConstraints`.\n- Added 'MERCHANT_ID' to `PaymentConstraints`.\n"
  } ],
  "paths" : {
    "/access/{accessId}" : {
      "get" : {
        "tags" : [ "Access Data" ],
        "description" : "Returns data about a particular API call made to the Core APIs",
        "operationId" : "Access Data",
        "parameters" : [ {
          "name" : "accessId",
          "in" : "path",
          "description" : "The identifier of the Access.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Api Access Data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiAccessDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Api Access not found for that ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/access" : {
      "get" : {
        "tags" : [ "Access Data" ],
        "description" : "Returns data about all API calls made to the Core APIs for a particular user on a date",
        "operationId" : "Access Data_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApiAccessRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "List of API Access Data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiAccessPage"
                }
              }
            }
          },
          "404" : {
            "description" : "API Access Data not found for that User ID and Date",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/addressvalidation" : {
      "post" : {
        "tags" : [ "Address Validation" ],
        "description" : "Validates an Address and makes suggestions for verified USPS & International addresses.",
        "operationId" : "Validate Address",
        "requestBody" : {
          "description" : "The information needed to validate the address.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddressValidationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Address suggestions.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddressValidation"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `AddressValidationRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/bills/{billId}" : {
      "get" : {
        "tags" : [ "Bills" ],
        "description" : "Returns the `Bill` for the supplied `userId` and `billId`.",
        "operationId" : "Bill",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "billId",
          "in" : "path",
          "description" : "The identifier of the `Bill`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the requested `Bill`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Bill"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Bills` found for the supplied `userId` and `billId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `billId` was not supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/bills" : {
      "get" : {
        "tags" : [ "Bills" ],
        "description" : "Returns the `Bills` associated with the `User's` `PayeeAccount`.\"",
        "operationId" : "Bills",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "The identifier of the account for the associated `Bills`.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of the `Bills` associated with the `User`'s `PayeeAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillList"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Bills` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `accountId` was not supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customer-consent/terms" : {
      "post" : {
        "tags" : [ "Users" ],
        "description" : "Creates a version of the terms of the specified type that the customer must accept to enable bill payment handling and optional use of virtual cards.",
        "operationId" : "Create customer consent terms",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TermsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully stored the terms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Terms"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customer-consent" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Returns customer consent terms that match the provided query.",
        "operationId" : "Customer Consent Terms",
        "parameters" : [ {
          "name" : "version",
          "in" : "query",
          "description" : "The terms version to return. Use `LATEST` to return the most recent",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "description" : "The terms url to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The terms type to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Indicates the type of the `CustomerConsent`.",
            "enum" : [ "BILLPAY", "VIRTUAL_CARD" ]
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of terms to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of matching terms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerConsentTermsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/customer-consent/terms/{termsId}" : {
      "patch" : {
        "tags" : [ "Users" ],
        "description" : "Updates existing terms and allows existing terms to be marked invalid.",
        "operationId" : "Update customer consent terms",
        "parameters" : [ {
          "name" : "termsId",
          "in" : "path",
          "description" : "The identifier of the `Terms`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TermsUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated the terms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Terms"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/customerfundingaccounts" : {
      "get" : {
        "tags" : [ "Customer Funding Accounts" ],
        "description" : "Returns the list of `CustomerFundingAccount`s for the `User` with the supplied user identifier.",
        "operationId" : "Customer Funding Account List",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `FundingAccount`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`NICKNAME`",
            "enum" : [ "status", "type", "nickname" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "returnEntireCardNumber",
          "in" : "query",
          "description" : "return the entire card number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of `CustomerFundingAccount`s for the `User` with the supplied user identifier.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccountPage"
                }
              }
            }
          },
          "404" : {
            "description" : "The `userId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Customer Funding Accounts" ],
        "description" : "Creates and associates a `CustomerFundingAccount` with the user's `PayeeAccount`.",
        "operationId" : "Add Customer Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create the `CustomerFundingAccount`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerFundingAccountRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Returned if a new `CustomerFundingAccount` is created and added to the db.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccount"
                }
              }
            }
          },
          "200" : {
            "description" : "In the case the request parameters match an existing `CustomerFundingAccount`, the existing `CustomerFundingAccount` will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `CustomerFundingAccount` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/customerfundingaccounts/{accountId}" : {
      "get" : {
        "tags" : [ "Customer Funding Accounts" ],
        "description" : "Returns the `CustomerFundingAccount` for the supplied `userId` and `accountId`.",
        "operationId" : "Customer Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `CustomerFundingAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnEntireCardNumber",
          "in" : "query",
          "description" : "return the entire card number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the `CustomerFundingAccount` for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `CustomerFundingAccount` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Customer Funding Accounts" ],
        "description" : "Indicates that an existing `CustomerFundingAccount` was marked as deleted.",
        "operationId" : "Remove Customer Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `CustomerFundingAccount` to delete.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Indicates the specified `CustomerFundingAccount` has been archived."
          },
          "404" : {
            "description" : "The `CustomerFundingAccount` was not found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `accountId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Customer Funding Accounts" ],
        "description" : "Updates the `CustomerFundingAccount` for the supplied `userId` and `accountId` and returns the updated `CustomerFundingAccount`.",
        "operationId" : "Update Customer Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `CustomerFundingAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomerFundingAccountUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updates the `CustomerFundingAccount` for the supplied `userId` and `accountId` and returns the updated `CustomerFundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `CustomerFundingAccount` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/customerfundingaccounts/{accountId}/addpartnerid/{partnerId}" : {
      "patch" : {
        "tags" : [ "Customer Funding Accounts" ],
        "description" : "Sets the `partnerId` of the `CustomerFundingAccount` matching the supplied `userId` and `accountId`. NOTE: the `partnerId` is idempotent and cannot be changed once set. This operation will return an error if the `CustomerFundingAccount` already has a `partnerId` that does not match the supplied one.",
        "operationId" : "Add Partner Id",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `CustomerFundingAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "partnerId",
          "in" : "path",
          "description" : "The `partnerId` to be set.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the updated `CustomerFundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccount"
                }
              }
            }
          },
          "208" : {
            "description" : "The `partnerId` of the `CustomerFundingAccount` has already been set and matches the provided `partnerId`. Returns the `CustomerFundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomerFundingAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "The `partnerId` of the `CustomerFundingAccount` has already been set and does not match the provided `partnerId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "No `CustomerFundingAccount` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/documents/{documentId}" : {
      "get" : {
        "tags" : [ "Documents" ],
        "description" : "Returns the `Document` for the supplied `userId` and `documentId`.",
        "operationId" : "Document",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentId",
          "in" : "path",
          "description" : "The identifier of the `Document`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the requested `Document`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Document"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Document` found for the supplied `userId` and `documentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/documents/{documentId}/download" : {
      "get" : {
        "tags" : [ "Documents" ],
        "description" : "Download the `Document`.",
        "operationId" : "Download Document",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "documentId",
          "in" : "path",
          "description" : "The identifier of the `Document`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `Document`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentLink"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Document` found for the supplied `documentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/documents" : {
      "get" : {
        "tags" : [ "Documents" ],
        "description" : "Returns the `Documents` associated with the `User's` `PayeeAccount`.",
        "operationId" : "Documents",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "The identifier of the `PayeeAccount`.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of requested `Documents`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentList"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Documents` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `accountId` was not supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/fundingaccounts" : {
      "get" : {
        "tags" : [ "Funding Accounts" ],
        "description" : "Returns the list of `FundingAccounts` for the `User` with the supplied user identifier.",
        "operationId" : "Funding Accounts",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `FundingAccount`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`NICKNAME`",
            "enum" : [ "status", "type", "nickname" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "returnEntireBankAccountNumber",
          "in" : "query",
          "description" : "Return the entire bank account number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "returnEntireExternalBankAccountNumber",
          "in" : "query",
          "description" : "Return the entire external bank account number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of the `User`'s `FundingAccounts`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccountPage"
                }
              }
            }
          },
          "404" : {
            "description" : "The `userId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Funding Accounts" ],
        "description" : "Creates and associates a `FundingAccount` with the user's `PayeeAccount`.",
        "operationId" : "Add Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create the `FundingAccount`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FundingAccountRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Returned if a new `FundingAccount` is created and added to the db.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccount"
                }
              }
            }
          },
          "200" : {
            "description" : "In the case the request parameters match an existing `FundingAccount`, the existing `FundingAccount` will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `FundingAccountRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/fundingaccounts/{fundingAccountId}" : {
      "get" : {
        "tags" : [ "Funding Accounts" ],
        "description" : "Returns the `FundingAccount` for the supplied `userId` and `fundingAccountId`.",
        "operationId" : "Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "path",
          "description" : "The identifier of the `FundingAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnEntireBankAccountNumber",
          "in" : "query",
          "description" : "Return the entire bank account number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "returnEntireExternalBankAccountNumber",
          "in" : "query",
          "description" : "Return the entire external bank account number.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the requested `FundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `FundingAccount` found for the supplied `userId` and `fundingAccountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Funding Accounts" ],
        "description" : "Indicates that an existing `FundingAccount` was marked as deleted and replaces all usages of the deleted ` FundingAccount` with the replacement `FundingAccount`.",
        "operationId" : "Remove Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "path",
          "description" : "The identifier of the `FundingAccount` to delete.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replacementFundingAccountId",
          "in" : "query",
          "description" : "The identifier of the `FundingAccount` to set all pending `Payments` and `RecurringSchedules` to.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Indicates the specified `FundingAccount` has been removed. If specified `FundingAccount` is a default `FundingAccount` the replacement `FundingAccount` is now designated as the default `FundingAccount`."
          },
          "404" : {
            "description" : "`User` or replacement `FundingAccount` was not found for the supplied `userId` or `replacementFundingAccountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `fundingAccountId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `replacementFundingAccountId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Funding Accounts" ],
        "description" : "Updates the `FundingAccount` for the supplied `userId` and `fundingAccountId` and returns the updated `FundingAccount`.",
        "operationId" : "Update Funding Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "path",
          "description" : "The identifier of the `FundingAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FundingAccountUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Details of the updated `FundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `FundingAccount` found for the supplied `userId` and `fundingAccountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/fundingaccounts/{fundingAccountId}/addpartnerid/{partnerId}" : {
      "patch" : {
        "tags" : [ "Funding Accounts" ],
        "description" : "Sets the `partnerId` of the `FundingAccount` matching the supplied `userId` and `fundingAccountId`. NOTE: the `partnerId` is idempotent and cannot be changed once set. This operation will return an error if the `FundingAccount` already has a `partnerId` that does not match the supplied one.",
        "operationId" : "Add Partner Id ",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "path",
          "description" : "The identifier of the `FundingAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "partnerId",
          "in" : "path",
          "description" : "The `partnerId` to be set.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the updated `FundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccount"
                }
              }
            }
          },
          "208" : {
            "description" : "The `partnerId` of the `FundingAccount` has already been set and matches the provided `partnerId`. Returns the `FundingAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FundingAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "The `partnerId` of the `FundingAccount` has already been set and does not match the provided `partnerId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "No `FundingAccount` found for the supplied `userId` and `fundingAccountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories" : {
      "get" : {
        "tags" : [ "Merchant Directory" ],
        "description" : "Get the list of `Merchant` categories.",
        "operationId" : "Categories",
        "responses" : {
          "200" : {
            "description" : "List of `Merchant` categories",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MerchantCategories"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/{merchantId}" : {
      "get" : {
        "tags" : [ "Merchant Directory" ],
        "description" : "Get a `Merchant`.",
        "operationId" : "Merchant",
        "parameters" : [ {
          "name" : "merchantId",
          "in" : "path",
          "description" : "The `Merchant` identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `Merchant`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Merchant"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing or blank merchantId was supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "`Merchant` was not found for the supplied merchantId.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{category}/logo" : {
      "get" : {
        "tags" : [ "Merchant Directory" ],
        "description" : "Get the logo for a merchant category.",
        "operationId" : "Category Logo",
        "parameters" : [ {
          "name" : "category",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "The category that is used to classify a `Merchant` or `PayeeAccount` in the BillGO network.",
            "example" : "CABLE",
            "enum" : [ "AUTOLOAN", "BANK", "CABLE", "CLUB", "COLLECTIONS", "CREDIT", "ELECTRIC", "GAS", "GIFT", "HOME", "INSURANCE", "INTERNET", "LICENSE", "LOAN", "MEDIA", "MEDICAL", "MORTGAGE", "PARKING", "PHONE", "PREPAID", "RENT", "SECURITY", "STORAGE", "STUDENTLOAN", "UTILITY", "WASTE", "WATER", "OTHER" ]
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "description" : "The category image type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Category Logo associated with a Merchant category",
            "example" : "ICON",
            "enum" : [ "DEFAULT", "ICON" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Logo for the requested merchant category.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid category supplied.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Category logo not found for the supplied category.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/{merchantId}/logo" : {
      "get" : {
        "tags" : [ "Merchant Directory" ],
        "description" : "Retrieves a merchant logo. For valid merchant IDs, this will return a 32-bit PNG in the dimensions of 102 pixels wide by 64 pixels tall. Even for merchants that do not have an associated logo available, a generic biller category image is returned.\n\nLogos can be cached indefinitely, however, it is possible for them to change over time. In practice, a new logo should be fetched whenever the `updated` property of a `Merchant` changes.\n\nRather than return a JSON payload containing an encoded version of the logo, this API returns the image as content type `image/png`.\n\nIf a query string is provided in the URL, with query parameter `imageType` with value `accent`, this API returns a larger accent 32-bit PNG with a transparent background. This accent logo should only be used on top of a canvas colored with the value found in the `PrimaryColor` property of the merchant style. The maximum dimensions of this logo are 300 pixels wide by 150 pixels tall. This accent logo should always be centered both horizontally and vertically within a 300 pixel by 150 pixel canvas. Showing this larger accent logo on top of the `PrimaryColor` background is useful on a full-screen overlay in certain scenarios where the user's attention is required, like adding a new biller. Only the top 250 billers have an accent logo configured. You may also provide 'accentOnWhite' and 'icon' as values for imageType.",
        "operationId" : "Logo",
        "parameters" : [ {
          "name" : "merchantId",
          "in" : "path",
          "description" : "The `Merchant` identifier.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "default" : "DEFAULT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist. Defaults true.",
            "default" : true
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Resizes the image width to the requested width if the requested width is smaller than the original image size.",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Resizes the image height to the requested height if the requested height is smaller  than the original image size.",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Resizes to match the images original aspect ratio if it does not match the bound dimension aspect ratio requested. Defaults to true. If set to false, the image may stretch to match both bounds. If set to true, the image may resize a dimension smaller than the requested bound",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The `Merchant`s logo.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid merchantId or logo imageType.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "Merchant logo not found for supplied merchantId and logo imageType.",
            "content" : {
              "image/png" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/suggestions" : {
      "get" : {
        "tags" : [ "Merchant Directory" ],
        "description" : "Get `MerchantSuggestions` for a user.",
        "operationId" : "Merchant Suggestions",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "description" : "The identifier of the user to customize these results for.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "u_c1388fc6f2e64306bf937c0c5b0761b6"
        }, {
          "name" : "merchantCategory",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The category that is used to classify a `Merchant` or `PayeeAccount` in the BillGO network.",
            "example" : "CABLE",
            "enum" : [ "AUTOLOAN", "BANK", "CABLE", "CLUB", "COLLECTIONS", "CREDIT", "ELECTRIC", "GAS", "GIFT", "HOME", "INSURANCE", "INTERNET", "LICENSE", "LOAN", "MEDIA", "MEDICAL", "MORTGAGE", "PARKING", "PHONE", "PREPAID", "RENT", "SECURITY", "STORAGE", "STUDENTLOAN", "UTILITY", "WASTE", "WATER", "OTHER" ]
          }
        }, {
          "name" : "zipCode",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The zipcode of the region to suggest merchants for.",
            "example" : "[0-9]{5}"
          }
        }, {
          "name" : "minimumConfidenceScore",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1,
            "minimum" : 0,
            "type" : "number",
            "description" : "The required minimum confidence score the of the merchants returned. (0.01-1.00)",
            "format" : "double",
            "example" : 0.8
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 30,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `Merchant` suggestions to return.",
            "format" : "int32",
            "example" : 30,
            "default" : 30
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of `MerchantSuggestion`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MerchantSuggestions"
                }
              }
            }
          },
          "400" : {
            "description" : "One or more invalid query parameters were supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/merchants" : {
      "get" : {
        "tags" : [ "Merchant Directory" ],
        "description" : "Get the list of `MerchantSuggestions` matching the queryPrefix.",
        "operationId" : "Search",
        "parameters" : [ {
          "name" : "queryPrefix",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 30,
            "minLength" : 1,
            "type" : "string",
            "description" : "The prefix search string.",
            "example" : "Com"
          }
        }, {
          "name" : "zipCode",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The optional zip code to filter on.",
            "example" : "12345"
          }
        }, {
          "name" : "accountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The optional account number to filter on.",
            "example" : "0106005607"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 30,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `Merchant` suggestions to return.",
            "format" : "int32",
            "example" : 30,
            "default" : 30
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of `MerchantSuggestion`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MerchantSuggestions"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid offset, limit, or queryPrefix supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/notifications/{notificationId}" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "description" : "Returns the `UserNotification` for the supplied `userId` and `notificationId`.",
        "operationId" : "Notification",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "notificationId",
          "in" : "path",
          "description" : "The identifier of the `UserNotification`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `Notification`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserNotification"
                }
              }
            }
          },
          "404" : {
            "description" : "No `UserNotification` found for the supplied `userId` and `notificationId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Notifications" ],
        "description" : "Updates the state of the `UserNotification` using the `UpdateUserNotifications` parameter for the supplied `userId` and `notificationId`.",
        "operationId" : "Update Notification",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "notificationId",
          "in" : "path",
          "description" : "The identifier of the `UserNotification`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update the `UserNotification`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateUserNotifications"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `Notification`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserNotification"
                }
              }
            }
          },
          "404" : {
            "description" : "No `UserNotification` was found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `UpdateUserNotifications` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/notifications" : {
      "get" : {
        "tags" : [ "Notifications" ],
        "description" : "Retrieves a list of `UserNotifications` for the `User` with the supplied `userId`.",
        "operationId" : "Get Notifications V2",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The `offset` for pagination.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of `UserNotifications` to return.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The order of `UserNotifications` to return, sorted by creation date.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "DESC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "seen",
          "in" : "query",
          "description" : "Return only the `seen` notifications.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "read",
          "in" : "query",
          "description" : "Return only the `read` notifications.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "dismissed",
          "in" : "query",
          "description" : "Return only the `dismissed` notifications.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of `Notifications`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationList"
                }
              }
            }
          },
          "404" : {
            "description" : "No `UserNotifications` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `offset`, `limit`, or `filter` were not supplied or were invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Notifications" ],
        "description" : "Retrieves a list of `UserNotifications` for the `User` with the supplied `userId`.",
        "operationId" : "Get Notifications",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The `offset` for pagination.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of `UserNotifications` to return.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The order of `UserNotifications` to return, sorted by creation date.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "DESC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Filter `UserNotifications` with the supplied `UserNotificationsFilter`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserNotificationsFilter"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of `Notifications`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationList"
                }
              }
            }
          },
          "404" : {
            "description" : "No `UserNotifications` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `offset`, `limit`, or `filter` were not supplied or were invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "deprecated" : true
      },
      "patch" : {
        "tags" : [ "Notifications" ],
        "description" : "Updates the state of all `UserNotifications` associated with the `User` using the supplied `UpdateUserNotifications` parameter.",
        "operationId" : "Update All Notifications",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update all `UserNotifications` associated with the `User`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateUserNotifications"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `Notifications`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateResult"
                }
              }
            }
          },
          "404" : {
            "description" : "No `UserNotifications` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `UpdateUserNotifications` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/notifications/bulk" : {
      "patch" : {
        "tags" : [ "Notifications" ],
        "description" : "Updates a set of notifications.",
        "operationId" : "Update Notification Set",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update a set of `UserNotifications` associated with the `User`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateUserNotificationSet"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `Notifications`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationList"
                }
              }
            }
          },
          "404" : {
            "description" : "No `UserNotifications` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `UpdateUserNotificationSet` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payeeaccounts" : {
      "get" : {
        "tags" : [ "Payee Accounts" ],
        "description" : "Returns the list of `Accounts` for the `User` with the supplied `userId`.",
        "operationId" : "Payee Accounts",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `PayeeAccount`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "hidden",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Optional filtering on hidden `PayeeAccount`s",
            "example" : false,
            "default" : false
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "description" : "Optional status of the `PayeeAccounts` to filter on.",
            "example" : "`PENDING`",
            "items" : {
              "type" : "string",
              "description" : "When a `Payee` is successfully linked, a `PayeeAccount` is created for each account associated with the linked `Payee`. Before the user supplies the required payment details for a `PayeeAccount`, the `PayeeAccount` status is `PENDING`.  After the user supplies the required payment details for a `PayeeAccount`, the `PayeeAccount's` status is `ACTIVE`. `PayeeAccounts` with a status of `ARCHIVED` should  not be presented to the user.",
              "example" : "ACTIVE",
              "enum" : [ "PENDING", "ACTIVE", "ARCHIVED" ]
            }
          }
        }, {
          "name" : "billStatus",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional bill status of the `PayeeAccounts` to filter on.",
            "example" : "`UNPAID`",
            "enum" : [ "UNPAID", "SERVICE_SCHEDULED", "SERVICE_AUTOMATIC", "SCHEDULED", "EMPTY", "PAID", "PAID_EXTERNAL", "SKIPPED", "NONE", "ARCHIVED" ]
          }
        }, {
          "name" : "payeeId",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The optional identifier of the `Payee` to search for accounts."
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional start date to filter the `PayeeAccounts`.",
            "example" : "2020-10-01"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional end date to filter the `PayeeAccounts`.",
            "example" : "2020-10-01"
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`NAME`",
            "enum" : [ "name", "status", "established", "accountNumber" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "searchField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to search on",
            "example" : "`NAME`",
            "enum" : [ "name", "status", "established", "accountNumber" ]
          }
        }, {
          "name" : "searchValue",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Optional value to search for if `searchField` is present",
            "example" : "`jane`"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of `PayeeAccounts`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeeAccountPage"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Accounts` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payee Accounts" ],
        "description" : "Creates and associates a `PayeeAccount` with the `User's` `Payee`.",
        "operationId" : "Add Payee Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create the `PayeeAccount`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayeeAccountRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Returned if a new `PayeeAccount` is created and added to the db.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeeAccount"
                }
              }
            }
          },
          "200" : {
            "description" : "In the case the request parameters match an existing payeeAccount, the existing payeeAccount will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeeAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `AccountRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payeeaccounts/{accountId}" : {
      "get" : {
        "tags" : [ "Payee Accounts" ],
        "description" : "Returns the `PayeeAccount` for the supplied `userId` and `accountId`.",
        "operationId" : "Payee Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `PayeeAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `PayeeAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeeAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `PayeeAccount` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payee Accounts" ],
        "description" : "Removes a `PayeeAccount`.",
        "operationId" : "Remove Payee Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `PayeeAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deleted `PayeeAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeeAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `PayeeAccount` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `accountId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Payee Accounts" ],
        "description" : "Updates the information for the existing `PayeeAccount`.",
        "operationId" : "Update Payee Account",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "The identifier of the `PayeeAccount`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update the associated `PayeeAccount`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayeeAccountUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `PayeeAccount`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeeAccount"
                }
              }
            }
          },
          "404" : {
            "description" : "No `PayeeAccount` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `accountId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `AccountRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payeeaccounts/sync/{ofxToken}" : {
      "get" : {
        "tags" : [ "Payee Accounts" ],
        "description" : "Returns the payee accounts for the supplied `userId`, `accountId`, and `ofxToken`.",
        "operationId" : "OFX Payee Account Synchronization",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ofxToken",
          "in" : "path",
          "description" : "The ofx token with which to synchronize.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tokenOnly",
          "in" : "query",
          "description" : "Return the value for the specified token only.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "tokenValue",
          "in" : "query",
          "description" : "Return the values for the specified token and all changes that occurred since the time for that token.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "refresh",
          "in" : "query",
          "description" : "Return the current state of the resource.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested payee accounts synchronization.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payee_accounts_ofx_sync"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payee_accounts_ofx_sync"
                }
              }
            }
          },
          "404" : {
            "description" : "No payee accounts synchronization found for the supplied `userId`, `accountId`, and `ofxToken`.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `accountId` was not supplied.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payees" : {
      "get" : {
        "tags" : [ "Payees" ],
        "description" : "Returns the list of `Payee`s for the supplied `userId`.",
        "operationId" : "Payees",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `Payee`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`NAME`",
            "enum" : [ "name" ]
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "description" : "Optional status of the `Payee` to filter on.",
            "example" : "`ACTIVE`",
            "items" : {
              "type" : "string",
              "description" : "Represents the status of the `Payee`. `ACTIVE` is a `Payee` in good standing. `PENDING` payees are in the process of being set up. `ARCHIVED` payees should not be shown to the user.",
              "example" : "ARCHIVED",
              "enum" : [ "ACTIVE", "ARCHIVED" ]
            }
          }
        }, {
          "name" : "linkStatuses",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "description" : "Optional link status of the `Payee` to filter on.",
            "example" : "`LINKING`",
            "items" : {
              "type" : "string",
              "description" : "Indicates the linking status of the `Payee`. `LINKABLE` indicates the `Payee` can be linked, but there is currently no attempt to link the `Payee`. `NOT_LINKABLE` indicates the `Payee` does not support linking. `LINKED` indicates the `Payee` has been linked. Other statuses are indicators of the status of an in progress link attempt. Please see the documentation on linking `Payee`s for further information.",
              "example" : "DATUMS_VALID",
              "enum" : [ "LINKING", "LINKING_DATUMS_VERIFIED", "DATUMS_INVALID", "DATUMS_MISSING", "LOCKED", "CLOSED", "LINKED", "OUTAGE", "PENDING", "DATUMS_VALID", "LINKABLE", "NOT_LINKABLE", "DEPRECATED", "NONE" ]
            }
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "searchField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to search on",
            "example" : "`NAME`",
            "enum" : [ "name" ]
          }
        }, {
          "name" : "searchValue",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Optional value to search for if `searchField` is present",
            "example" : "`jane`"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The `depth` of the response objects to be returned. A `depth` of `1` will only return the top level `Payee` objects without Payee account data",
            "example" : "`1`",
            "deprecated" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of `Payee`s.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PayeePage"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid `offset` or `limit` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payees` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payees" ],
        "description" : "Creates and associates a `Payee` with the `User`.",
        "operationId" : "Add Payee",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create and associate the `Payee` with the `User`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayeeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Returned if a new `Payee` is created and added to the db.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payee"
                }
              }
            }
          },
          "200" : {
            "description" : "In the case the request parameters match an existing payee, the existing payee will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payee"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `PayeeRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payees/{payeeId}" : {
      "get" : {
        "tags" : [ "Payees" ],
        "description" : "Returns the `Payee` for supplied `payeeId` and `userId`.",
        "operationId" : "Payee",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeId",
          "in" : "path",
          "description" : "The identifier of the `Payee`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `Payee`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payee"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payee` found for the supplied `userId` and `payeeId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payees" ],
        "description" : "Set's the `Payee` status to `ARCHIVED`, archived payees should not be displayed.",
        "operationId" : "Remove Payee",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeId",
          "in" : "path",
          "description" : "The identifier of the `Payee`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deleted `Payee`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payee"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payee` found for the supplied `userId` and `payeeId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Payees" ],
        "description" : "Updates the information for the existing `Payee`.",
        "operationId" : "Update Payee",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeId",
          "in" : "path",
          "description" : "The identifier of the `Payee`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update the associated `Payee`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PayeeUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `Payee`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payee"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payee` found for the supplied `userId` and `payeeId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `payeeId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `PayeeRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payees/{payeeId}/link" : {
      "post" : {
        "tags" : [ "Payees" ],
        "description" : "Manually trigger a new link attempt for a `Payee`. Useful if the `Payee` is in a locked stated and a new `linkingDatum` is required.",
        "operationId" : "Link Payee",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "payeeId",
          "in" : "path",
          "description" : "The identifier of the `Payee`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The updated `Payee`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payee"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payee` found for the supplied `userId` and `payeeId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `payeeId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payments" : {
      "get" : {
        "tags" : [ "Payments" ],
        "description" : "Returns a list of `Payments` for the the supplied `userId` and `accountId`. Use `?completed=true` to include historical payments.",
        "operationId" : "Payments",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Optional offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Optional maximum number of `Payment`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 100
          }
        }, {
          "name" : "statuses",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "description" : "Optional status of the `Payments` to return.",
            "example" : "`PENDING`",
            "items" : {
              "type" : "string",
              "description" : "Indicates the current status of the `Payment`.",
              "example" : "PROCESSING",
              "enum" : [ "PENDING", "PENDING_DEBITED", "CANCELLED", "FAILURE", "INFORMATION_NEEDED", "PROCESSING", "SUBMITTED", "SUCCESS", "SUCCESS_RETURN", "SUCCESS_PARTIAL_RETURN" ]
            }
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional start date used to filter the `Payments`.",
            "example" : "2020-10-01"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional end date used to filter the `Payments`.",
            "example" : "2020-10-01"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional identifier of the `PayeeAccount` to search for payments."
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional identifier of the `FundingAccount` to search for payments."
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Fields that can be searched or use to sort searches for `Payment`s.",
            "example" : "`SEND_ON_DATE`",
            "enum" : [ "NAME", "STATUS", "PAYMENT_AMOUNT", "ORIGINATION_TYPE", "SEND_ON_DATE", "DELIVER_BY_DATE", "CREATED" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present.",
            "example" : "`ASC` or `DESC`",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "searchValue",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Optional payee name, confirmation number, or amount to search for.",
            "example" : "`Comcast`"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of `Payment`s.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentPage"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid `offset` or `limit` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payments` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Payments" ],
        "description" : "Creates and associates a `Payment` with the `User's` `PayeeAccount`.",
        "operationId" : "Make Payment",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create the `Payment`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The new `Payment`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payment"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `PaymentRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payments/{paymentId}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "description" : "Returns the `Payment` for the supplied `userId` and `paymentId`.",
        "operationId" : "Payment",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The identifier of the `Payment`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "returnAllPaymentResults",
          "in" : "query",
          "description" : "If true, returns all payment results in the paymentResults set. If false, only returns the latest payment result in paymentResult object",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `Payment`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payment"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payment` was found for the supplied `userId` and `paymentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Payments" ],
        "description" : "Indicates that an existing `Payment` was marked as cancelled.",
        "operationId" : "Cancel Payment",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The identifier of the `Payment` to cancel.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the specified `Payment` has been cancelled.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payment"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payment` was found for the supplied `userId` and `paymentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `Payment` is currently being processed and cannot be cancelled.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Payments" ],
        "description" : "Updates the `Payment` with the provided payload.",
        "operationId" : "Update Payment",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The identifier of the `Payment`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update the associated `Payment`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `Payment`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Payment"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payment` was found for the supplied `userId` and `paymentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `paymentId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `PaymentUpdate` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `Payment` is currently being processed and cannot be cancelled.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payments/constraints" : {
      "get" : {
        "tags" : [ "Payments" ],
        "description" : "Returns the `PaymentConstraints` for the supplied `userId` and `accountId`.",
        "operationId" : "Payment Constraints",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The identifier of the `PayeeAccount` for the payment constraints."
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Optional flag to request only the best available payment constraint.",
            "example" : true
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `PaymentConstraint`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentConstraints"
                }
              }
            }
          },
          "404" : {
            "description" : "No `PaymentConstraints` found for the supplied `userId` and `accountId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `accountId` was not supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payments/sync/{fundingAccountId}/{ofxToken}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "description" : "Returns the payments for the supplied `userId`, `fundingAccountId`, and `ofxToken`.",
        "operationId" : "OFX Payment Synchronization",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "path",
          "description" : "The identifier of the `Funding Account`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ofxToken",
          "in" : "path",
          "description" : "The ofx token with which to synchronize.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tokenOnly",
          "in" : "query",
          "description" : "Return the value for the specified token only.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "tokenValue",
          "in" : "query",
          "description" : "Return the values for the specified token and all changes that occurred since the time for that token.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "refresh",
          "in" : "query",
          "description" : "Return the current state of the resource.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested payments synchronization.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payments_ofx_sync"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/payments_ofx_sync"
                }
              }
            }
          },
          "404" : {
            "description" : "No payments synchronization found for the supplied `userId` and `ofxToken`.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `fundingAccountId` was not supplied.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payments/review" : {
      "post" : {
        "tags" : [ "Payments" ],
        "description" : "Review information about the `Payment` like delivery date prior to creating the `Payment`.",
        "operationId" : "Review Payment",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to review the `Payment`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewPaymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The reviewed `Payment`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentReview"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/auditLog" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Audit Log report",
        "operationId" : "Audit Log",
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "description" : "The identifier of the user associated with the audit Log report",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "(^$|[0-9a-zA-Z_@\\.-]+)",
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "adminUser",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "(^$|[0-9a-zA-Z_@\\.-]+)",
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Audit Log",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogReport"
                }
              }
            }
          },
          "404" : {
            "description" : "Audit Log report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/billpaysummary" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Bill Pay Summary report",
        "operationId" : "Bill Pay Summary",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bill Pay Summary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BillPaySummaryReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Bill Pay Summary report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/paymentdetail" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Payment Detail report",
        "operationId" : "Payment Detail",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment Detail",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentDetailReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Payment Detail report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/paymentrejects" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Payment Rejects report",
        "operationId" : "Payment Rejects",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment Rejects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentRejectsReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Payment Rejects report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/paymentstatus" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Payment Status Report",
        "operationId" : "Payment status",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `Payment`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        }, {
          "name" : "sendOnDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The status, inclusive, of the report to run.",
            "example" : "`FAILURE`"
          }
        }, {
          "name" : "columns",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The columns inclusive, of the report to run."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment Status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentStatusReportDto"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentStatusReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Payment status report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentStatusReportDto"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentStatusReportDto"
                }
              }
            }
          }
        }
      }
    },
    "/reports/paymentsummary" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Payment Summary Report",
        "operationId" : "Payment summary",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `Payment`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        }, {
          "name" : "sendOnDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The status, inclusive, of the report to run.",
            "example" : "`FAILURE`"
          }
        }, {
          "name" : "columns",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The columns inclusive, of the report to run."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment Summary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentStatusSummaryReportDto"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentStatusSummaryReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Payment summary report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/canceledpayments" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Payments Canceled report",
        "operationId" : "Payments Canceled",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payments Canceled",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentsCanceledReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Payments Canceled report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/returns" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns the 'Returns Report'",
        "operationId" : "Returns",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReturnsReportDto"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReturnsReportDto"
                }
              }
            }
          },
          "404" : {
            "description" : "Returns report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/top20billers" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Top Billers  report",
        "operationId" : "Top Billers",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Top Billers",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopBillersReport"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopBillersReport"
                }
              }
            }
          },
          "404" : {
            "description" : "Top Billers report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/topbillersusagedetail" : {
      "get" : {
        "tags" : [ "Reports" ],
        "description" : "Returns Top Biller Usage Detail report",
        "operationId" : "Top Biller Usage Detail",
        "parameters" : [ {
          "name" : "merchantId",
          "in" : "query",
          "description" : "The identifier of the biller associated with the payee account",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "pattern" : "^[A-Za-z0-9_]+$",
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional field to sort on",
            "example" : "`transactionDate`",
            "enum" : [ "aggregatePaymentAmount", "creationDate", "transactionDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/LocalDateParam"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The desired format of the response.",
            "example" : "`CSV`",
            "default" : "DEFAULT",
            "enum" : [ "CSV", "DEFAULT" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Top Biller Usage Detail",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopBillerUsageDetailReport"
                }
              }
            }
          },
          "404" : {
            "description" : "Top Biller Usage Detail report was not successfully retrieved",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/schedules" : {
      "get" : {
        "tags" : [ "Schedules" ],
        "description" : "Returns the `RecurringSchedules` for the provided `userId`.",
        "operationId" : "Schedules",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `RecurringSchedules`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringScheduleList"
                }
              }
            }
          },
          "404" : {
            "description" : "No `RecurringSchedules` found for the provided `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Schedules" ],
        "description" : "Creates and associates a `RecurringSchedule` with a `User's` `PayeeAccount`.",
        "operationId" : "Add Schedule",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create the `RecurringSchedule` and associate it with the `User's` `PayeeAccount`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringScheduleRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The new `RecurringSchedule`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringSchedule"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `RecurringScheduleRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/schedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "Schedules" ],
        "description" : "Returns the `RecurringSchedule` for the supplied `userId` and `scheduleId`.",
        "operationId" : "Schedule",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "The identifier of the `RecurringSchedule`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `RecurringSchedule`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringSchedule"
                }
              }
            }
          },
          "404" : {
            "description" : "No `RecurringSchedule` found for the supplied `userId` and `scheduleId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `scheduleId` was not present in the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Schedules" ],
        "description" : "Removes the `RecurringSchedule` for recurring payments. This cancels any `PENDING` payments associated with the removed `RecurringSchedule`.",
        "operationId" : "Remove Schedule",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "The identifier of the `RecurringSchedule`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deleted `RecurringSchedule`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringSchedule"
                }
              }
            }
          },
          "404" : {
            "description" : "No `RecurringSchedule` found for the supplied `userId` and `scheduleId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Schedules" ],
        "description" : "Updates the `RecurringSchedule`.",
        "operationId" : "Update Recurring Schedule",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "The identifier of the `RecurringSchedule`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringScheduleUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated `Notification`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringSchedule"
                }
              }
            }
          },
          "404" : {
            "description" : "No `RecurringSchedule` found for the provided `userId` and `scheduleId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The requested updates are invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `RecurringScheduleUpdate` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/schedules/sync/{fundingAccountId}/{ofxToken}" : {
      "get" : {
        "tags" : [ "Schedules" ],
        "description" : "Returns the payments for the supplied `userId`, `fundingAccountId`, and `ofxToken`.",
        "operationId" : "OFX Recurring Payments Schedules Synchronization",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fundingAccountId",
          "in" : "path",
          "description" : "The identifier of the `Funding Account`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ofxToken",
          "in" : "path",
          "description" : "The ofx token with which to synchronize.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tokenOnly",
          "in" : "query",
          "description" : "Return the value for the specified token only.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "tokenValue",
          "in" : "query",
          "description" : "Return the values for the specified token and all changes that occurred since the time for that token.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "refresh",
          "in" : "query",
          "description" : "Return the current state of the resource.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested payments schedules synchronization.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/recurring_schedules_ofx_sync"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/recurring_schedules_ofx_sync"
                }
              }
            }
          },
          "404" : {
            "description" : "No payments schedules synchronization found for the supplied `userId` and `ofxToken`.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "400" : {
            "description" : "The `fundingAccountId` was not supplied.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/schedules/review" : {
      "post" : {
        "tags" : [ "Schedules" ],
        "description" : "Reviews a `RecurringScheduleRequest` before the `RecurringScheduleRequest` is submitted to the system using the `Add Schedule` request.",
        "operationId" : "Review Schedule",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The `RecurringScheduleRequest` to review.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecurringScheduleRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns a `RecurringScheduleReview`, if the `RecurringScheduleRequest` was valid. If the `RecurringSchedule` is a calendar based `RecurringScheduleRequest` the `RecurringScheduleReview` response will contain the first or `nextPayment` as well as a limited set of future `paymentDates`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecurringScheduleReview"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `RecurringScheduleRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Returns `Users` associated with a partner account.",
        "operationId" : "Users",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 1000,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `User`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Indicates the status of the `User`.",
            "example" : "`LOCKED`",
            "enum" : [ "ACTIVE", "LOCKED", "ARCHIVED", "DORMANT" ]
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Fields that can be searched or use to sort searches for `User`s.",
            "example" : "`created`",
            "enum" : [ "NAME", "BUSINESS_NAME", "DOB", "EMAIL", "PHONE", "TAX_ID", "ID", "PARTNER_USER_ID", "CREATED" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Optional sort direction if `sortField` is present",
            "example" : "ASC",
            "default" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        }, {
          "name" : "searchField",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "Fields that can be searched or use to sort searches for `User`s.",
            "example" : "`name`",
            "enum" : [ "NAME", "BUSINESS_NAME", "DOB", "EMAIL", "PHONE", "TAX_ID", "ID", "PARTNER_USER_ID", "CREATED" ]
          }
        }, {
          "name" : "searchValue",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Optional value to search for if `searchField` is present",
            "example" : "`jane`"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "description" : "The `depth` of the response objects to be returned. A `depth` of `1` will only return the top level `User` objects without Payee data",
            "format" : "int32",
            "deprecated" : true,
            "default" : 1
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "`Users` up to the supplied `limit` that matched the supplied `status` are returned. If there are more `Users` than the specified `limit`, the `offset` can be adjusted to return the additional `Users`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPage"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid `offset`, `limit`, or `status` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "description" : "Adds a `User` associated with a partner.",
        "operationId" : "Add User",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the added `User` with the `Users` `status` set to `ACTIVE`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `UserRequest` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Returns the `User` associated with the provided `userId`. The supplied `userId` can be either the application's `userId` or the partner's `partnerUserId`.",
        "operationId" : "User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` to retrieve.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string"
          }
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "The `depth` of the response object to be returned. The default `depth` of `1` or `0` returns the top level `User` object without Payee data. Depth `2` or greater will return payees",
          "required" : false,
          "deprecated" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 1
          }
        }, {
          "name" : "includePayeeLogo",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to include the `Payee` logo as a Base64 encoded string in the response payload.",
            "default" : false
          }
        }, {
          "name" : "imageType",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          }
        }, {
          "name" : "fallback",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist.",
            "default" : true
          }
        }, {
          "name" : "bestAvailableOnly",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return only the best available `PaymentConstraint`.",
            "default" : false
          }
        }, {
          "name" : "latestPayment",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the latest payment instead of the latest successful payment.",
            "default" : false
          }
        }, {
          "name" : "returnEntirePayeeAccountNumber",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return the entire payee account number.",
            "default" : false
          }
        }, {
          "name" : "returnAllRailConstraints",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Return all of the `RailConstraints` with `PaymentConstraints` instead of just the `AVAILABLE` `RailConstraints`.",
            "default" : false
          }
        }, {
          "name" : "logoBoundWidth",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound width if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "logoBoundHeight",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Retrieves logo at the requested bound height if includePayeeLogo is selected. ",
            "format" : "int32"
          }
        }, {
          "name" : "keepAspectRatio",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "description" : "Maintains the aspect ratio of the image if ",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The `User` for the supplied application `userId` or partner `partnerUserId` is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "The `User` for the supplied `userId` was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "description" : "Set's the `User` status to `ARCHIVED`, archived users should not be displayed to the user.",
        "operationId" : "Remove User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` to remove.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string"
          }
        }, {
          "name" : "reasonForDisabling",
          "in" : "query",
          "description" : "The reason for removing the `User`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deleted `User`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `userId` was not supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "description" : "Updates the `status`, `profileInformation`, or `isTest` properties of the `User` for the supplied `userId`.  The supplied `userId` can be either the application's `userId` or the partner's `partnerUserId`. The `Update User` operation can be used to `ARCHIVE` the `User` or mark the `User` `DORMANT`.",
        "operationId" : "Update User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` to update.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Returns the `User` for the supplied `userId` with the supplied properties updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "404" : {
            "description" : "No `User` found for the supplied `userId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "405" : {
            "description" : "The `userId` was not supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid `UserUpdate` supplied.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "409" : {
            "description" : "Unable to make the update because other resources reference the user that is being updated. For example, a user's address can't be archived if a `Payee`'s payerAddress references it.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/jwt" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Returns the JWT for the end `User` to make authenticated requests.",
        "operationId" : "Get JWT for User",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` to create a JWT for.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ipAddress",
          "in" : "query",
          "description" : "The IP Address of the end user.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "readOnly",
          "in" : "query",
          "description" : "If  the token should be given read-only access",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The JWT for the end `User` to make authenticated requests."
          }
        }
      }
    },
    "/users/{userId}/logout" : {
      "get" : {
        "tags" : [ "Users" ],
        "description" : "Invalidates the JWT for the `User` specified",
        "operationId" : "Invalidate User JWT",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` to invalidate the JWT for.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "default response",
            "content" : {
              "text/plain" : { },
              "application/json" : { }
            }
          }
        }
      }
    },
    "/users/{userId}/verify-jwt" : {
      "post" : {
        "tags" : [ "Users" ],
        "description" : "Returns 204 if the token was created by gluon",
        "operationId" : "Verify JWT",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` the JWT was created for.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/JwtVerificationRequest"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Return 204 if the token was created by gluon"
          }
        }
      }
    },
    "/users/{userId}/pkce/access" : {
      "post" : {
        "tags" : [ "Users" ],
        "operationId" : "Get JWT token for access code",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The access code",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "verifier",
          "in" : "query",
          "description" : "The verifier code",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "UserPkceDto resource"
          },
          "401" : {
            "description" : "Token Expired"
          },
          "404" : {
            "description" : "Resource Not Found"
          }
        }
      }
    },
    "/users/{userId}/pkce/authorize" : {
      "post" : {
        "tags" : [ "Users" ],
        "description" : "Get PKCE access token for user",
        "operationId" : "pkceAuthorize",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ipAddress",
          "in" : "query",
          "description" : "The IP Address of the end user.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "readOnly",
          "in" : "query",
          "description" : "If  the token should be given read-only access",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "challenge",
          "in" : "query",
          "description" : "The challenge code",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "challenge-method",
          "in" : "query",
          "description" : "The challenge algorithm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "PKCE Access Token as content"
          },
          "403" : {
            "description" : "Cannot access. User has not accepted customer consent terms and conditions"
          },
          "404" : {
            "description" : "Resource Not Found (When user does not exist)"
          }
        }
      }
    },
    "/users/{userId}/pkce/challenge" : {
      "post" : {
        "tags" : [ "Users" ],
        "operationId" : "Get challenge token for refresh code",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "verifier",
          "in" : "query",
          "description" : "The verifier code",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Refreshed JWT"
          },
          "404" : {
            "description" : "Resource Not Found"
          }
        }
      }
    },
    "/users/{userId}/pkce/refresh" : {
      "post" : {
        "tags" : [ "Users" ],
        "operationId" : "Get JWT token for refresh code",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "The refresh code",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Refreshed JWT"
          },
          "404" : {
            "description" : "Resource Not Found"
          }
        }
      }
    },
    "/webhooks/notifications" : {
      "post" : {
        "tags" : [ "Webhooks" ],
        "description" : "A successful response results in the application issuing `Notifications` that match the `ResourceNotificationsRequest` criteria. Use this resource endpoint to get a sample of the `Notifications` generated by the application, when preparing to consume `Webhook Notifications`.",
        "operationId" : "Request Resource Notifications",
        "requestBody" : {
          "description" : "Provides the criteria that determine which `Notifications` to send.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceNotificationsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "422" : {
            "description" : "The supplied `ResourceNotificationRequest` is invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/{userId}/payments/{paymentId}/disputes" : {
      "get" : {
        "tags" : [ "Admin, Disputes" ],
        "description" : "Returns a `PaymentDispute` associated with the `Payment` for the supplied `userId` and `paymentId`.",
        "operationId" : "Get disputes",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` that has the `Payment`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The ID of the payment to get a dispute for.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested `PaymentDispute`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentDispute"
                }
              }
            }
          },
          "404" : {
            "description" : "No dispute was found for the supplied `userId` and `paymentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Admin, Disputes" ],
        "description" : "Creates a dispute associated with a payment",
        "operationId" : "Create dispute",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` that has the `Payment`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The identifier of the `Payment` to dispute.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to create the `PaymentDispute`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDispute"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentDispute"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payment` found for the supplied `paymentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid request body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users/{userId}/payments/{paymentId}/disputes/{disputeId}" : {
      "get" : {
        "tags" : [ "Admin, Disputes" ],
        "description" : "Returns a `PaymentDispute` for the given `userId`, `paymentId`, and `disputeId`.",
        "operationId" : "Get dispute",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` that has the `Payment`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The ID of the payment to get a dispute for.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "disputeId",
          "in" : "path",
          "description" : "The ID of the dispute to retrieve.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The requested dispute."
          },
          "404" : {
            "description" : "No dispute was found for the supplied `userId`, `paymentId`, and `disputeId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Admin, Disputes" ],
        "description" : "Updates a dispute associated with a payment",
        "operationId" : "Update dispute",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The identifier of the `User` that has the `Payment`.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentId",
          "in" : "path",
          "description" : "The identifier of the `Payment` associated with the dispute.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "disputeId",
          "in" : "path",
          "description" : "The identifier of the `PaymentDispute` to be updated.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The information needed to update the `PaymentDispute`.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDisputeUpdate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentDispute"
                }
              }
            }
          },
          "404" : {
            "description" : "No `Payment` found for the supplied `paymentId`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "422" : {
            "description" : "Invalid request body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/filters" : {
      "get" : {
        "tags" : [ "Webhooks" ],
        "description" : "Returns the current `ResourceNotificationsFilter`.",
        "operationId" : "Resource Notification Filter",
        "responses" : {
          "200" : {
            "description" : "The requested Notification Filter",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotificationsFilter"
                }
              }
            }
          },
          "404" : {
            "description" : "No `ResourceNotificationsFilter` found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Webhooks" ],
        "description" : "A successful response results in the application sending only the `Notifications` that match the selection criteria in the `ResourceNotificationFilter`.",
        "operationId" : "Create Resource Notifications Filter",
        "requestBody" : {
          "description" : "Provides the criteria that determine which `Notifications` to send.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceNotificationsFilterRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The added Notifications Filter.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotificationsFilter"
                }
              }
            }
          },
          "422" : {
            "description" : "The supplied `ResourceNotificationsFilterRequest` is invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Webhooks" ],
        "description" : "A successful response clears all `ResourceNotificationFilter` settings. Clearing filters restores the issuing of all `Notifications`.",
        "operationId" : "Delete Resource Notifications Filter",
        "responses" : {
          "204" : {
            "description" : "The notifications filter was successfully removed."
          },
          "400" : {
            "description" : "No notifications filters exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Webhooks" ],
        "description" : "A successful response results in the application sending only the `Notifications` that match the selection criteria in the updated `ResourceNotificationsFilter`.",
        "operationId" : "Update Resource Notifications Filter",
        "requestBody" : {
          "description" : "Provides the criteria that determine which `Notifications` to send.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceNotificationsFilterRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The updated Notifications Filter.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceNotificationsFilter"
                }
              }
            }
          },
          "422" : {
            "description" : "The supplied `ResourceNotificationsFilterRequest` is invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ApiAccessDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "created" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updated" : {
            "type" : "string",
            "format" : "date-time"
          },
          "clientId" : {
            "type" : "string"
          },
          "partitionDate" : {
            "type" : "string",
            "format" : "date"
          },
          "source" : {
            "type" : "string",
            "enum" : [ "CLIENT", "WIDGET", "ADMIN_PORTAL" ]
          },
          "userId" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "apiMethod" : {
            "type" : "string"
          },
          "payload" : {
            "type" : "string"
          }
        },
        "description" : "A generic list of data to return with the pagination information.",
        "readOnly" : true
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "The HTTP response code.",
            "format" : "int32",
            "readOnly" : true,
            "example" : 404
          },
          "message" : {
            "type" : "string",
            "description" : "The HTTP response code message.",
            "readOnly" : true,
            "example" : "Not Found"
          },
          "details" : {
            "type" : "string",
            "description" : "The details of the error message.",
            "readOnly" : true,
            "example" : "User with supplied identifier not found."
          }
        },
        "description" : "Represents an error response from an API request."
      },
      "ApiAccessPage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ApiAccessDto"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for API Accesses."
      },
      "PageInfo" : {
        "required" : [ "limit", "offset", "totalCount" ],
        "type" : "object",
        "properties" : {
          "totalCount" : {
            "type" : "integer",
            "description" : "The total count of the data returned (after any filtering operations).",
            "format" : "int32",
            "example" : 125
          },
          "limit" : {
            "type" : "integer",
            "description" : "The amount of rows being returned in each request.",
            "format" : "int32",
            "example" : 10
          },
          "offset" : {
            "type" : "integer",
            "description" : "The current page offset being returned in each request.",
            "format" : "int32",
            "example" : 20
          },
          "sortField" : {
            "type" : "string",
            "description" : "An optional field indicate what column the data is sorted on.",
            "example" : "name"
          },
          "sortOrder" : {
            "type" : "string",
            "description" : "An optional sort direction to indicate what direction the data is sorted.",
            "example" : "ASC",
            "enum" : [ "ASC", "DESC" ]
          }
        },
        "description" : "A object for holding page information and counts."
      },
      "ApiAccessRequest" : {
        "required" : [ "date", "userId" ],
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "An required field for access endpoint to retrieve access information by user ID for this `Access`.",
            "example" : "user_e732d873-39b6-4622-ad8f-cda27c1ce1bb"
          },
          "date" : {
            "type" : "string",
            "description" : "An required field for access endpoint to retrieve access information for a specific date.",
            "format" : "date",
            "example" : "2021-06-30"
          },
          "offset" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The offset for pagination.",
            "format" : "int32",
            "example" : 0,
            "default" : 0
          },
          "limit" : {
            "maximum" : 500,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The maximum number of `ApiAccess`s to return.",
            "format" : "int32",
            "example" : 20,
            "default" : 30
          }
        },
        "description" : "Payload to retrieve ApiAccess objects"
      },
      "AddressComponents" : {
        "required" : [ "cityName", "zipCode" ],
        "type" : "object",
        "properties" : {
          "urbanization" : {
            "type" : "string",
            "description" : "The neighborhood, or city subdivision; used with Puerto Rican addresses."
          },
          "primaryNumber" : {
            "type" : "string",
            "description" : "The house, PO Box, or building number."
          },
          "streetName" : {
            "type" : "string",
            "description" : "The name of the street."
          },
          "streetPredirection" : {
            "type" : "string",
            "description" : "Directional information before a street name (N, SW, etc.)"
          },
          "streetPostdirection" : {
            "type" : "string",
            "description" : "Directional information after a street name (N, SW, etc.)"
          },
          "streetSuffix" : {
            "type" : "string",
            "description" : "Abbreviated value describing the street (St, Ave, Blvd, etc.)"
          },
          "secondaryNumber" : {
            "type" : "string",
            "description" : "Apartment or suite number."
          },
          "secondaryDesignator" : {
            "type" : "string",
            "description" : "Describes location within a complex/building (Ste, Apt, etc.)"
          },
          "extraSecondaryNumber" : {
            "type" : "string",
            "description" : "Descriptive information about the location of a building within a campus (e.g., E-5 in '5619 Loop 1604, Bldg E-5, Ste. 101 San Antonio TX')"
          },
          "extraSecondaryDesignator" : {
            "type" : "string",
            "description" : "Description of the location type within a campus (e.g., Bldg, Unit, Lot, etc.)"
          },
          "pmbDesignator" : {
            "type" : "string",
            "description" : "The private mailbox unit designator."
          },
          "pmbNumber" : {
            "type" : "string",
            "description" : "The private mailbox number."
          },
          "cityName" : {
            "type" : "string",
            "description" : "The USPS-preferred city name for this particular address, or an acceptable alternate if provided by the user."
          },
          "defaultCityName" : {
            "type" : "string",
            "description" : "The default city name for this 5-digit ZIP Code."
          },
          "stateAbbreviation" : {
            "type" : "string",
            "description" : "The two-letter state abbreviation."
          },
          "province" : {
            "type" : "string",
            "description" : "The state or province name or abbreviation. Only used in international addresses."
          },
          "zipCode" : {
            "type" : "string",
            "description" : "The Zip Code."
          },
          "plus4Code" : {
            "type" : "string",
            "description" : "The 4-digit add-on code (more specific than 5-digit ZIP)."
          },
          "countryIso3" : {
            "type" : "string",
            "description" : "The ISO 3166-1 alpha-3 country code."
          },
          "superAdministrativeArea" : {
            "type" : "string",
            "description" : "The largest administrative division within a country (e.g., region in France)."
          },
          "subAdministrativeArea" : {
            "type" : "string",
            "description" : "The smallest administrative division within a country (e.g., county in Germany)."
          },
          "dependentLocality" : {
            "type" : "string",
            "description" : "If there is additional information about the locality, it will be here. (e.g., neighborhood in Turkey)"
          },
          "dependentlocalityName" : {
            "type" : "string",
            "description" : "If the dependentLocality has a name, you'll find it here. (E.g., the dependentLocality 'Dong Cheng Qu' is named 'Dong Cheng.'"
          },
          "doubleDependentLocality" : {
            "type" : "string",
            "description" : "If there is additional information about the dependentLocality, you'll find it here. (e.g., village in the United Kingdom)"
          },
          "premise" : {
            "type" : "string",
            "description" : "Alphanumeric code pertaining to an individual location"
          },
          "premiseExtra" : {
            "type" : "string",
            "description" : "Extra information about the premise that is not necessarily authoritative but might still be useful (E.g., in a French address, 25 bis rue Emile Zola, 91190 Gif Sur Yvette, France, the premise number could be followed by the word 'bis' which would be considered premiseExtra data.)"
          },
          "premiseNumber" : {
            "type" : "string",
            "description" : "The alphanumeric component of the premise field (E.g., if premise contains 'Plot 7/7A' premiseNumber would contain '7/7A.')"
          },
          "premiseType" : {
            "type" : "string",
            "description" : "The premise type component of the premise field (E.g., if premise contains 'Plot 7/7A' premiseType would contain 'Plot.')"
          },
          "thoroughfare" : {
            "type" : "string",
            "description" : "All thoroughfare components combined"
          },
          "thoroughfarePredirection" : {
            "type" : "string",
            "description" : "The directional prefix component of the thoroughfare (E.g., if thoroughfare contains 'N Main St' thoroughfarePredirection would contain 'N.')"
          },
          "thoroughfarePostdirection" : {
            "type" : "string",
            "description" : "The directional suffix component of the thoroughfare (E.g., if thoroughfare contains 'Main St N' thoroughfarePostdirection would contain 'N.')"
          },
          "thoroughfareName" : {
            "type" : "string",
            "description" : "The name component of the thoroughfare (E.g., if thoroughfare contains 'Main St' thoroughfareName would contain 'Main.')"
          },
          "thoroughfareTrailingType" : {
            "type" : "string",
            "description" : "The trailing thoroughfare type component of the thoroughfare (E.g., if thoroughfare contains 'N Main St' thoroughfareTrailingType would contain 'St.')"
          },
          "thoroughfareType" : {
            "type" : "string",
            "description" : "The leading thoroughfare type component of the thoroughfare (E.g., if thoroughfare contains 'Rue De La Gare' thoroughfareLeadingType would contain 'Rue.')"
          },
          "dependentThoroughfare" : {
            "type" : "string",
            "description" : "All of the dependent thoroughfare components combined"
          },
          "dependentThoroughfarePredirection" : {
            "type" : "string",
            "description" : "The directional prefix component of the dependentThoroughfare (E.g., if dependentThoroughfare contains 'N Main St' dependentThoroughfarePredirection would contain 'N.')"
          },
          "dependentThoroughfarePostdirection" : {
            "type" : "string",
            "description" : "The directional suffix component of the dependentThoroughfare (E.g., if dependentThoroughfare contains 'Main St N' dependentThoroughfarePostdirection would contain 'N.')"
          },
          "dependentThoroughfareName" : {
            "type" : "string",
            "description" : "The name component of the dependentThoroughfare (E.g., if dependentThoroughfare contains 'N Main St' dependentThoroughfareName would contain 'Main.')"
          },
          "dependentThoroughfareTrailingType" : {
            "type" : "string",
            "description" : "The trailing dependentThoroughfare type component of the dependentThoroughfare (E.g., if dependentThoroughfare contains 'N Main St' dependentThoroughfareTrailingType would contain 'St.')"
          },
          "dependentThoroughfareType" : {
            "type" : "string",
            "description" : "The leading thoroughfare type component of the dependentThoroughfare field (E.g., if dependentThoroughfare contains 'Rue De La Gare' dependentThoroughfareType would contain 'Rue.')"
          },
          "building" : {
            "type" : "string",
            "description" : "The descriptive name that identifies an individual location, if one exists"
          },
          "buildingLeadingType" : {
            "type" : "string",
            "description" : "The leading building type component of the building (E.g., if building contains 'Bloc C' buildingLeadingType would contain 'Bloc.')"
          },
          "buildingName" : {
            "type" : "string",
            "description" : "The name component of the building (E.g., if building contains 'Westminster House' buildingName would contain 'Westminster.')"
          },
          "buildingTrailingType" : {
            "type" : "string",
            "description" : "The trailing building type component of the building (E.g., if building contains 'Westminster House' buildingTrailingType would contain 'House.')"
          },
          "subBuilding" : {
            "type" : "string",
            "description" : "All subBuilding components combined"
          },
          "subBuildingType" : {
            "type" : "string",
            "description" : "The leading sub-building type of the subBbuilding (E.g., if subBuilding contains 'Flat 1' subBuildingType would contain 'Flat.')"
          },
          "subBuildingNumber" : {
            "type" : "string",
            "description" : "The alphanumeric component of the subBuilding (E.g., if subBuilding contains 'Flat 1' subBuildingNumber would contain '1.')"
          },
          "subBuildingName" : {
            "type" : "string",
            "description" : "The descriptive name component of the subBuilding (E.g., if subBuilding contains 'Basement Flat' subBuildingName would contain 'Basement.')"
          },
          "postBox" : {
            "type" : "string",
            "description" : "All postBox Post Office Box components combined."
          },
          "postBoxType" : {
            "type" : "string",
            "description" : "The type component of the postBox (E.g., if postBox contains 'PO Box 1234' postBoxType would contain 'PO Box.')"
          },
          "postBoxNumber" : {
            "type" : "string",
            "description" : "The alphanumeric component of the postbox (E.g., if postBox contains 'PO Box 1234' postBoxNumber would contain '1234.')"
          }
        },
        "description" : "The components of the address."
      },
      "AddressSuggestion" : {
        "required" : [ "addressComponents", "addressLine1" ],
        "type" : "object",
        "properties" : {
          "addressee" : {
            "type" : "string",
            "description" : "The addressee."
          },
          "addressLine1" : {
            "type" : "string",
            "description" : "The first address line (usually the street address)."
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "The second address line (if needed)."
          },
          "addressLine3" : {
            "type" : "string",
            "description" : "The third address line (if needed)."
          },
          "addressLine4" : {
            "type" : "string",
            "description" : "The fourth address line (if needed)."
          },
          "lastLine" : {
            "type" : "string",
            "description" : "City, state, and ZIP Code combined. Not used in international addresses."
          },
          "note" : {
            "type" : "string",
            "description" : "A note that can provide additional information "
          },
          "valid" : {
            "type" : "boolean",
            "description" : "True if the address is acceptable as is."
          },
          "addressComponents" : {
            "$ref" : "#/components/schemas/AddressComponents"
          },
          "hashCode" : {
            "type" : "string"
          }
        },
        "description" : "A corrected address suggestion."
      },
      "AddressValidation" : {
        "required" : [ "candidates" ],
        "type" : "object",
        "properties" : {
          "candidates" : {
            "type" : "array",
            "description" : "The list of address candidates.",
            "items" : {
              "$ref" : "#/components/schemas/AddressSuggestion"
            }
          }
        },
        "description" : "An address validation response."
      },
      "AddressValidationRequest" : {
        "required" : [ "address" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/ValidateAddress"
          },
          "numSuggestions" : {
            "type" : "integer",
            "description" : "The number of suggestions to return if the address is not valid. Not used in international addresses.",
            "format" : "int32",
            "default" : 2
          }
        },
        "description" : "An address validation request."
      },
      "ValidateAddress" : {
        "required" : [ "addressLine1", "city" ],
        "type" : "object",
        "properties" : {
          "addressLine1" : {
            "type" : "string",
            "description" : "The first line of the address",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "The second line of the address"
          },
          "addressLine3" : {
            "type" : "string",
            "description" : "The third line of the address. Only used in international addresses."
          },
          "addressLine4" : {
            "type" : "string",
            "description" : "The fourth line of the address. Only used in international addresses."
          },
          "unitNumber" : {
            "type" : "string",
            "description" : "Apartment, suite, or office number. Not used in international addresses.",
            "example" : "'Apt 52' or simply '52'; not 'Apt52'."
          },
          "city" : {
            "type" : "string",
            "description" : "The city name."
          },
          "province" : {
            "type" : "string",
            "description" : "The state or province name or abbreviation. Only used in international addresses."
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state.  Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code. Supports international postal codes as well."
          },
          "addressee" : {
            "type" : "string",
            "description" : "The name of the person or company at this address."
          },
          "urbanization" : {
            "type" : "string",
            "description" : "The neighborhood (only Puerto Rican addresses)"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country code. Only used in international addresses."
          }
        },
        "description" : "An address to verify as USPS or International."
      },
      "Amount" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "pattern" : "^-?[0-9]*(\\.([0-9]{1,2}))?$",
            "type" : "string",
            "description" : "The amount of money expressed as a String.",
            "example" : "9999.99"
          },
          "currency" : {
            "type" : "string",
            "description" : "Indicates the `Currency` unit of the amount.",
            "default" : "USD",
            "enum" : [ "USD" ]
          }
        },
        "description" : "The balance of the Account"
      },
      "Bill" : {
        "required" : [ "created", "id", "lastUpdated", "name", "payeeAccountLink", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `Bill`.",
            "readOnly" : true,
            "example" : "bill_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Bill`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Bill` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Bill` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "lastUpdated" : {
            "type" : "string",
            "description" : "When the `Bill` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "name" : {
            "type" : "string",
            "description" : "The account name",
            "readOnly" : true
          },
          "nickName" : {
            "type" : "string",
            "description" : "The account name provided by the user.",
            "readOnly" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The bill status.",
            "readOnly" : true,
            "example" : "PAID",
            "enum" : [ "UNPAID", "SERVICE_SCHEDULED", "SERVICE_AUTOMATIC", "SCHEDULED", "EMPTY", "PAID", "PAID_EXTERNAL", "SKIPPED", "NONE", "ARCHIVED" ]
          },
          "extendedStatus" : {
            "type" : "string",
            "description" : "Indicates the extended status of the `Bill`.",
            "example" : "DUE",
            "enum" : [ "NONE", "AVAILABLE", "NEAR_DUE", "PAST_DUE", "DUE" ]
          },
          "amountDue" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "minimumDue" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "pastDue" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "amountScheduled" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "invoiceDate" : {
            "type" : "string",
            "description" : "The invoice date.",
            "format" : "date",
            "readOnly" : true,
            "example" : "2017-01-01"
          },
          "dueDate" : {
            "type" : "string",
            "description" : "The date that the `Payment` is due.",
            "format" : "date",
            "readOnly" : true,
            "example" : "2017-01-01"
          },
          "scheduledDate" : {
            "type" : "string",
            "description" : "The scheduled date.",
            "format" : "date",
            "readOnly" : true,
            "example" : "2017-01-01"
          },
          "paidDate" : {
            "type" : "string",
            "description" : "The paid date.",
            "format" : "date",
            "readOnly" : true,
            "example" : "2017-01-01"
          },
          "paidExternalDate" : {
            "type" : "string",
            "description" : "The date that the `Bill` was paid externally, where externally indicates that the payment was made outside of the application.",
            "format" : "date",
            "readOnly" : true,
            "example" : "2017-01-01"
          },
          "skippedDate" : {
            "type" : "string",
            "description" : "The date the bill was marked as being skipped.",
            "format" : "date",
            "readOnly" : true,
            "example" : "2017-01-01"
          },
          "notice" : {
            "type" : "string",
            "description" : "A message specific to the bill.",
            "readOnly" : true
          },
          "relatedDocumentIds" : {
            "type" : "array",
            "description" : "The related payee document IDs where a document can be associated with a bill. Also refer to the `latestDocumentId` field on the `PayeeAccount`",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The related payee document IDs where a document can be associated with a bill. Also refer to the `latestDocumentId` field on the `PayeeAccount`",
              "readOnly" : true
            }
          },
          "lastRefresh" : {
            "type" : "string",
            "description" : "The timestamp when the `Bill` was last refreshed.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          }
        },
        "description" : "Provides information about the `Bill` for the associated `PayeeAccount`.",
        "readOnly" : true
      },
      "Link" : {
        "required" : [ "rel", "uri" ],
        "type" : "object",
        "properties" : {
          "uri" : {
            "type" : "string",
            "description" : "The relative `URI` to use to retrieve the related API resource.",
            "readOnly" : true
          },
          "rel" : {
            "type" : "string",
            "description" : "The type of the relationship with the related API resource.",
            "readOnly" : true
          }
        },
        "description" : "Provides a relative uri to a related API resource."
      },
      "BillList" : {
        "required" : [ "bills" ],
        "type" : "object",
        "properties" : {
          "bills" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Bill"
            }
          }
        },
        "description" : "Represents the list of `Bills` returned as the result of a retrieval request."
      },
      "Terms" : {
        "required" : [ "created", "id", "termsType", "termsUrl", "termsVersion", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Terms`.",
            "readOnly" : true,
            "example" : "trms_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Terms` were created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Terms` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "termsVersion" : {
            "type" : "string",
            "description" : "A version identifier for the terms"
          },
          "termsUrl" : {
            "type" : "string",
            "description" : "URL where the full text of the terms can be found."
          },
          "termsType" : {
            "type" : "string",
            "description" : "Indicates the type of the `CustomerConsent`.",
            "enum" : [ "BILLPAY", "VIRTUAL_CARD" ]
          },
          "invalid" : {
            "type" : "boolean"
          }
        },
        "description" : "Terms for customer consent"
      },
      "TermsRequest" : {
        "required" : [ "termsType", "termsUrl", "termsVersion" ],
        "type" : "object",
        "properties" : {
          "termsVersion" : {
            "type" : "string",
            "description" : "A version identifier for the terms. Cannot be an empty string or whitespace."
          },
          "termsUrl" : {
            "type" : "string",
            "description" : "URL where the full text of the terms can be found. Cannot be an empty string or whitespace."
          },
          "termsType" : {
            "type" : "string",
            "description" : "Indicates the type of the `CustomerConsent`.",
            "enum" : [ "BILLPAY", "VIRTUAL_CARD" ]
          }
        },
        "description" : "Terms for customer consent"
      },
      "CustomerConsentTermsResponse" : {
        "type" : "object",
        "properties" : {
          "terms" : {
            "type" : "array",
            "description" : "Terms for customer consent",
            "items" : {
              "$ref" : "#/components/schemas/Terms"
            }
          }
        },
        "description" : "Terms for customer consent"
      },
      "TermsUpdate" : {
        "type" : "object",
        "properties" : {
          "termsVersion" : {
            "type" : "string",
            "description" : "A version identifier for the terms. If provided, cannot be an empty string or whitespace."
          },
          "termsUrl" : {
            "type" : "string",
            "description" : "URL where the full text of the terms can be found. If provided, cannot be an empty string or whitespace."
          },
          "invalid" : {
            "type" : "boolean",
            "description" : "Determines whether or not the terms are valid.  Users who have accepted terms that have been marked invalid will no longer be able to access features controlled by the invalidated terms."
          }
        },
        "description" : "Allows the `Customer Consent` terms to be updated."
      },
      "Address" : {
        "required" : [ "addressLine1", "city", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Address`",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Address`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Has the address been verified for KYC compliance.",
            "readOnly" : true,
            "default" : false
          },
          "defaultAddress" : {
            "type" : "boolean",
            "description" : "Is this the default address.",
            "readOnly" : true,
            "default" : false
          }
        },
        "description" : "Represents an address within the API.",
        "readOnly" : true
      },
      "AuthorizedUser" : {
        "required" : [ "addresses", "name", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `AuthorizedUser`.",
            "readOnly" : true,
            "example" : "auser_45fc183f900c4d9292610254b04c0089"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `AuthorizedUser`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `AuthorizedUser` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `AuthorizedUser` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of the `AuthorizedUser`.",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "addresses" : {
            "type" : "array",
            "description" : "The list of `Address` for the `AuthorizedUser`.",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          }
        },
        "description" : "Represents a user associated with a partner bank account or a funding `BankAccount`."
      },
      "BankAccount" : {
        "required" : [ "accountNumber", "created", "id", "routingNumber", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `BankAccount`.",
            "readOnly" : true,
            "example" : "ba_45fc183f900c4d9292610254b04c0089"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of `BankAccount`.",
            "example" : "DDA",
            "enum" : [ "DDA", "MMA", "LOAN" ]
          },
          "subType" : {
            "type" : "string",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized users of the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 digits of the `BankAccount` account number.",
            "example" : "0812"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The `BankAccount` routing number.",
            "example" : "689340812"
          }
        },
        "description" : "Represents the `BankAccount` associated with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "Card" : {
        "required" : [ "billingAddress", "brand", "created", "expirationDate", "id", "nameOnCard", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `Card`",
            "readOnly" : true,
            "example" : "c_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Card`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Card` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Card` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "brand" : {
            "type" : "string",
            "description" : "Indicates the network of the `Card`.",
            "example" : "AMEX",
            "enum" : [ "VISA", "MASTERCARD", "DISCOVER", "AMEX", "DINERS_CLUB", "JCB", "UNKNOWN" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "number" : {
            "pattern" : "[#0-9]{12,}[0-9]{4}",
            "type" : "string",
            "description" : "The card number.",
            "readOnly" : true,
            "example" : "3333"
          },
          "nameOnCard" : {
            "type" : "string",
            "description" : "The name of the card holder as printed on the `Card`.",
            "readOnly" : true,
            "example" : "Able N. Dwelling"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "expirationDate" : {
            "type" : "string",
            "description" : "The date the `Card` expires.",
            "format" : "date",
            "example" : "2021-01-01"
          },
          "token" : {
            "type" : "string",
            "description" : "For improved security, instead of providing a card number, a token can be provided that BillGO will use to lookup the `Card` details."
          }
        },
        "description" : "Represents the `Card` to use for a `CustomerFundingAccount`."
      },
      "CustomerFundingAccount" : {
        "required" : [ "created", "id", "status", "type", "updated", "userLink" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `CustomerFundingAccount`.",
            "example" : "cfa_b8ef29c894cc4ecca9446d00b0a1e838"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `CustomerFundingAccount`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "When the `CustomerFundingAccount` was created.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "When the `CustomerFundingAccount` was last updated.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "partnerId" : {
            "type" : "string",
            "description" : "An optional field for partners to add a partner ID for this `CustomerFundingAccount`.",
            "example" : "f5a1859358dc4c44bf27c7fb73d29c03"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the `CustomerFundingAccount`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of the `CustomerFundingAccountType`.",
            "example" : "CARD",
            "enum" : [ "CARD", "BANK_ACCOUNT" ]
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/ExternalBankAccount"
          },
          "card" : {
            "$ref" : "#/components/schemas/Card"
          },
          "userLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "nickname" : {
            "type" : "string",
            "description" : "User supplied name for this account"
          }
        },
        "description" : "Represents the `CustomerFundingAccount` for making `Payment`s. `CustomerFundingAccount` can be one of two types: `Card` or `BankAccount`. Only one of the two types can be used per `CustomerFundingAccount` instance."
      },
      "Name" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the name type.",
            "example" : "INDIVIDUAL",
            "enum" : [ "INDIVIDUAL", "BUSINESS" ]
          },
          "firstName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's first name.",
            "example" : "Joe"
          },
          "middleNameOrInitial" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's middle name or initial.",
            "example" : "R."
          },
          "lastName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's last name.",
            "example" : "Doe"
          },
          "suffix" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's suffix if applicable.",
            "example" : "Jr."
          },
          "businessName" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the business the account belongs to.",
            "example" : "Downtown Electric, Inc."
          },
          "openFormNameField" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "If the user's name cannot be broken into parts, a single line for the user's name can be set here.",
            "example" : "Joe R. Doe Jr."
          }
        },
        "description" : "Represents a name within the API."
      },
      "ExternalBankAccount" : {
        "required" : [ "bankName", "created", "id", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `BankAccount`.",
            "readOnly" : true,
            "example" : "ba_45fc183f900c4d9292610254b04c0089"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of `BankAccount`.",
            "example" : "DDA",
            "enum" : [ "DDA", "MMA", "LOAN" ]
          },
          "subType" : {
            "type" : "string",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "bankName" : {
            "type" : "string",
            "description" : "The name of the bank the `BankAccount` belongs to.",
            "example" : "Hero Bank"
          },
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized users of the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 digits of the `BankAccount` account number.",
            "example" : "0812"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The `BankAccount` routing number.",
            "example" : "134570812"
          }
        },
        "description" : "Represents the `BankAccount` associated with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "AddressRequest" : {
        "required" : [ "addressLine1", "city", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          }
        },
        "description" : "Contains the address for a request."
      },
      "CardRequest" : {
        "required" : [ "billingAddress", "brand", "expirationDate", "nameOnCard", "type" ],
        "type" : "object",
        "properties" : {
          "brand" : {
            "type" : "string",
            "description" : "Indicates the network of the `Card`.",
            "example" : "AMEX",
            "enum" : [ "VISA", "MASTERCARD", "DISCOVER", "AMEX", "DINERS_CLUB", "JCB", "UNKNOWN" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "nameOnCard" : {
            "type" : "string",
            "description" : "The name of the card holder as printed on the `Card`.",
            "example" : "Able N. Dwelling"
          },
          "number" : {
            "pattern" : "[0-9]{16}",
            "type" : "string",
            "description" : "The card number.",
            "example" : "0812555544443333"
          },
          "expirationDate" : {
            "type" : "string",
            "description" : "The date the `Card` expires. Must be a date in the future.",
            "format" : "date",
            "example" : "2021-01-01"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/AddressRequest"
          },
          "token" : {
            "type" : "string",
            "description" : "For improved security, instead of providing a card number, a token can be provided that BillGO will use to lookup the `Card` details."
          }
        },
        "description" : "Represents the `Card` to use for a `CustomerFundingAccount`."
      },
      "CustomerFundingAccountRequest" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "partnerId" : {
            "type" : "string",
            "description" : "An optional field for partners to add a partner ID for this `CustomerFundingAccount`.",
            "example" : "f5a1859358dc4c44bf27c7fb73d29c03"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of the `CustomerFundingAccountType`.",
            "example" : "CARD",
            "enum" : [ "CARD", "BANK_ACCOUNT" ]
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/ExternalBankAccountRequest"
          },
          "card" : {
            "$ref" : "#/components/schemas/CardRequest"
          },
          "nickname" : {
            "type" : "string",
            "description" : "User supplied name for this account"
          }
        },
        "description" : "Indicates the `CustomerFundingAccount` for the associated `PayeeAccount`."
      },
      "ExternalBankAccountRequest" : {
        "required" : [ "accountNumber", "bankName", "routingNumber", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of `BankAccount`.",
            "example" : "DDA",
            "enum" : [ "DDA", "MMA", "LOAN" ]
          },
          "subType" : {
            "type" : "string",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "bankName" : {
            "type" : "string",
            "description" : "The name of the bank this account belongs to.",
            "example" : "Hero Bank"
          },
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized for the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "accountNumber" : {
            "pattern" : "\\d+",
            "type" : "string",
            "description" : "The `BankAccount` account number."
          },
          "routingNumber" : {
            "pattern" : "[0-9]{9}",
            "type" : "string",
            "description" : "The `BankAccount` routing number."
          }
        },
        "description" : "Represents the `BankAccount` to associate with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "CustomerFundingAccountPage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/CustomerFundingAccount"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for customer funding accounts."
      },
      "CustomerFundingAccountUpdate" : {
        "type" : "object",
        "properties" : {
          "nickname" : {
            "type" : "string",
            "description" : "User supplied name for this account"
          }
        },
        "description" : "Holds the changes that can be made to a `CustomerFundingAccount`."
      },
      "Document" : {
        "required" : [ "contentType", "created", "documentCreated", "hash", "id", "name", "payeeAccountLink", "size", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Document`.",
            "readOnly" : true,
            "example" : "d_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Document` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Document` was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of the `Document`.",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the `Document`.",
            "readOnly" : true
          },
          "contentType" : {
            "type" : "string",
            "description" : "The MIME content type of the `Document`.",
            "readOnly" : true
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the `Document` in bytes.",
            "format" : "int32",
            "readOnly" : true
          },
          "hash" : {
            "type" : "string",
            "description" : "The SHA-1 hash of the `Document`.",
            "readOnly" : true
          },
          "documentCreated" : {
            "type" : "string",
            "description" : "The timestamp when the `Document` was created for the payee account.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "lastRefresh" : {
            "type" : "string",
            "description" : "The timestamp when the `Document` was last refreshed.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          }
        },
        "description" : "Represents a document the `Merchant` has made available to the user. Most often this is an invoice or bill.",
        "readOnly" : true
      },
      "DocumentLink" : {
        "required" : [ "expiration", "resourceUrl" ],
        "type" : "object",
        "properties" : {
          "resourceUrl" : {
            "type" : "string",
            "description" : "Indicates the URL to retrieve the `Document` from.",
            "readOnly" : true
          },
          "expiration" : {
            "type" : "string",
            "description" : "Indicates when the `Document` at the `resourceUrl` is no longer available for retrieval.",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "Provides the `Document` retrieval information for the `Document` associated with the `User's` `PayeeAccount`."
      },
      "DocumentList" : {
        "required" : [ "documents" ],
        "type" : "object",
        "properties" : {
          "documents" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Document"
            }
          }
        },
        "description" : "Represents the list of `Documents` returned as the result of a retrieval request."
      },
      "FundingAccount" : {
        "required" : [ "created", "defaultFundingAccount", "id", "status", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `FundingAccount`.",
            "example" : "fa_b8ef29c894cc4ecca9446d00b0a1e838"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `FundingAccount`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp the `FundingAccount` was created.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp the `FundingAccount` was last updated.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the `FundingAccount`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "If `FOREIGN_KEY`, then `partnerId` must be set. If `ACCOUNT_DETAILS`, then the `BankAccount` must be supplied and `partnerId` is optional.",
            "example" : "ACCOUNT_DETAILS",
            "enum" : [ "FOREIGN_KEY", "ACCOUNT_DETAILS" ]
          },
          "defaultFundingAccount" : {
            "type" : "boolean",
            "description" : "Indicates if the `FundingAccount` is the default for the `User`.",
            "example" : true
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The identifier to use when referencing the `FundingAccount` with the partner.",
            "example" : "6fec849a4fee406a955c59a7557c1e21"
          },
          "nickname" : {
            "type" : "string",
            "description" : "A nickname to use when displaying the `FundingAccount`.",
            "example" : "Joint Checking"
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccount"
          }
        },
        "description" : "This is the account to fund the `Payment` from and it is a bank account at the partner bank."
      },
      "BankAccountRequest" : {
        "required" : [ "accountNumber", "routingNumber", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of `BankAccount`.",
            "example" : "DDA",
            "enum" : [ "DDA", "MMA", "LOAN" ]
          },
          "subType" : {
            "type" : "string",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized for the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "accountNumber" : {
            "pattern" : "\\d+",
            "type" : "string",
            "description" : "The `BankAccount` account number."
          },
          "routingNumber" : {
            "pattern" : "[0-9]{9}",
            "type" : "string",
            "description" : "The `BankAccount` routing number."
          }
        },
        "description" : "Represents the `BankAccount` to associate with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "FundingAccountRequest" : {
        "type" : "object",
        "properties" : {
          "defaultFundingAccount" : {
            "type" : "boolean",
            "description" : "If set to `true`, this account will be used as the default `FundingAccount` for this `User`. This will not override any `Payment` or `Schedule` setting.",
            "example" : true,
            "default" : false
          },
          "partnerId" : {
            "type" : "string",
            "description" : "An optional field for partners to add a partner ID for this `FundingAccount`.",
            "example" : "f5a1859358dc4c44bf27c7fb73d29c03"
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccountRequest"
          },
          "nickname" : {
            "type" : "string",
            "description" : "A nickname to use when displaying the `FundingAccount`.",
            "example" : "Joint Checking"
          }
        }
      },
      "FundingAccountPage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/FundingAccount"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for funding accounts."
      },
      "BankAccountUpdate" : {
        "type" : "object",
        "properties" : {
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized users of the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "accountNumber" : {
            "pattern" : "\\d+",
            "type" : "string",
            "description" : "The `BankAccount` account number.",
            "example" : "109650812"
          }
        },
        "description" : "Represents the `BankAccount` associated with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "FundingAccountUpdate" : {
        "type" : "object",
        "properties" : {
          "defaultFundingAccount" : {
            "type" : "boolean",
            "description" : "The `defaultFundingAccount` is optional, when provided its value must be `true`. This will not override any `Payment` or `Schedule` setting.",
            "example" : true
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccountUpdate"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the `FundingAccount`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "nickname" : {
            "type" : "string",
            "description" : "A nickname to use when displaying the `FundingAccount`.",
            "example" : "Joint Checking"
          },
          "validFundingDefaultFundingAccount" : {
            "type" : "boolean"
          },
          "validFundingAccountUpdateRequest" : {
            "type" : "boolean"
          }
        }
      },
      "MerchantCategories" : {
        "required" : [ "categories" ],
        "type" : "object",
        "properties" : {
          "categories" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "description" : "Provides the list of available `MerchantCategory`.",
        "example" : [ "AUTO_LOAN", "ELECTRIC" ]
      },
      "Datum" : {
        "required" : [ "description", "id", "optional", "sensitiveField", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the `Datum`.",
            "readOnly" : true,
            "example" : "d_de26aae6b6cb40959bd924c1c54323dc"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of the `Datum`.",
            "example" : "QUESTION_ANSWER",
            "enum" : [ "USERNAME", "PASSWORD", "DATE", "CHOICE", "TEXT", "TEXT2", "TEXT3", "TEXT4", "QUESTION_ANSWER", "QUESTION_ANSWER_CHOICE", "ACCOUNT_NUMBER", "MERCHANT_REMITTANCE_ADDRESS", "OAUTH", "CITY", "CONTROL_DATE", "CUSTOMER_NUMBER", "DATE_OF_BIRTH", "EMAIL", "FIRST_NAME", "HOUSE_NUMBER", "LAST_NAME", "ORGANIZATION_NAME", "PHONE_NUMBER", "PIN_NUMBER", "POLICY_NUMBER", "STATE_ABBREVIATION", "STREET_ADDRESS", "ZIP_CODE" ]
          },
          "description" : {
            "type" : "string",
            "description" : "The human readable description. The description is the text that should be shown to the user for the `Datum`. In practice, this will use biller-specific terminology (e.g. 'Passcode' may be shown for a biller's Password prompt.).",
            "readOnly" : true,
            "example" : "Where were you born?"
          },
          "optional" : {
            "type" : "boolean",
            "description" : "Whether or not the `Datum` is optional.",
            "readOnly" : true,
            "example" : false
          },
          "sensitiveField" : {
            "type" : "boolean",
            "description" : "Whether or not the `Datum` is considered sensitive. If `true`, it's recommended that the `Datum` value is treated like a password in the UI.",
            "readOnly" : true,
            "example" : false
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of a particular piece of information. The status of `Datum` can be inspected to determine whether it has been verified or is invalid or missing.",
            "example" : "UNVERIFIED",
            "enum" : [ "MISSING", "UNVERIFIED", "INVALID", "VALID" ]
          },
          "pattern" : {
            "type" : "string",
            "description" : "The pattern is an optional regular expression that should be used to validate the `Datum` value specified by the user. When a pattern is specified, an array of examples is also provided.",
            "readOnly" : true,
            "example" : "[0-9]{5}"
          },
          "choices" : {
            "type" : "array",
            "description" : "The set of designated choices for the `Datum`. The choices are an array of options that should be presented to the user. Choices are specific to the Choice and QuestionAnswerChoice `Datum` types.",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "One of the designated choices for the `Datum`.",
              "readOnly" : true,
              "example" : "\"Hometown, USA\""
            }
          },
          "examples" : {
            "type" : "array",
            "description" : "The example values for the `Datum`. These examples can be presented to the user if they have difficulty in providing the value for the `Datum`.",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "One of the example values for the `Datum`.",
              "readOnly" : true,
              "example" : "\"New York, NY\""
            }
          },
          "oAuthAuthenticationUrl" : {
            "type" : "string",
            "writeOnly" : true
          },
          "trait" : {
            "type" : "string",
            "description" : "Proof traits can assist in the display of proof fields to end users.",
            "example" : "PHONE",
            "enum" : [ "NONE", "NUMERIC", "EMAIL", "PHONE" ]
          },
          "displayOrder" : {
            "type" : "integer",
            "description" : "The order in which to display the datums to a user if an order is provided.",
            "format" : "int32",
            "readOnly" : true,
            "example" : 0
          },
          "oauthAuthenticationUrl" : {
            "type" : "string"
          }
        },
        "description" : "When linking a `Merchant`, this information is needed for account access and payment processing."
      },
      "EbnAccountNumberMask" : {
        "required" : [ "mask", "maskLength" ],
        "type" : "object",
        "properties" : {
          "mask" : {
            "type" : "string",
            "description" : "The account number mask is a combination of account number placeholders containing numbers, letters, and special characters. \nMasks consist of the following characters: \n! - matches special character\n* - alphabetic\n# - numeric\n@ - alphanumeric",
            "example" : "000#########"
          },
          "maskLength" : {
            "type" : "integer",
            "description" : "the number of characters in account number mask.",
            "format" : "int32",
            "example" : 12
          }
        },
        "description" : "EBN account number mask for the `Merchant`."
      },
      "LinkingInstructions" : {
        "required" : [ "requiredDatums", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Indicates if a `Merchant` can be linked or not.",
            "readOnly" : true,
            "example" : "ONLINE",
            "enum" : [ "NOT_SUPPORTED", "ONLINE", "OFFLINE" ]
          },
          "requiredDatums" : {
            "type" : "array",
            "description" : "The list of required `Datums` needed to link the `Merchant`.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Datum"
            }
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The merchant directory integration id for the linking instructions.",
            "readOnly" : true,
            "example" : "h-600855151"
          },
          "urls" : {
            "$ref" : "#/components/schemas/Urls"
          }
        },
        "description" : "Provides the information needed to present to the user when the user selects to enable linking a `Merchant`"
      },
      "ManualInstructions" : {
        "required" : [ "requiredDatums" ],
        "type" : "object",
        "properties" : {
          "requiredDatums" : {
            "type" : "array",
            "description" : "The list of required `Datums` needed to pay the `Merchant`.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Datum"
            }
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The merchant directory integration id for the manual instructions.",
            "readOnly" : true,
            "example" : "h-600855151"
          }
        },
        "description" : "Provides the information needed to present to the user when the user selects a `Merchant` to add to their account."
      },
      "Merchant" : {
        "required" : [ "categories", "confidenceScore", "created", "ebnAccountNumberMasks", "id", "linkingInstructions", "manualInstructions", "name", "testBiller", "updated", "websiteUrl" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Merchant`.",
            "readOnly" : true,
            "example" : "att_ncp"
          },
          "created" : {
            "type" : "string",
            "description" : "The date the `Merchant` was added into the BillGO network.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The date the `Merchant` was last updated in the BillGO network.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the `Merchant` to display to users.",
            "readOnly" : true,
            "example" : "My Cable Company"
          },
          "categories" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The category that is used to classify a `Merchant` or `PayeeAccount` in the BillGO network.",
              "readOnly" : true,
              "example" : "CABLE",
              "enum" : [ "AUTOLOAN", "BANK", "CABLE", "CLUB", "COLLECTIONS", "CREDIT", "ELECTRIC", "GAS", "GIFT", "HOME", "INSURANCE", "INTERNET", "LICENSE", "LOAN", "MEDIA", "MEDICAL", "MORTGAGE", "PARKING", "PHONE", "PREPAID", "RENT", "SECURITY", "STORAGE", "STUDENTLOAN", "UTILITY", "WASTE", "WATER", "OTHER" ]
            }
          },
          "naicsType" : {
            "type" : "string",
            "description" : "The North American Industry Classification System Code for the `Merchant`",
            "readOnly" : true
          },
          "styling" : {
            "$ref" : "#/components/schemas/Style"
          },
          "accountNumberAvailable" : {
            "type" : "boolean",
            "description" : "The account number is expected to be provided by the merchant and available via `Payee Accounts`.",
            "readOnly" : true,
            "example" : false,
            "default" : false
          },
          "remitAddressAvailable" : {
            "type" : "boolean",
            "description" : "The remittance address is expected to be provided by the merchant and available via `Payee Accounts`.",
            "readOnly" : true,
            "example" : false,
            "default" : false
          },
          "testBiller" : {
            "type" : "boolean",
            "description" : "Indicates if the `Merchant` is a test merchant. Test `Merchants` will only show in the sandbox.",
            "readOnly" : true,
            "example" : false,
            "default" : false
          },
          "websiteUrl" : {
            "type" : "string",
            "description" : "The URL for the 'Merchant'. May be used to help identify a 'Merchant' to the user.",
            "readOnly" : true,
            "example" : "https://www.billgo.com/"
          },
          "confidenceScore" : {
            "type" : "number",
            "description" : "The confidence level that the `User` has an account with the `Merchant`. (0.00-1.00)",
            "format" : "double",
            "readOnly" : true,
            "example" : 0.98
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "The phone number of the merchant.",
            "readOnly" : true,
            "example" : "18008618390"
          },
          "logoId" : {
            "type" : "string",
            "description" : "The identifier of the merchant logo.",
            "readOnly" : true,
            "example" : "3d2b1db8e49535078f3f2e7ca0jf8469"
          },
          "addresses" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/MerchantAddress"
            }
          },
          "status" : {
            "$ref" : "#/components/schemas/MerchantStatus"
          },
          "ebnAccountNumberMasks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EbnAccountNumberMask"
            }
          },
          "linkingInstructions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LinkingInstructions"
            }
          },
          "manualInstructions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ManualInstructions"
            }
          }
        },
        "description" : "The `Merchant` provides information that is required for the `User` to add the `Merchant` to their bill pay profile."
      },
      "MerchantAddress" : {
        "required" : [ "addressLine1", "city", "locationId", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Address`",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Address`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Has the address been verified for KYC compliance.",
            "readOnly" : true,
            "default" : false
          },
          "defaultAddress" : {
            "type" : "boolean",
            "description" : "Is this the default address.",
            "readOnly" : true,
            "default" : false
          },
          "locationId" : {
            "type" : "string",
            "description" : "The unique identifier for the remittance address selected by the user.  The `locationId` should be used for the merchantLocationId in the `PayeeRequest` instead providing the `merchantAddress`. The `locationId` should also be used for the `merchantRemittanceLocationId` in the `PayeeAccountRemittanceRequest` instead of providing the `remittanceAddress` details."
          }
        },
        "description" : "Provides the `PayeeAccount` remittance address for making a payment using an EBN or for paying by Check.",
        "readOnly" : true
      },
      "MerchantStatus" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "description" : "The status for first time integration with this `Merchant`.",
            "readOnly" : true,
            "example" : "HEALTHY",
            "enum" : [ "HEALTHY", "CONCERN", "UNHEALTHY" ]
          },
          "sync" : {
            "type" : "string",
            "description" : "The status for ongoing synchronization for this `Merchant` integration.",
            "readOnly" : true,
            "example" : "HEALTHY",
            "enum" : [ "HEALTHY", "CONCERN", "UNHEALTHY" ]
          }
        },
        "description" : "The `MerchantStatus` provides the most recent integration status for the `Merchant`.",
        "readOnly" : true
      },
      "Style" : {
        "type" : "object",
        "properties" : {
          "primaryColor" : {
            "type" : "string",
            "description" : "The primary hex color code of the `Merchant`.",
            "readOnly" : true,
            "example" : "#1e8ecd"
          },
          "accentColor" : {
            "type" : "string",
            "description" : "The accent hex color code of the `Merchant`.",
            "readOnly" : true,
            "example" : "#1e8ecd"
          },
          "accentTextColor" : {
            "type" : "string",
            "description" : "The accent text hex color code of the `Merchant`.",
            "readOnly" : true,
            "example" : "#1e8ecd"
          }
        },
        "description" : "UI styling properties for the `Merchant`."
      },
      "Urls" : {
        "type" : "object",
        "properties" : {
          "createAccount" : {
            "type" : "string",
            "description" : "The URL to create an account at the `Merchant`.",
            "readOnly" : true,
            "example" : "https://merchant.com/createAccount"
          },
          "login" : {
            "type" : "string",
            "description" : "The URL to login to the `Merchant`.",
            "readOnly" : true,
            "example" : "https://merchant.com/login"
          },
          "resetPassword" : {
            "type" : "string",
            "description" : "The URL to reset your password at the `Merchant`.",
            "readOnly" : true,
            "example" : "https://merchant.com/resetPassword"
          },
          "website" : {
            "type" : "string",
            "description" : "The `Merchant` website URL.",
            "readOnly" : true,
            "example" : "https://merchant.com"
          }
        },
        "description" : "A collection of URLs for the `Merchant` that can help the users provide the information in the `requiredDatums`.",
        "readOnly" : true
      },
      "MerchantSuggestion" : {
        "required" : [ "categories", "confidenceScore", "created", "id", "name", "testBiller", "updated", "websiteUrl" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Merchant`.",
            "readOnly" : true,
            "example" : "att_ncp"
          },
          "created" : {
            "type" : "string",
            "description" : "The date the `Merchant` was added into the BillGO network.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The date the `Merchant` was last updated in the BillGO network.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the `Merchant` to display to users.",
            "readOnly" : true,
            "example" : "My Cable Company"
          },
          "categories" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The category that is used to classify a `Merchant` or `PayeeAccount` in the BillGO network.",
              "readOnly" : true,
              "example" : "CABLE",
              "enum" : [ "AUTOLOAN", "BANK", "CABLE", "CLUB", "COLLECTIONS", "CREDIT", "ELECTRIC", "GAS", "GIFT", "HOME", "INSURANCE", "INTERNET", "LICENSE", "LOAN", "MEDIA", "MEDICAL", "MORTGAGE", "PARKING", "PHONE", "PREPAID", "RENT", "SECURITY", "STORAGE", "STUDENTLOAN", "UTILITY", "WASTE", "WATER", "OTHER" ]
            }
          },
          "naicsType" : {
            "type" : "string",
            "description" : "The North American Industry Classification System Code for the `Merchant`",
            "readOnly" : true
          },
          "styling" : {
            "$ref" : "#/components/schemas/Style"
          },
          "accountNumberAvailable" : {
            "type" : "boolean",
            "description" : "The account number is expected to be provided by the merchant and available via `Payee Accounts`.",
            "readOnly" : true,
            "example" : false,
            "default" : false
          },
          "remitAddressAvailable" : {
            "type" : "boolean",
            "description" : "The remittance address is expected to be provided by the merchant and available via `Payee Accounts`.",
            "readOnly" : true,
            "example" : false,
            "default" : false
          },
          "testBiller" : {
            "type" : "boolean",
            "description" : "Indicates if the `Merchant` is a test merchant. Test `Merchants` will only show in the sandbox.",
            "readOnly" : true,
            "example" : false,
            "default" : false
          },
          "websiteUrl" : {
            "type" : "string",
            "description" : "The URL for the 'Merchant'. May be used to help identify a 'Merchant' to the user.",
            "readOnly" : true,
            "example" : "https://www.billgo.com/"
          },
          "confidenceScore" : {
            "type" : "number",
            "description" : "The confidence level that the `User` has an account with the `Merchant`. (0.00-1.00)",
            "format" : "double",
            "readOnly" : true,
            "example" : 0.98
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "The phone number of the merchant.",
            "readOnly" : true,
            "example" : "18008618390"
          },
          "logoId" : {
            "type" : "string",
            "description" : "The identifier of the merchant logo.",
            "readOnly" : true,
            "example" : "3d2b1db8e49535078f3f2e7ca0jf8469"
          },
          "addresses" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/MerchantAddress"
            }
          },
          "status" : {
            "$ref" : "#/components/schemas/MerchantStatus"
          }
        },
        "description" : "`MerchantSuggestion` provides information about a merchant that is then used to determine if the `Merchant` should be presented to the `User`.",
        "readOnly" : true
      },
      "MerchantSuggestions" : {
        "required" : [ "merchants" ],
        "type" : "object",
        "properties" : {
          "merchants" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/MerchantSuggestion"
            }
          }
        },
        "description" : "The set of `MerchantSuggestion`s returned from a merchant search or merchant suggestions request."
      },
      "UserNotificationsFilter" : {
        "type" : "object",
        "properties" : {
          "seen" : {
            "type" : "boolean",
            "description" : "Indicates that `UserNotifications` matching seen should be returned."
          },
          "read" : {
            "type" : "boolean",
            "description" : "Indicates that `UserNotifications` matching read should be returned."
          },
          "dismissed" : {
            "type" : "boolean",
            "description" : "Indicates that `UserNotifications` matching dismissed should be returned."
          },
          "afterTimestamp" : {
            "type" : "string",
            "description" : "Indicates that `UserNotifications` created after the supplied timestamp should be returned.",
            "format" : "date-time"
          }
        },
        "description" : "Indicates to the application which `UserNotifications` to return."
      },
      "UpdateUserNotifications" : {
        "required" : [ "markAsDismissed", "markAsRead", "markAsSeen" ],
        "type" : "object",
        "properties" : {
          "markAsSeen" : {
            "type" : "boolean",
            "description" : "Indicates the `UserNotification` should be marked as seen by the user."
          },
          "markAsRead" : {
            "type" : "boolean",
            "description" : "Indicates the `UserNotification` should be marked as read by the user."
          },
          "markAsDismissed" : {
            "type" : "boolean",
            "description" : "Indicates the `UserNotification` should be marked as dismissed by the user."
          }
        },
        "description" : "Indicates to the application the desired state of the `UserNotifications`."
      },
      "UpdateUserNotificationSet" : {
        "required" : [ "markAsDismissed", "markAsRead", "markAsSeen", "notificationIds" ],
        "type" : "object",
        "properties" : {
          "notificationIds" : {
            "type" : "array",
            "description" : "The identifiers of the set of `UserNotifications` to update.",
            "items" : {
              "type" : "string",
              "description" : "The identifiers of the set of `UserNotifications` to update."
            }
          },
          "markAsSeen" : {
            "type" : "boolean",
            "description" : "Indicates the `UserNotifications` should be marked as seen by the user."
          },
          "markAsRead" : {
            "type" : "boolean",
            "description" : "Indicates the `UserNotifications` should be marked as read by the user."
          },
          "markAsDismissed" : {
            "type" : "boolean",
            "description" : "Indicates the `UserNotifications` should be marked as dismissed by the user."
          }
        },
        "description" : "Indicates to the application the set of `UserNotifications` that should be updated to the supplied notification state."
      },
      "AccountPayeeRemittanceAccount" : {
        "required" : [ "bankAccountLast4", "created", "id", "payeeAccountType", "routingNumberLast4", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `BankAccount`.",
            "readOnly" : true,
            "example" : "ba_45fc183f900c4d9292610254b04c0089"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "bankAccountLast4" : {
            "pattern" : "[#]*[0-9]{1,4}",
            "type" : "string",
            "description" : "The account to account payee account number."
          },
          "routingNumberLast4" : {
            "pattern" : "[#]{5}[0-9]{4}",
            "type" : "string",
            "description" : "The account to account payee routing number."
          },
          "payeeAccountType" : {
            "type" : "string",
            "description" : "The bank account type.",
            "enum" : [ "CHECKING", "SAVINGS", "LOAN" ]
          },
          "remittanceAddress" : {
            "$ref" : "#/components/schemas/RemittanceAddress"
          },
          "merchantRemittanceLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s remittance location that the `PayeeAccount` should be associated with. Location ids are retrieved from the merchant directory. A `merchantRemittanceLocationId` or a `remittanceAddress` can be provided, not both."
          },
          "merchantPhoneNumber" : {
            "type" : "string"
          }
        },
        "description" : "Account Payee is used to display data related to account to account payments."
      },
      "AnnualSchedule" : {
        "required" : [ "dayOfYearToRepeat", "repeatEveryXYears" ],
        "type" : "object",
        "properties" : {
          "repeatEveryXYears" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The yearly frequency at which to make a `Payment`. If the user specifies the value 1 for `repeatEveryXYears`, a `Payment` is made every year.  If the user specifies 2 for `repeatEveryXYears` a `Payment` is made every other year.",
            "format" : "int32"
          },
          "dayOfYearToRepeat" : {
            "type" : "integer",
            "description" : "The days of the year on which to make a `Payment`.",
            "format" : "int32"
          }
        },
        "description" : "Determines when `Payments` are made for the associated `PayeeAccount`."
      },
      "BillBased" : {
        "required" : [ "daysRelativeToDueDate", "paymentAmountConfig" ],
        "type" : "object",
        "properties" : {
          "paymentAmountConfig" : {
            "type" : "string",
            "description" : "Determines which amount is paid each billing period as classified by the merchant.",
            "enum" : [ "MINIMUM_DUE", "AMOUNT_DUE", "BALANCE", "FIXED_AMOUNT" ]
          },
          "daysRelativeToDueDate" : {
            "type" : "string",
            "description" : "Determines when a payment is made for a `BillBased` schedule.",
            "example" : "DUE_DATE",
            "enum" : [ "DUE_DATE", "ONE_BUSINESS_DAY_BEFORE", "THREE_BUSINESS_DAYS_BEFORE" ]
          },
          "fixedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "payCurrentBill" : {
            "type" : "boolean",
            "description" : "Indicates if the current `Bill` was paid when the `RecurringSchedule` was created.",
            "default" : false
          }
        },
        "description" : "Returns the configuration details for a `BillBased` `RecurringSchedule`."
      },
      "CalendarBased" : {
        "required" : [ "paymentAmount", "paymentDates", "startDate", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates which of `weeklySchedule`, `monthlySchedule` or `annualSchedule` is provided.",
            "example" : "MONTHLY",
            "enum" : [ "WEEKLY", "MONTHLY", "ANNUALLY" ]
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional message associated with a `Payment` to indicate what the `Payment` is for. The `memo` is printed on the check if the `Payment` is made using a check."
          },
          "startDate" : {
            "type" : "string",
            "description" : "The staring date of the `RecurringSchedule`.",
            "format" : "date"
          },
          "nextDate" : {
            "type" : "string",
            "description" : "The date of the next `Payment`.",
            "format" : "date"
          },
          "paymentDates" : {
            "type" : "array",
            "description" : "The set of future dates on which a `Payment` is scheduled to be made. Useful for presenting to the user in a calendar widget. The default limit for the number of payment dates returned is 30. The maximum limit for the number of payment dates returned is configurable and has a maximum limit of 999 dates.",
            "items" : {
              "type" : "string",
              "description" : "The set of future dates on which a `Payment` is scheduled to be made. Useful for presenting to the user in a calendar widget. The default limit for the number of payment dates returned is 30. The maximum limit for the number of payment dates returned is configurable and has a maximum limit of 999 dates.",
              "format" : "date"
            }
          },
          "weeklySchedule" : {
            "$ref" : "#/components/schemas/WeeklySchedule"
          },
          "monthlySchedule" : {
            "$ref" : "#/components/schemas/MonthlySchedule"
          },
          "annualSchedule" : {
            "$ref" : "#/components/schemas/AnnualSchedule"
          }
        },
        "description" : "Returns the configuration details for a `CalendarBased` `RecurringSchedule`."
      },
      "Check" : {
        "required" : [ "created", "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Check`."
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Check`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Check` was created.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "partnerId" : {
            "type" : "string",
            "description" : "An optional field for partners to add a partner ID for this `Check`."
          },
          "memo" : {
            "type" : "string",
            "description" : "The user provided message associated with the `Payment`. The `memo` will be found on the `Check` image."
          },
          "contentType" : {
            "type" : "string",
            "description" : "The MIME content type of the `Check` image."
          },
          "frontImageHash" : {
            "type" : "string",
            "description" : "The SHA-1 hash of the front of the `Check`."
          },
          "frontImageLink" : {
            "$ref" : "#/components/schemas/ResourceLink"
          },
          "frontImageSize" : {
            "type" : "integer",
            "description" : "The size of the front of the `Check` image in bytes.",
            "format" : "int32"
          },
          "backImageHash" : {
            "type" : "string",
            "description" : "The SHA-1 hash of the back of the `Check`."
          },
          "backImageSize" : {
            "type" : "integer",
            "description" : "The size of the back of the `Check` image in bytes.",
            "format" : "int32"
          },
          "backImageLink" : {
            "$ref" : "#/components/schemas/ResourceLink"
          },
          "sequenceNumber" : {
            "type" : "string",
            "description" : "The sequence number on the check."
          },
          "fboAccountNumber" : {
            "type" : "string",
            "description" : "The fbo account number on the check."
          },
          "fboRoutingNumber" : {
            "type" : "string",
            "description" : "The fbo routing number on the check."
          },
          "validCheck" : {
            "type" : "boolean"
          }
        },
        "description" : "Represents the `Check` that was used to make the `Payment`. Provides resource links for retrieving front and back images of the `Check`."
      },
      "Device" : {
        "type" : "object",
        "properties" : {
          "ipAddress" : {
            "type" : "string",
            "description" : "The IP address of the device"
          },
          "httpRequestHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Any HTTP request headers on the payment creation request"
            },
            "description" : "Any HTTP request headers on the payment creation request"
          },
          "userAgent" : {
            "type" : "string",
            "description" : "Any software agent in use at the time"
          },
          "navigator" : {
            "type" : "string",
            "description" : "Any screen navigator in use by the user"
          },
          "clientTimeZone" : {
            "type" : "string",
            "description" : "The time zone the device is in"
          },
          "screenResolutionX" : {
            "type" : "integer",
            "description" : "The screen width in pixels",
            "format" : "int32"
          },
          "screenResolutionY" : {
            "type" : "integer",
            "description" : "The screen height in pixels",
            "format" : "int32"
          },
          "flashData" : {
            "type" : "string",
            "description" : "Any flash data from the device"
          },
          "installedFlashFonts" : {
            "type" : "array",
            "description" : "The flash fonts installed on the device",
            "items" : {
              "type" : "string",
              "description" : "The flash fonts installed on the device"
            }
          },
          "installedJsFonts" : {
            "type" : "array",
            "description" : "Any javascript fonts installed on the device",
            "items" : {
              "type" : "string",
              "description" : "Any javascript fonts installed on the device"
            }
          },
          "silverlightData" : {
            "type" : "string",
            "description" : "Any silverlight data from the device"
          },
          "installedPlugins" : {
            "type" : "array",
            "description" : "Plugins installed in the user's browser",
            "items" : {
              "type" : "string",
              "description" : "Plugins installed in the user's browser"
            }
          },
          "mimeTypes" : {
            "type" : "array",
            "description" : "MIME types specified",
            "items" : {
              "type" : "string",
              "description" : "MIME types specified"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of device: mobile or PC",
            "enum" : [ "MOBILE", "PC" ]
          },
          "networkCarrier" : {
            "type" : "string",
            "description" : "The network carrier the device is connected to"
          },
          "latitude" : {
            "type" : "string",
            "description" : "The location of the device"
          },
          "longitude" : {
            "type" : "string",
            "description" : "The location of the device"
          },
          "deviceOs" : {
            "type" : "string",
            "description" : "The device's operating system"
          },
          "speedOfInteraction" : {
            "type" : "string",
            "description" : "The speed of the device's connection"
          },
          "proxyType" : {
            "type" : "string",
            "description" : "The type of any proxy in use"
          },
          "proxyDescription" : {
            "type" : "string",
            "description" : "The description of any proxy in use"
          },
          "anonymizerInUse" : {
            "type" : "boolean",
            "description" : "Is an anonymizer in use on the device"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country where the device is"
          },
          "city" : {
            "type" : "string",
            "description" : "The city where the device is"
          },
          "areaCode" : {
            "type" : "string",
            "description" : "The telephone area code the device is in"
          },
          "continentCode" : {
            "type" : "string",
            "description" : "The continent where the device is"
          },
          "metroCode" : {
            "type" : "string",
            "description" : "The metropolitan code where the device is"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code of the device's location"
          },
          "region" : {
            "type" : "string",
            "description" : "The region the device is in"
          },
          "browser" : {
            "type" : "string",
            "description" : "The browser used to create the payment"
          },
          "deviceId" : {
            "type" : "string",
            "description" : "The device ID captured when the customer initiated the transaction."
          },
          "mobileNumber" : {
            "type" : "string",
            "description" : "The mobile number of the device used to create the payment."
          },
          "tpDeviceScore" : {
            "type" : "integer",
            "description" : "Third party Risk score (InAuth, biocatch…etc). Can be used for systems like SOCURE passing a device authorization score.",
            "format" : "int32"
          },
          "tpDeviceScoreReason" : {
            "type" : "string",
            "description" : "Third party Risk score Reason Code (InAuth, biocatch…etc)"
          }
        },
        "description" : "Information about the device used by the user to create the payment."
      },
      "ExtendedStatus" : {
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string",
            "readOnly" : true
          },
          "explanation" : {
            "type" : "string",
            "description" : "The `explanation` indicates the reason that the payment rail status is `NEEDS` or `UNAVAILABLE`.",
            "readOnly" : true
          },
          "canBeProvidedWithPaymentRequest" : {
            "type" : "boolean",
            "description" : "Indicates that the required information can be provided when making a payment.",
            "readOnly" : true
          }
        },
        "description" : "### Overview:\nThe following table lists the possible values for `extendedStatus` for the `railConstraints` with in \n`paymentConstraints`. A `railConstraints'` `status` can either be `NEEDS` or `UNAVAILABLE`.\nA `railConstraints` `status` of `UNAVAILABLE` cannot be resolved by the end user. A `railConstraints`\n`status` of `NEEDS` indicates that there is an action that can be taken to resolve the reason for the \nreported `railConstraints` `status`. If there is an action that the end user can take to resolve the \nreason for the `railConstraints'` `status`, then the `Explanation` column indicates the action that the end \nuser should take. If the suggested action can be performed when making a payment, then the \n`canBeProvidedWithPaymentRequest` attribute will be `true`. Explanations in the `Explanation` column that \n contain `${<attribute_name>}` will have the attribute name replaced with the attribute value.\n\n\n\n<table>\n<col style=\"width:65%\">\n<col style=\"width:35%\">\n<thead>\n<tr><th>Code</th><th>Explanation</th></tr>\n</thead>\n<tbody>\n<tr><td><code>ACCESS_RESTRICTED</code></td><td>Cannot link: access restricted</td></tr>\n<tr><td><code>ACCOUNT_ACTIVATION</code></td><td>Cannot link: account not active</td></tr>\n<tr><td><code>ACCOUNTS_ADDED</code></td><td>Contact merchant to add accounts</td></tr>\n<tr><td><code>ACCOUNT_TRANSFERRED</code></td><td>Cannot link: account transferred</td></tr>\n<tr><td><code>ACCOUNT_UPDATE</code></td><td>Cannot link: info needed for access</td></tr>\n<tr><td><code>ACCOUNT_VERIFICATION</code></td><td>Cannot link: verify account</td></tr>\n<tr><td><code>ACTIVATION</code></td><td>Cannot link: activate account</td></tr>\n<tr><td><code>ADDITIONAL_LINKING_DATUMS</code></td><td>Please provide the missing datums required to link your account.</td></tr>\n<tr><td><code>BILL_CHARGED_TO_PAYMENT_ACCOUNT</code></td><td>Payments for the user's payee_name payee account are being charged to a payment account. We are not able to accept a payment at this time.</td></tr>\n<tr><td><code>BILLING_DETAILS_UNAVAILABLE</code></td><td>Cannot link: no billing details</td></tr>\n<tr><td><code>BILL_PAY_CONSENT</code></td><td>Ask the user to accept the bill pay consent terms.</td></tr>\n<tr><td><code>CARD_REGISTRATION</code></td><td>Cannot link: register payment card</td></tr>\n<tr><td><code>CUSTOM_PAYMENT_DISABLED</code></td><td>The ${payee_name} payee has indicated that custom payments are disabled for associated accounts. We are not able to accept a payment at this time.</td></tr>\n<tr><td><code>DELIVER_BY_DATE_BEFORE_TODAY</code></td><td>The payment delverByDate: ${deliver_by_date}cannot be before today: ${today}.</td></tr>\n<tr><td><code>DELIVER_BY_DATE_MISSING</code></td><td>The deliver by date must be provided.</td></tr>\n<tr><td><code>DIRECT_PAYMENT_IS_NOT_SUPPORTED</code></td><td>This payment rail does not support direct payments using an external funding account or credit card.</td></tr>\n<tr><td><code>EBN_PAYMENT_RAIL_IS_NOT_SUPPORTED</code></td><td>The merchant does not support EBN payments.</td></tr>\n<tr><td><code>EMAIL_VALIDATION</code></td><td>Cannot link: set up automatic alerts</td></tr>\n<tr><td><code>FIRST_BILL_NOT_READY</code></td><td>Bill not avail: will appear when ready</td></tr>\n<tr><td><code>FREE_TRIAL_ONLY</code></td><td>Free account: no bills to show</td></tr>\n<tr><td><code>FUNDING_ACCOUNT</code></td><td>Ask the user to create a default funding account or to provide the funding account details with the payment request.</td></tr>\n<tr><td><code>HOLIDAY_DELIVER_BY_DATE</code></td><td>Payment cannot be delivered on bank holidays.</td></tr>\n<tr><td><code>HOLIDAY_SEND_ON_DATE</code></td><td>Payment cannot be sent on bank holidays.</td></tr>\n<tr><td><code>IN_COLLECTIONS</code></td><td>Cannot link: contact merchant</td></tr>\n<tr><td><code>LINKED_PAYEE</code></td><td>Ask the user to correct the linking datums and attempt to link the payee again.</td></tr>\n<tr><td><code>LINKING_DATUMS</code></td><td>Ask the user to provide linking datums for the payee.</td></tr>\n<tr><td><code>LINKING</code></td><td>The merchant account is in the process of being linked and payments are not available at the moment.</td></tr>\n<tr><td><code>MAILING_ADDRESS_UPDATE</code></td><td>Cannot link: update mailing address</td></tr>\n<tr><td><code>MANUAL_DATUMS</code></td><td>Ask the user to provide manual datums for the payee account.</td></tr>\n<tr><td><code>MATCHING_LINKING_DATUMS</code></td><td>The provided linking datums do not match any payment rails.</td></tr>\n<tr><td><code>MATCHING_MANUAL_DATUMS</code></td><td>The provided manual datums do not match any payment rails.  Ask the user to provide an updated set of manual datums.</td></tr>\n<tr><td><code>MERCHANT_HAS_FEE</code></td><td>Merchant has a fee.</td></tr>\n<tr><td><code>MERCHANT_ID</code></td><td>Ask the user to add a merchantId to the payee.</td></tr>\n<tr><td><code>MERCHANT_NOT_IN_DIRECTORY</code></td><td>The merchant is not found in the directory.</td></tr>\n<tr><td><code>MERCHANT_NOT_LINKABLE</code></td><td>Can't support biller: add manually</td></tr>\n<tr><td><code>MERCHANT_PAYMENT_HEALTH</code></td><td>Merchant payment health is below the required threshold.</td></tr>\n<tr><td><code>MISSING_BILL</code></td><td>Payee account does not have a bill.</td></tr>\n<tr><td><code>MISSING_REASON</code></td><td>Failed to identify the specific reason.</td></tr>\n<tr><td><code>CODE_GENERATOR_NOT_SUPPORTED</code></td><td>Cannot link: change code method</td></tr>\n<tr><td><code>NEW_DATUMS</code></td><td>Cannot link: needs new username/password</td></tr>\n<tr><td><code>NON_US_ACCOUNTS_UNSUPPORTED</code></td><td>Cannot link: non-US account</td></tr>\n<tr><td><code>NOT_ACCOUNT_OWNER</code></td><td>Cannot link: access issues</td></tr>\n<tr><td><code>NO_BILLS_AVAILABLE</code></td><td>No bills available at this time</td></tr>\n<tr><td><code>NOT_ACCESSIBLE_ONLINE</code></td><td>Cannot link: activate online access</td></tr>\n<tr><td><code>OUT_OF_BAND_PAYMENT_DISABLED</code></td><td>The user's bill has already been paid and the ${payee_name} payee does not accept extra payments. We are not able to accept additional payments at this time</td></tr>\n<tr><td><code>PAPERLESS_ENROLLMENT</code></td><td>Cannot get bill: enroll in paperless</td></tr>\n<tr><td><code>PASSWORD_RESET</code></td><td>Cannot link: reset username/password</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_HOLDER_NAME</code></td><td>Ask the user to provide the payer name for the payee account</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_NUMBER</code></td><td>Ask the user to provide the remittance account number for the payee account.</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_REMITTANCE_ACCOUNT</code></td><td>Ask the user to provide the payee account remittance account.</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_REMITTANCE_ADDRESS</code></td><td>Ask the user to provide the remittance address for the payee account.</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_PAYER_ADDRESS</code></td><td>Ask the user to provide the payer address.</td></tr>\n<tr><td><code>PAYMENTS_DISABLED_FOR_PAYEE</code></td><td>The ${payee_name} payee has indicated that payments are disabled for all associated accounts. We are not able to accept a payment at this time.</td></tr>\n<tr><td><code>PAYMENT_ALREADY_SCHEDULED</code></td><td>A payment for the user's payee_nameis already scheduled. We are not able to accept additional payments at this time.</td></tr>\n<tr><td><code>PAYMENT_INSTRUMENTS_ARE_NOT_SUPPORTED</code></td><td>Payments cannot be made for the merchant account with the provided payment instruments.</td></tr>\n<tr><td><code>PAYMENT_IS_PROCESSING</code></td><td>A payment is currently being processed for the user's ${payee_name} payee account. We are not able to accept additional payments at this time</td></tr>\n<tr><td><code>PAYMENT_UPDATE</code></td><td>Cannot link: update payment info</td></tr>\n<tr><td><code>PHONE_NUMBER_UPDATE</code></td><td>Cannot link: update phone number</td></tr>\n<tr><td><code>REACTIVATION</code></td><td>Cannot link: reactivate account</td></tr>\n<tr><td><code>REALTIME_PAYEE_LINKING_ERROR</code></td><td>The payee is not linked correctly. Retry linking process.</td></tr>\n<tr><td><code>REALTIME_PAYMENT_IS_NOT_SUPPORTED</code></td><td>The merchant does not support virtual bank accounts or virtual cards. Alternatively, enable virtual bank accounts or virtual cards in the client configuration.</td></tr>\n<tr><td><code>REALTIME_PAYMENT_RAIL_IS_NOT_SUPPORTED</code></td><td>The merchant does not support real time payments.</td></tr>\n<tr><td><code>SECURITY_IMAGE</code></td><td>Cannot link: create security image</td></tr>\n<tr><td><code>SECURITY_PHRASE</code></td><td>Cannot link: set up security phrase</td></tr>\n<tr><td><code>SECURITY_QUESTIONS</code></td><td>Cannot link: add security questions</td></tr>\n<tr><td><code>SECURITY_UPDATE</code></td><td>Cannot link: set up automatic alerts</td></tr>\n<tr><td><code>SEND_ON_DATE_BEFORE_TODAY</code></td><td>The payment sendOnDate: ${send_on_date}cannot be before today: ${today}.</td></tr>\n<tr><td><code>SEND_ON_DATE_MISSING</code></td><td>The send on date must be provided.</td></tr>\n<tr><td><code>SERVICE_AUTOMATIC_AT_BANK</code></td><td>The user's ${payee_name}payee account is set up to be paid automatically through the user's bank. We are not able to accept a payment at this time</td></tr>\n<tr><td><code>SERVICE_AUTOMATIC</code></td><td>Autopay is configured for the account at the ${payee_name} payee.</td></tr>\n<tr><td><code>SITE_DECOMMISSIONED</code></td><td>The online merchant payment portal is not longer available.</td></tr>\n<tr><td><code>SUBSCRIPTION_BASED_MERCHANT</code></td><td>Payments to subscription based merchants are not supported.</td></tr>\n<tr><td><code>SUPERSEDED_BY_MUTUALLY_EXCLUSIVE_RAIL</code></td><td>This payment rail is superseded by a mutually exclusive payment rail.</td></tr>\n<tr><td><code>TEMPORARILY_DISABLED</code></td><td>Account briefly disabled. Try again later.</td></tr>\n<tr><td><code>TURNED_OFF</code></td><td>Enable the payment rail in the client configuration.</td></tr>\n<tr><td><code>UNAUTHORIZED</code></td><td>Cannot link: unauthorized</td></tr>\n<tr><td><code>USERNAME_UPDATE</code></td><td>Cannot link: update phone number</td></tr>\n<tr><td><code>VALID_EBN_PAYEE_ACCOUNT_NUMBER</code></td><td>Ask the user to verify that the account number on the payee account remittance is correct.</td></tr>\n<tr><td><code>VALID_LINKING_DATUMS</code></td><td>Ask the user to correct the provided datums associated with the payee.</td></tr>\n<tr><td><code>VIRTUAL_CARD_CONSENT</code></td><td>Ask the user to accept the virtual card consent terms.</td></tr>\n<tr><td><code>WEEKEND_DELIVER_BY_DATE</code></td><td>Payment cannot be delivered on weekends.</td></tr>\n<tr><td><code>WEEKEND_SEND_ON_DATE</code></td><td>Payment cannot be sent on weekends.</td></tr>\n</tbody>\n</table>\n",
        "readOnly" : true
      },
      "HolidayDto" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the holiday.",
            "example" : "New Year's Day"
          },
          "date" : {
            "type" : "string",
            "description" : "The date on which the holiday is observed.",
            "format" : "date",
            "example" : "2022-01-01"
          }
        },
        "description" : "Represents a holiday."
      },
      "LinkData" : {
        "required" : [ "datums" ],
        "type" : "object",
        "properties" : {
          "datums" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Datum"
            }
          },
          "lastSync" : {
            "type" : "string",
            "description" : "The timestamp when the `Payee` data was last pulled/synchronized from the `Merchant` for the `User`. This includes new and/or updated `Payee Account`s and `Bill`s.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "extendedLinkStatus" : {
            "type" : "string",
            "description" : "Indicates the extended linking status of the `Payee`.",
            "example" : "IDENTIFICATION_CODE_REQUIRED",
            "enum" : [ "NONE", "IDENTIFICATION_CODE_REQUIRED", "DATUMS_NEEDED", "PROFILE_UPDATE_REQUIRED" ]
          },
          "isDocumentSyncingEnabled" : {
            "type" : "boolean",
            "description" : "Indicates if document synchronization is enabled."
          },
          "lastDocumentSync" : {
            "type" : "string",
            "description" : "The timestamp when the documents were last synchronized.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "documentEnrollmentStatus" : {
            "type" : "string",
            "description" : "Indicates the `Document` enrollment status for a `Payee` or for a `PayeeAccount`.",
            "example" : "ENROLLED",
            "enum" : [ "NONE", "NOT_ENROLLED", "ENROLLING", "ENROLLED" ]
          },
          "linkLockedCode" : {
            "type" : "string",
            "description" : "Link code for why the `Payee` is locked",
            "readOnly" : true,
            "example" : "ACTIVATION_REQUIRED",
            "enum" : [ "NONE", "ACTIVATION_REQUIRED", "NO_ACCESSIBLE_ONLINE", "ACCESS_RESTRICTED", "CODE_GENERATOR_NOT_SUPPORTED", "UPDATE_REQUIRED", "CREATE_SECURITY_PHRASE", "CREATE_SECURITY_QUESTIONS", "TEMPORARILY_DISABLED", "PASSWORD_RESET_REQUIRED", "PASSWORD_EXPIRED", "NEW_PROOFS_REQUIRED", "SECURITY_UPDATE_REQUIRED", "PAYMENT_UPDATE_REQUIRED", "IN_COLLECTIONS", "CARD_REGISTRATION_REQUIRED", "UPDATE_EMAIL_ADDRESS", "UPDATE_PHONE_NUMBER", "UPDATE_USERNAME", "EMAIL_VALIDATION_REQUIRED", "UNAUTHORIZED", "REACTIVATION_REQUIRED", "CREATE_SECURITY_IMAGE", "NOT_ACCOUNT_OWNER" ]
          },
          "linkClosedCode" : {
            "type" : "string",
            "description" : "The code for why the `Payee` is closed.",
            "readOnly" : true,
            "example" : "ACCOUNT_INACTIVE",
            "enum" : [ "NONE", "ACCOUNT_INACTIVE", "FIRST_BILL_NOT_READY", "FREE_TRIAL_ONLY", "NO_ACCOUNTS_ADDED", "NO_BILLS_AVAILABLE", "NO_US_ACCOUNTS_UNSUPPORTED", "ACCOUNTS_NOT_VERIFIED", "PAPERLESS_ENROLLMENT_REQUIRED", "ACCOUNT_TRANSFERRED", "BILLING_DETAILS_UNAVAILABLE", "SITE_DECOMMISSIONED" ]
          }
        },
        "description" : "Provides information about the linking status of the `Merchant` added by the user."
      },
      "MonthlySchedule" : {
        "required" : [ "daysOfMonthToRepeat", "repeatEveryXMonths" ],
        "type" : "object",
        "properties" : {
          "repeatEveryXMonths" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The monthly frequency at which to make a `Payment`. If the user specifies the value 1 for `repeatEveryXMonths`, a `Payment` is made every month.  If the user specifies 2 for `repeatEveryXMonths` a `Payment` is made every other month.",
            "format" : "int32"
          },
          "daysOfMonthToRepeat" : {
            "type" : "array",
            "description" : "If a `Payment` is to be made bi-monthly, the user provides the first day of the month. The client application determines second day of the month by adding 15 days to the first day of the month. If a `Payment` is to be made on the last day of the month the user should provide `[31]`. If the scheduled month does not contain that day of the month, the payment will be scheduled for the last day of the month. For example if the user selects the 29th day of the month, payments made in the month of February will be made on the 28th unless the year is a leap year.",
            "items" : {
              "type" : "integer",
              "description" : "If a `Payment` is to be made bi-monthly, the user provides the first day of the month. The client application determines second day of the month by adding 15 days to the first day of the month. If a `Payment` is to be made on the last day of the month the user should provide `[31]`. If the scheduled month does not contain that day of the month, the payment will be scheduled for the last day of the month. For example if the user selects the 29th day of the month, payments made in the month of February will be made on the 28th unless the year is a leap year.",
              "format" : "int32"
            }
          }
        },
        "description" : "Determines when `Payments` are made for the associated `PayeeAccount`."
      },
      "PayeeAccount" : {
        "required" : [ "accountOrigin", "created", "documentEnrollmentStatus", "established", "hidden", "id", "name", "payeeInfo", "payeeLink", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int64"
          },
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `PayeeAccount`.",
            "readOnly" : true,
            "example" : "pacct_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `PayeeAccount`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccount` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccount` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "established" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccount` was established. Indicates when a converged accountwas originally created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates if the user wants the `PayeeAccount` displayed in the UI."
          },
          "status" : {
            "type" : "string",
            "description" : "When a `Payee` is successfully linked, a `PayeeAccount` is created for each account associated with the linked `Payee`. Before the user supplies the required payment details for a `PayeeAccount`, the `PayeeAccount` status is `PENDING`.  After the user supplies the required payment details for a `PayeeAccount`, the `PayeeAccount's` status is `ACTIVE`. `PayeeAccounts` with a status of `ARCHIVED` should  not be presented to the user.",
            "readOnly" : true,
            "example" : "ACTIVE",
            "enum" : [ "PENDING", "ACTIVE", "ARCHIVED" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The name that identifies the `PayeeAccount` within the `Payee`.",
            "readOnly" : true,
            "example" : "Ford F150 Insurance"
          },
          "notice" : {
            "type" : "string",
            "description" : "An informational message to the user about the `PayeeAccount`.",
            "readOnly" : true
          },
          "accountRemittanceInfo" : {
            "$ref" : "#/components/schemas/PayeeAccountRemittance"
          },
          "fundingAccount" : {
            "$ref" : "#/components/schemas/FundingAccount"
          },
          "customerFundingAccount" : {
            "$ref" : "#/components/schemas/CustomerFundingAccount"
          },
          "billStatus" : {
            "type" : "string",
            "enum" : [ "UNPAID", "SERVICE_SCHEDULED", "SERVICE_AUTOMATIC", "SCHEDULED", "EMPTY", "PAID", "PAID_EXTERNAL", "SKIPPED", "NONE", "ARCHIVED" ]
          },
          "payerAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "owedBalance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "schedules" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/RecurringSchedule"
            }
          },
          "latestPayment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "nextPayment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "latestBill" : {
            "$ref" : "#/components/schemas/Bill"
          },
          "documentEnrollmentStatus" : {
            "type" : "string",
            "description" : "Indicates the `Document` enrollment status for a `Payee` or for a `PayeeAccount`.",
            "readOnly" : true,
            "example" : "ENROLLED",
            "enum" : [ "NONE", "NOT_ENROLLED", "ENROLLING", "ENROLLED" ]
          },
          "latestDocumentId" : {
            "type" : "string",
            "description" : "The unique identifier for the latest document when available.",
            "readOnly" : true
          },
          "base64PayeeLogo" : {
            "type" : "string",
            "description" : "The Base64 encoded string representation of a `Payee` logo.",
            "readOnly" : true
          },
          "payeeInfo" : {
            "$ref" : "#/components/schemas/PayeeInfo"
          },
          "paymentConstraints" : {
            "$ref" : "#/components/schemas/PaymentConstraints"
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The `integrationId` for the `ManualInstructions` selected by the user.",
            "readOnly" : true
          },
          "billCategory" : {
            "type" : "string",
            "description" : "The category that is used to classify a `Merchant` or `PayeeAccount` in the BillGO network.",
            "readOnly" : true,
            "example" : "CABLE",
            "enum" : [ "AUTOLOAN", "BANK", "CABLE", "CLUB", "COLLECTIONS", "CREDIT", "ELECTRIC", "GAS", "GIFT", "HOME", "INSURANCE", "INTERNET", "LICENSE", "LOAN", "MEDIA", "MEDICAL", "MORTGAGE", "PARKING", "PHONE", "PREPAID", "RENT", "SECURITY", "STORAGE", "STUDENTLOAN", "UTILITY", "WASTE", "WATER", "OTHER" ]
          },
          "payeeLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "ofxToken" : {
            "type" : "string",
            "description" : "OFX token",
            "readOnly" : true,
            "example" : "R1EOD39I5V"
          },
          "apr" : {
            "type" : "string",
            "description" : "APR associated with the balance.",
            "readOnly" : true,
            "example" : "17.84"
          },
          "lastRefresh" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccount` was last refreshed.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "creditLimit" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "accountOrigin" : {
            "type" : "string",
            "description" : "Indicates the origin of the account. If the account was created as a part of the `Payee` being linked, the status will be `LINKED`. If the account was created manually, the status will be `MANUAL`",
            "example" : "LINKED",
            "enum" : [ "LINKED", "MANUAL" ]
          },
          "isNew" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "accountToAccountPayeeInfo" : {
            "$ref" : "#/components/schemas/AccountPayeeRemittanceAccount"
          }
        },
        "description" : "Provides information about the `PayeeAccount` associated with the `Payee`.",
        "readOnly" : true
      },
      "PayeeAccountRemittance" : {
        "required" : [ "created", "id", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `PayeeAccountRemittance`.",
            "readOnly" : true,
            "example" : "raddr_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccountRemittance` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccountRemittance` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 of the `accountNumber` for the `PayeeAccount`. For security reasons, the full `accountNumber` will never be returned from the API.",
            "readOnly" : true
          },
          "accountNumberOrigin" : {
            "type" : "string",
            "description" : "Indicates the source of the `AccountNumber`.",
            "example" : "USER_PROVIDED",
            "enum" : [ "USER_PROVIDED", "SYSTEM_PROVIDED", "CSR_PROVIDED" ]
          },
          "nameOnAccount" : {
            "$ref" : "#/components/schemas/Name"
          },
          "remittanceAddress" : {
            "$ref" : "#/components/schemas/RemittanceAddress"
          },
          "merchantRemittanceLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s remittance location that the `PayeeAccount` should be associated with. Location ids are retrieved from the merchant directory. A `merchantRemittanceLocationId` or a `remittanceAddress` can be provided, not both."
          },
          "merchantPhoneNumber" : {
            "type" : "string"
          }
        },
        "description" : "Contains the remittance information required to make a payment for the `PayeeAccount`."
      },
      "PayeeAccountSummary" : {
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The account number for the `PayeeAccountRemittance`."
          },
          "accountRemittanceAccountNumber" : {
            "type" : "string",
            "description" : "The account number for the `PayeeAccountRemittanceAccount`."
          },
          "name" : {
            "type" : "string",
            "description" : "The name for the `PayeeAccount`."
          },
          "fundingAccount" : {
            "$ref" : "#/components/schemas/FundingAccount"
          },
          "customerFundingAccount" : {
            "$ref" : "#/components/schemas/CustomerFundingAccount"
          }
        },
        "description" : "Returns summary information about the `PayeeAccount` associated with the `RecurringSchedule`."
      },
      "PayeeInfo" : {
        "required" : [ "created", "id", "linkStatus", "name", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Payee`.",
            "readOnly" : true,
            "example" : "p_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Payee`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Payee` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Payee` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Represents the status of the `Payee`. `ACTIVE` is a `Payee` in good standing. `PENDING` payees are in the process of being set up. `ARCHIVED` payees should not be shown to the user.",
            "readOnly" : true,
            "example" : "ARCHIVED",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the `Payee` provided by the user or the `Merchant` name if not provided by the user.",
            "readOnly" : true
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the `Payee` provided by the user.",
            "readOnly" : true
          },
          "merchantPhoneNumber" : {
            "type" : "string",
            "readOnly" : true
          },
          "naicsCodes" : {
            "type" : "array",
            "description" : "The list of North American Industry Classification System codes for the `Merchant`",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The list of North American Industry Classification System codes for the `Merchant`",
              "readOnly" : true
            }
          },
          "linkData" : {
            "$ref" : "#/components/schemas/LinkData"
          },
          "notice" : {
            "type" : "string",
            "description" : "A message providing additional information about the `Payee`.",
            "readOnly" : true
          },
          "merchantLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "The identifier of the `Merchant` associated with the `Payee`.",
            "readOnly" : true
          },
          "merchantLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `Payee` should be associated with. Location ids are retrieved from the merchant directory."
          },
          "merchantAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "trusted" : {
            "type" : "boolean",
            "description" : "Is the `Payee` trusted."
          },
          "linkStatus" : {
            "type" : "string",
            "description" : "Indicates the linking status of the `Payee`. `LINKABLE` indicates the `Payee` can be linked, but there is currently no attempt to link the `Payee`. `NOT_LINKABLE` indicates the `Payee` does not support linking. `LINKED` indicates the `Payee` has been linked. Other statuses are indicators of the status of an in progress link attempt. Please see the documentation on linking `Payee`s for further information.",
            "example" : "DATUMS_VALID",
            "enum" : [ "LINKING", "LINKING_DATUMS_VERIFIED", "DATUMS_INVALID", "DATUMS_MISSING", "LOCKED", "CLOSED", "LINKED", "OUTAGE", "PENDING", "DATUMS_VALID", "LINKABLE", "NOT_LINKABLE", "DEPRECATED", "NONE" ]
          },
          "payerAddress" : {
            "$ref" : "#/components/schemas/Address"
          }
        },
        "description" : "Information about a `Payee` intended to be returned with a `PayeeAccount`.",
        "readOnly" : true
      },
      "PayeeSummary" : {
        "type" : "object",
        "properties" : {
          "payeeName" : {
            "type" : "string",
            "description" : "The name of the `Payee` provided by the user or the `Merchant` name if not provided by the user."
          },
          "payeeEmail" : {
            "type" : "string",
            "description" : "The email address of the `Payee` provided by the user."
          },
          "payeeAccountName" : {
            "type" : "string",
            "description" : "The name that identifies the `PayeeAccount` within the `Payee`."
          },
          "status" : {
            "type" : "string",
            "description" : "Represents the status of the `Payee`. `ACTIVE` is a `Payee` in good standing. `PENDING` payees are in the process of being set up. `ARCHIVED` payees should not be shown to the user.",
            "example" : "ARCHIVED",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "linkStatus" : {
            "type" : "string",
            "description" : "Indicates the linking status of the `Payee`. `LINKABLE` indicates the `Payee` can be linked, but there is currently no attempt to link the `Payee`. `NOT_LINKABLE` indicates the `Payee` does not support linking. `LINKED` indicates the `Payee` has been linked. Other statuses are indicators of the status of an in progress link attempt. Please see the documentation on linking `Payee`s for further information.",
            "example" : "DATUMS_VALID",
            "enum" : [ "LINKING", "LINKING_DATUMS_VERIFIED", "DATUMS_INVALID", "DATUMS_MISSING", "LOCKED", "CLOSED", "LINKED", "OUTAGE", "PENDING", "DATUMS_VALID", "LINKABLE", "NOT_LINKABLE", "DEPRECATED", "NONE" ]
          },
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 of the `accountNumber` for the `PayeeAccount`. For security reasons, the full `accountNumber` will never be returned from the API."
          },
          "merchantId" : {
            "type" : "string",
            "description" : "The identifier of the `Merchant` associated with the `Payee`."
          }
        },
        "description" : "Contains summary information about the `Payee`."
      },
      "Payment" : {
        "required" : [ "created", "id", "originationType", "payeeAccountLink", "sendOnDate", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `Payment`.",
            "example" : "p_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Payment`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Payment` was created.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Payment` was last updated.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "originationType" : {
            "type" : "string",
            "description" : "Indicates how the `Payment` was generated. This has implications on the mutability of the `Payment`.",
            "example" : "ONE_TIME_PAYMENT",
            "enum" : [ "RECURRENCE_SCHEDULE_PAYMENT", "ONE_TIME_PAYMENT" ]
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The unique client idempotency identifier associated with the `Payment` to ensure that the `Payment` is not made more than once."
          },
          "payNow" : {
            "type" : "boolean",
            "description" : "This directs the system to prioritize the `Payment` when set to true. Additionally, the feeAllowance field should be left empty."
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the current status of the `Payment`.",
            "example" : "PROCESSING",
            "enum" : [ "PENDING", "PENDING_DEBITED", "CANCELLED", "FAILURE", "INFORMATION_NEEDED", "PROCESSING", "SUBMITTED", "SUCCESS", "SUCCESS_RETURN", "SUCCESS_PARTIAL_RETURN" ]
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Indicates additional details for the current status of the `Payment`.",
            "example" : "BILL_NOT_FOUND",
            "enum" : [ "BILL_NOT_FOUND", "CARD_SECURITY_CODE_INCORRECT", "DEPRECATED", "LOCKED", "OUTAGE", "PAYMENT_DISABLED", "SUBSUMED", "BANK_ONLY", "CARD_EXPIRED", "CARD_ONLY", "CREATE_SECURITY_QUESTIONS", "DECLINED", "EXTERNAL_NOT_ALLOWED", "EXTERNAL_NOT_VALIDATED", "VIRTUAL_PAYMENT_ALLOCATION", "ZIP_CODE_INCORRECT", "LESS_THAN_AMOUNT_DISALLOWED", "LESS_THAN_OWED_DISALLOWED", "NEW_LARGER_AMOUNT_DUE", "IDENTIFICATION_CODE_REQUIRED", "DATUMS_INVALID", "DATUMS_MISSING", "COMPLIANCE_DECLINED", "EXPIRATION_TIME_EXCEEDED", "CANCELLED_CSR", "CANCELLED_CUSTOMER", "CANCELLED_NSF", "CANCELLED_FRAUD", "PROCESSING_ERROR", "NEEDS_FRAUD_REVIEW", "FRAUD_REVIEW_HOLD" ]
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date the payment will be sent to the merchant.",
            "format" : "date",
            "example" : "2017-01-01"
          },
          "deliverByDate" : {
            "type" : "string",
            "description" : "The date the payment will be delivered to the merchant.",
            "format" : "date",
            "example" : "2020-01-01"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional user provided message to associate with the `Payment`. The `memo` will be added to the check if the `Payment` is made with a check."
          },
          "feeAllowance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "fundingAccount" : {
            "$ref" : "#/components/schemas/FundingAccount"
          },
          "customerFundingAccount" : {
            "$ref" : "#/components/schemas/CustomerFundingAccount"
          },
          "paymentResult" : {
            "$ref" : "#/components/schemas/PaymentResult"
          },
          "paymentResults" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Only populated if returnAllPaymentResults flag is set to true on the Get Payment by id call",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/PaymentResult"
            }
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "recurrenceScheduleId" : {
            "type" : "string",
            "description" : "Only populated if the `Payment` was generated from the `RecurrenceSchedule`."
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentAttribute"
            }
          },
          "payeeSummary" : {
            "$ref" : "#/components/schemas/PayeeSummary"
          },
          "ofxToken" : {
            "type" : "string",
            "description" : "OFX token",
            "example" : "R1EOD39I5V"
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          },
          "refundAmount" : {
            "type" : "string"
          },
          "fraudStatus" : {
            "type" : "string",
            "description" : "Indicates if a fraud review has been requested, or if requested and a response was received, what the result was.",
            "enum" : [ "NOT_REQUESTED", "REQUESTED", "RE_REQUESTED", "NEEDS_REVIEW", "APPROVED", "DENIED" ]
          },
          "fraudUpdated" : {
            "type" : "integer",
            "description" : "The last time the fraud status was changed.",
            "format" : "int64"
          }
        },
        "description" : "Contains information about the `Payment`.",
        "readOnly" : true
      },
      "PaymentAttribute" : {
        "required" : [ "key", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "pattern" : "^([0-9a-zA-Z_@\\.-]+){1,255}$",
            "type" : "string",
            "description" : "The given name of the `PaymentAttribute` on the `Payment`."
          },
          "value" : {
            "pattern" : "^([0-9a-zA-Z_@\\.-]+){1,255}$",
            "type" : "string",
            "description" : "The value of the `PaymentAttribute` on the `Payment`."
          }
        },
        "description" : "User defined attributes of the `Payment`. The attribute field is free form for the user to associate key/value pairs of information with the payment that are meaningful to the user. There is no validation of the key/value pair. The key and value are alphanumeric strings limited to 255 characters."
      },
      "PaymentConstraints" : {
        "type" : "object",
        "properties" : {
          "railConstraints" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RailConstraints"
            }
          },
          "bankHolidays" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HolidayDto"
            }
          }
        },
        "description" : "Contains the list of rails available for making a payment.",
        "readOnly" : true
      },
      "PaymentDeviceInfo" : {
        "type" : "object",
        "properties" : {
          "customerRiskScore" : {
            "type" : "string",
            "description" : "Customer fraud risk score"
          },
          "counterpartyRiskScore" : {
            "type" : "string",
            "description" : "Counterparty fraud risk score"
          },
          "customerRiskDecision" : {
            "type" : "string",
            "description" : "Risk decision from legacy fraud monitoring system: valid values include PASSED, REVIEW, REJECT, and AUTO_RELEASE. If this field is set to REJECT, then the payment will automatically be denied."
          },
          "currentBalance" : {
            "$ref" : "#/components/schemas/AccountBalance"
          },
          "device" : {
            "$ref" : "#/components/schemas/Device"
          }
        },
        "description" : "Information about the device the user used to setup the payment."
      },
      "PaymentRail" : {
        "type" : "object",
        "properties" : {
          "railPaymentId" : {
            "type" : "string",
            "description" : "The identifier of the payment returned by the Payment Rail."
          },
          "railType" : {
            "type" : "string",
            "description" : "The general method used to process the payment.",
            "example" : "REALTIME",
            "enum" : [ "REALTIME", "EBN", "CHECK", "ACH" ]
          },
          "railName" : {
            "type" : "string",
            "description" : "The name of the method used to process the payment.",
            "example" : "PARTNER_API",
            "enum" : [ "PARTNER_API", "SPECTRUM", "VOICE_PAY", "RPPS_MC_DIRECT", "RPPS_ALLIED", "CHECK_CASS", "PIE_ALLIED_EFT", "CHECK_FIS", "CHECK_HBN", "CHECK_HNB", "HISTORICAL_CHECK", "HISTORICAL_CARD", "HISTORICAL_RPPS", "ONUS", "ACH" ]
          },
          "paymentType" : {
            "type" : "string",
            "description" : "The method used to fund the payment. Deprecated and replaced with PaymentResult PaymentInstrumentType",
            "example" : "VIRTUAL_CARD",
            "deprecated" : true,
            "enum" : [ "DDA", "MMA", "VIRTUAL_CARD", "VIRTUAL_ACCOUNT", "CONSUMER_CARD" ]
          }
        },
        "description" : "Represents the method that was used to make the payment."
      },
      "PaymentResult" : {
        "required" : [ "created", "id", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `PaymentResult`.",
            "example" : "pr_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `PaymentResult`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `PaymentResult` was created.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `PaymentResult` was updated.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "cancelled" : {
            "type" : "string",
            "description" : "The timestamp when the `PaymentResult` was cancelled.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the final status of the `Payment`.",
            "example" : "PAID",
            "enum" : [ "SCHEDULED", "SENT", "PAID", "REFUNDED", "CANCELLED", "FAILED", "PARTIALLY_REFUNDED" ]
          },
          "extendedStatus" : {
            "type" : "string",
            "description" : "Provides additional information on the status of the `Payment`.",
            "example" : "PAYMENT_AMOUNT_DECLINED",
            "enum" : [ "NONE", "DATUMS_NEEDED", "PAYEE_ACTION_REQUIRED", "PAYMENT_AMOUNT_DECLINED", "PAYMENT_ACCOUNT_DECLINED", "OUTAGE", "DISPUTED" ]
          },
          "paymentRail" : {
            "$ref" : "#/components/schemas/PaymentRail"
          },
          "amountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "feesPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "effectiveDate" : {
            "type" : "string",
            "description" : "The effective date the `Payment` was actually made.",
            "format" : "date"
          },
          "sentOnDate" : {
            "type" : "string",
            "description" : "The date the `Payment` was sent to the merchant.",
            "format" : "date"
          },
          "referenceNumber" : {
            "type" : "string",
            "description" : "The `referenceNumber` for the `Payment` when the payment is made through a network or with a check."
          },
          "virtualCardLast4" : {
            "pattern" : "[0-9]{4}",
            "type" : "string",
            "description" : "The last four digits of the virtual card if the payment was made with a virtual card."
          },
          "merchantConfirmationNumber" : {
            "type" : "string",
            "description" : "The payment confirmation number returned by the merchant when the payment is `PAID`. The `merchantConfirmationNumber` may not be provided if the payment is made through a network or with a check."
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "The error returned by the merchant when the payment `FAILED`."
          },
          "cancelledMessage" : {
            "type" : "string",
            "description" : "The reason the payment was `CANCELLED`."
          },
          "paymentInstrumentType" : {
            "type" : "string",
            "description" : "The payment instrument used to make the payment.",
            "enum" : [ "EXTERNAL_MMA", "EXTERNAL_DDA", "EXTERNAL_CARD", "VIRTUAL_BANK_ACCOUNT", "VIRTUAL_CARD" ]
          },
          "paymentInstrumentLast4" : {
            "pattern" : "[0-9]{4}",
            "type" : "string",
            "description" : "The last four digits of the payment instrument used to make the payment."
          },
          "refundReason" : {
            "type" : "string",
            "description" : "The reason the payment was `REFUNDED`."
          },
          "check" : {
            "$ref" : "#/components/schemas/Check"
          }
        },
        "description" : "Indicates the final result of the `Payment`.",
        "readOnly" : true
      },
      "RailConstraints" : {
        "required" : [ "businessDaysNeededToDeliverPayment", "deliverByDate", "nextCutoffForPayment", "sendOnDate", "supportsNonBusinessDays", "supportsPayNow", "type", "userPaymentMethodAllowed" ],
        "type" : "object",
        "properties" : {
          "businessDaysNeededToDeliverPayment" : {
            "type" : "integer",
            "description" : "An integer representation of the business days needed to deliver the `Payment`. 0 indexed.",
            "format" : "int32",
            "readOnly" : true
          },
          "supportsPayNow" : {
            "type" : "boolean",
            "description" : "This will be `true` if the account is able to be submitted for a realtime payment. In order for the account to be eligible, the merchant must be in the BillGO network, support realtime payments, be in a healthy state, and the user must opt-in to virtual card payments.",
            "readOnly" : true
          },
          "supportsNonBusinessDays" : {
            "type" : "boolean",
            "description" : "This will be `true` if the account is able to be submitted for a payment during non-business days. In order for the account to be eligible, the `Payee` must support Realtime payments and the `PayeeAccount` must include `PayeeAccountRemittance` details. The `PayeeAccountRemittance` details are required so that given a scenario in which the payment is unable to be processed via a Realtime rail the payment can be attempted  through other rails which require the `PayeeAccountRemittance` details.",
            "readOnly" : true
          },
          "nextCutoffForPayment" : {
            "type" : "string",
            "description" : "The UTC timestamp that a payment has to be submitted by to be processed within that day's batch. If the timestamp represents a future date, count `businessDaysNeededToDeliveryPayment` from that date. For example, if today is Saturday, October 12, 2019 and the `nextCutoffForPayment` is Monday, October 14, 2019 at 4pm ET, if `businessDaysNeededToDeliveryPayment` is 2, then the payment will be delivered to the merchant on Wednesday, October 16, 2019 if it is submitted prior to the `nextCutoffForPayment`.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "userPaymentMethodAllowed" : {
            "type" : "boolean",
            "description" : "Signals if users can pick one of their payment methods to pay with. Eligible user payment methods are: cards and bank accounts. These are payment methods outside of bank accounts with the bank that is integrated with BillGO.",
            "readOnly" : true
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates whether or not a payment can be made using the rail.",
            "readOnly" : true,
            "enum" : [ "AVAILABLE", "NEEDS", "UNAVAILABLE" ]
          },
          "extendedStatus" : {
            "type" : "array",
            "description" : "### Overview:\nThe following table lists the possible values for `extendedStatus` for the `railConstraints` with in \n`paymentConstraints`. A `railConstraints'` `status` can either be `NEEDS` or `UNAVAILABLE`.\nA `railConstraints` `status` of `UNAVAILABLE` cannot be resolved by the end user. A `railConstraints`\n`status` of `NEEDS` indicates that there is an action that can be taken to resolve the reason for the \nreported `railConstraints` `status`. If there is an action that the end user can take to resolve the \nreason for the `railConstraints'` `status`, then the `Explanation` column indicates the action that the end \nuser should take. If the suggested action can be performed when making a payment, then the \n`canBeProvidedWithPaymentRequest` attribute will be `true`. Explanations in the `Explanation` column that \n contain `${<attribute_name>}` will have the attribute name replaced with the attribute value.\n\n\n\n<table>\n<col style=\"width:65%\">\n<col style=\"width:35%\">\n<thead>\n<tr><th>Code</th><th>Explanation</th></tr>\n</thead>\n<tbody>\n<tr><td><code>ACCESS_RESTRICTED</code></td><td>Cannot link: access restricted</td></tr>\n<tr><td><code>ACCOUNT_ACTIVATION</code></td><td>Cannot link: account not active</td></tr>\n<tr><td><code>ACCOUNTS_ADDED</code></td><td>Contact merchant to add accounts</td></tr>\n<tr><td><code>ACCOUNT_TRANSFERRED</code></td><td>Cannot link: account transferred</td></tr>\n<tr><td><code>ACCOUNT_UPDATE</code></td><td>Cannot link: info needed for access</td></tr>\n<tr><td><code>ACCOUNT_VERIFICATION</code></td><td>Cannot link: verify account</td></tr>\n<tr><td><code>ACTIVATION</code></td><td>Cannot link: activate account</td></tr>\n<tr><td><code>ADDITIONAL_LINKING_DATUMS</code></td><td>Please provide the missing datums required to link your account.</td></tr>\n<tr><td><code>BILL_CHARGED_TO_PAYMENT_ACCOUNT</code></td><td>Payments for the user's payee_name payee account are being charged to a payment account. We are not able to accept a payment at this time.</td></tr>\n<tr><td><code>BILLING_DETAILS_UNAVAILABLE</code></td><td>Cannot link: no billing details</td></tr>\n<tr><td><code>BILL_PAY_CONSENT</code></td><td>Ask the user to accept the bill pay consent terms.</td></tr>\n<tr><td><code>CARD_REGISTRATION</code></td><td>Cannot link: register payment card</td></tr>\n<tr><td><code>CUSTOM_PAYMENT_DISABLED</code></td><td>The ${payee_name} payee has indicated that custom payments are disabled for associated accounts. We are not able to accept a payment at this time.</td></tr>\n<tr><td><code>DELIVER_BY_DATE_BEFORE_TODAY</code></td><td>The payment delverByDate: ${deliver_by_date}cannot be before today: ${today}.</td></tr>\n<tr><td><code>DELIVER_BY_DATE_MISSING</code></td><td>The deliver by date must be provided.</td></tr>\n<tr><td><code>DIRECT_PAYMENT_IS_NOT_SUPPORTED</code></td><td>This payment rail does not support direct payments using an external funding account or credit card.</td></tr>\n<tr><td><code>EBN_PAYMENT_RAIL_IS_NOT_SUPPORTED</code></td><td>The merchant does not support EBN payments.</td></tr>\n<tr><td><code>EMAIL_VALIDATION</code></td><td>Cannot link: set up automatic alerts</td></tr>\n<tr><td><code>FIRST_BILL_NOT_READY</code></td><td>Bill not avail: will appear when ready</td></tr>\n<tr><td><code>FREE_TRIAL_ONLY</code></td><td>Free account: no bills to show</td></tr>\n<tr><td><code>FUNDING_ACCOUNT</code></td><td>Ask the user to create a default funding account or to provide the funding account details with the payment request.</td></tr>\n<tr><td><code>HOLIDAY_DELIVER_BY_DATE</code></td><td>Payment cannot be delivered on bank holidays.</td></tr>\n<tr><td><code>HOLIDAY_SEND_ON_DATE</code></td><td>Payment cannot be sent on bank holidays.</td></tr>\n<tr><td><code>IN_COLLECTIONS</code></td><td>Cannot link: contact merchant</td></tr>\n<tr><td><code>LINKED_PAYEE</code></td><td>Ask the user to correct the linking datums and attempt to link the payee again.</td></tr>\n<tr><td><code>LINKING_DATUMS</code></td><td>Ask the user to provide linking datums for the payee.</td></tr>\n<tr><td><code>LINKING</code></td><td>The merchant account is in the process of being linked and payments are not available at the moment.</td></tr>\n<tr><td><code>MAILING_ADDRESS_UPDATE</code></td><td>Cannot link: update mailing address</td></tr>\n<tr><td><code>MANUAL_DATUMS</code></td><td>Ask the user to provide manual datums for the payee account.</td></tr>\n<tr><td><code>MATCHING_LINKING_DATUMS</code></td><td>The provided linking datums do not match any payment rails.</td></tr>\n<tr><td><code>MATCHING_MANUAL_DATUMS</code></td><td>The provided manual datums do not match any payment rails.  Ask the user to provide an updated set of manual datums.</td></tr>\n<tr><td><code>MERCHANT_HAS_FEE</code></td><td>Merchant has a fee.</td></tr>\n<tr><td><code>MERCHANT_ID</code></td><td>Ask the user to add a merchantId to the payee.</td></tr>\n<tr><td><code>MERCHANT_NOT_IN_DIRECTORY</code></td><td>The merchant is not found in the directory.</td></tr>\n<tr><td><code>MERCHANT_NOT_LINKABLE</code></td><td>Can't support biller: add manually</td></tr>\n<tr><td><code>MERCHANT_PAYMENT_HEALTH</code></td><td>Merchant payment health is below the required threshold.</td></tr>\n<tr><td><code>MISSING_BILL</code></td><td>Payee account does not have a bill.</td></tr>\n<tr><td><code>MISSING_REASON</code></td><td>Failed to identify the specific reason.</td></tr>\n<tr><td><code>CODE_GENERATOR_NOT_SUPPORTED</code></td><td>Cannot link: change code method</td></tr>\n<tr><td><code>NEW_DATUMS</code></td><td>Cannot link: needs new username/password</td></tr>\n<tr><td><code>NON_US_ACCOUNTS_UNSUPPORTED</code></td><td>Cannot link: non-US account</td></tr>\n<tr><td><code>NOT_ACCOUNT_OWNER</code></td><td>Cannot link: access issues</td></tr>\n<tr><td><code>NO_BILLS_AVAILABLE</code></td><td>No bills available at this time</td></tr>\n<tr><td><code>NOT_ACCESSIBLE_ONLINE</code></td><td>Cannot link: activate online access</td></tr>\n<tr><td><code>OUT_OF_BAND_PAYMENT_DISABLED</code></td><td>The user's bill has already been paid and the ${payee_name} payee does not accept extra payments. We are not able to accept additional payments at this time</td></tr>\n<tr><td><code>PAPERLESS_ENROLLMENT</code></td><td>Cannot get bill: enroll in paperless</td></tr>\n<tr><td><code>PASSWORD_RESET</code></td><td>Cannot link: reset username/password</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_HOLDER_NAME</code></td><td>Ask the user to provide the payer name for the payee account</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_NUMBER</code></td><td>Ask the user to provide the remittance account number for the payee account.</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_REMITTANCE_ACCOUNT</code></td><td>Ask the user to provide the payee account remittance account.</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_REMITTANCE_ADDRESS</code></td><td>Ask the user to provide the remittance address for the payee account.</td></tr>\n<tr><td><code>PAYEE_ACCOUNT_PAYER_ADDRESS</code></td><td>Ask the user to provide the payer address.</td></tr>\n<tr><td><code>PAYMENTS_DISABLED_FOR_PAYEE</code></td><td>The ${payee_name} payee has indicated that payments are disabled for all associated accounts. We are not able to accept a payment at this time.</td></tr>\n<tr><td><code>PAYMENT_ALREADY_SCHEDULED</code></td><td>A payment for the user's payee_nameis already scheduled. We are not able to accept additional payments at this time.</td></tr>\n<tr><td><code>PAYMENT_INSTRUMENTS_ARE_NOT_SUPPORTED</code></td><td>Payments cannot be made for the merchant account with the provided payment instruments.</td></tr>\n<tr><td><code>PAYMENT_IS_PROCESSING</code></td><td>A payment is currently being processed for the user's ${payee_name} payee account. We are not able to accept additional payments at this time</td></tr>\n<tr><td><code>PAYMENT_UPDATE</code></td><td>Cannot link: update payment info</td></tr>\n<tr><td><code>PHONE_NUMBER_UPDATE</code></td><td>Cannot link: update phone number</td></tr>\n<tr><td><code>REACTIVATION</code></td><td>Cannot link: reactivate account</td></tr>\n<tr><td><code>REALTIME_PAYEE_LINKING_ERROR</code></td><td>The payee is not linked correctly. Retry linking process.</td></tr>\n<tr><td><code>REALTIME_PAYMENT_IS_NOT_SUPPORTED</code></td><td>The merchant does not support virtual bank accounts or virtual cards. Alternatively, enable virtual bank accounts or virtual cards in the client configuration.</td></tr>\n<tr><td><code>REALTIME_PAYMENT_RAIL_IS_NOT_SUPPORTED</code></td><td>The merchant does not support real time payments.</td></tr>\n<tr><td><code>SECURITY_IMAGE</code></td><td>Cannot link: create security image</td></tr>\n<tr><td><code>SECURITY_PHRASE</code></td><td>Cannot link: set up security phrase</td></tr>\n<tr><td><code>SECURITY_QUESTIONS</code></td><td>Cannot link: add security questions</td></tr>\n<tr><td><code>SECURITY_UPDATE</code></td><td>Cannot link: set up automatic alerts</td></tr>\n<tr><td><code>SEND_ON_DATE_BEFORE_TODAY</code></td><td>The payment sendOnDate: ${send_on_date}cannot be before today: ${today}.</td></tr>\n<tr><td><code>SEND_ON_DATE_MISSING</code></td><td>The send on date must be provided.</td></tr>\n<tr><td><code>SERVICE_AUTOMATIC_AT_BANK</code></td><td>The user's ${payee_name}payee account is set up to be paid automatically through the user's bank. We are not able to accept a payment at this time</td></tr>\n<tr><td><code>SERVICE_AUTOMATIC</code></td><td>Autopay is configured for the account at the ${payee_name} payee.</td></tr>\n<tr><td><code>SITE_DECOMMISSIONED</code></td><td>The online merchant payment portal is not longer available.</td></tr>\n<tr><td><code>SUBSCRIPTION_BASED_MERCHANT</code></td><td>Payments to subscription based merchants are not supported.</td></tr>\n<tr><td><code>SUPERSEDED_BY_MUTUALLY_EXCLUSIVE_RAIL</code></td><td>This payment rail is superseded by a mutually exclusive payment rail.</td></tr>\n<tr><td><code>TEMPORARILY_DISABLED</code></td><td>Account briefly disabled. Try again later.</td></tr>\n<tr><td><code>TURNED_OFF</code></td><td>Enable the payment rail in the client configuration.</td></tr>\n<tr><td><code>UNAUTHORIZED</code></td><td>Cannot link: unauthorized</td></tr>\n<tr><td><code>USERNAME_UPDATE</code></td><td>Cannot link: update phone number</td></tr>\n<tr><td><code>VALID_EBN_PAYEE_ACCOUNT_NUMBER</code></td><td>Ask the user to verify that the account number on the payee account remittance is correct.</td></tr>\n<tr><td><code>VALID_LINKING_DATUMS</code></td><td>Ask the user to correct the provided datums associated with the payee.</td></tr>\n<tr><td><code>VIRTUAL_CARD_CONSENT</code></td><td>Ask the user to accept the virtual card consent terms.</td></tr>\n<tr><td><code>WEEKEND_DELIVER_BY_DATE</code></td><td>Payment cannot be delivered on weekends.</td></tr>\n<tr><td><code>WEEKEND_SEND_ON_DATE</code></td><td>Payment cannot be sent on weekends.</td></tr>\n</tbody>\n</table>\n",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/ExtendedStatus"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The general method used to process the payment.",
            "example" : "REALTIME",
            "enum" : [ "REALTIME", "EBN", "CHECK", "ACH" ]
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date that the payment funds will be deducted from the payer's account.",
            "format" : "date",
            "readOnly" : true
          },
          "deliverByDate" : {
            "type" : "string",
            "description" : "The date that the payment funds will be received by the payee.",
            "format" : "date",
            "readOnly" : true
          },
          "flatFee" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "percentageFee" : {
            "type" : "string",
            "description" : "The percentage value of the payment amount that will be charged as a payment fee."
          }
        },
        "description" : "Contains information indicating when the `Payment` for a specific payment rail."
      },
      "RecurringSchedule" : {
        "required" : [ "created", "holidaySchedulingStrategy", "id", "payeeAccountLink", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `RecurringSchedule`.",
            "readOnly" : true,
            "example" : "recsched_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `RecurringSchedule`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `RecurringSchedule` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `RecurringSchedule` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "partnerScheduleId" : {
            "type" : "string",
            "description" : "The partner identifier for a `RecurringSchedule` that allows a partner to retrieve the associated `RecurringSchedule`."
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of a `RecurringSchedule`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "TERMINATED", "COMPLETE" ]
          },
          "calendarBased" : {
            "$ref" : "#/components/schemas/CalendarBased"
          },
          "billBased" : {
            "$ref" : "#/components/schemas/BillBased"
          },
          "holidaySchedulingStrategy" : {
            "type" : "string",
            "description" : "In the event that a `Bill` due date or the next date in a `RecurringSchedule` falls on a non-banking day, this property determines if the `Bill` is paid on the next soonest business day (`PAY_EARLY`) or if it is paid on the next business day after the intended date (`PAY_LATE`).",
            "readOnly" : true,
            "default" : "PAY_EARLY",
            "enum" : [ "PAY_EARLY", "PAY_LATE" ]
          },
          "notifications" : {
            "$ref" : "#/components/schemas/ScheduleNotifications"
          },
          "endingSetting" : {
            "$ref" : "#/components/schemas/ScheduleEnding"
          },
          "lastPayment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "nextPayment" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "payeeAccountSummary" : {
            "$ref" : "#/components/schemas/PayeeAccountSummary"
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "payeeAccountId" : {
            "type" : "string"
          },
          "ofxToken" : {
            "type" : "string",
            "description" : "OFX token",
            "readOnly" : true,
            "example" : "R1EOD39I5V"
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          }
        },
        "description" : "Returns the configuration details for a `RecurringSchedule`.",
        "readOnly" : true
      },
      "RemittanceAddress" : {
        "required" : [ "addressLine1", "city", "origin", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Address`",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Address`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Has the address been verified for KYC compliance.",
            "readOnly" : true,
            "default" : false
          },
          "defaultAddress" : {
            "type" : "boolean",
            "description" : "Is this the default address.",
            "readOnly" : true,
            "default" : false
          },
          "origin" : {
            "type" : "string",
            "description" : "Indicates the source of the `RemittanceAddress`.",
            "example" : "SYSTEM_PROVIDED",
            "enum" : [ "USER_PROVIDED", "USER_PROVIDED_VALIDATED", "SYSTEM_PROVIDED" ]
          }
        },
        "description" : "Contains the remittance information for the `PayeeAccount`."
      },
      "ResourceLink" : {
        "required" : [ "expiration", "resourceUrl" ],
        "type" : "object",
        "properties" : {
          "resourceUrl" : {
            "type" : "string",
            "description" : "Indicates the URL to retrieve the resource from.",
            "readOnly" : true
          },
          "expiration" : {
            "type" : "string",
            "description" : "Indicates when the resource is no longer available for retrieval.",
            "format" : "date-time",
            "readOnly" : true
          }
        },
        "description" : "Provides resource retrieval information for resources available for download throughout the API."
      },
      "ScheduleEnding" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The available types of `ScheduleEndings`.",
            "example" : "END_DATE",
            "enum" : [ "NUMBER", "USER_STOPPED", "END_DATE", "NO_END_DATE" ]
          },
          "numberOfPayments" : {
            "type" : "integer",
            "description" : "The maximum number of `Payments` to make for the `RecurringSchedule`.",
            "format" : "int32"
          },
          "userEndedTimestamp" : {
            "type" : "string",
            "description" : "The timestamp at which the user canceled the `RecurringSchedule`.",
            "format" : "date-time"
          },
          "endDateInclusive" : {
            "type" : "string",
            "description" : "The date to stop making `Payments` for the `RecurringSchedule`. `Payments` will be made on this date, but not after.",
            "format" : "date"
          },
          "paymentsRemaining" : {
            "type" : "integer",
            "description" : "The number of `Payments` remaining in the `RecurringSchedule`.",
            "format" : "int32"
          },
          "paymentsMade" : {
            "type" : "integer",
            "description" : "The number of `Payments` made since the start of the `RecurringSchedule`.",
            "format" : "int32"
          }
        },
        "description" : "Determines when `Payments` associated with a `RecurringSchedule` should be stopped."
      },
      "ScheduleNotifications" : {
        "required" : [ "beforeSendingLastPayment", "paymentSent", "pendingPayment" ],
        "type" : "object",
        "properties" : {
          "pendingPayment" : {
            "type" : "boolean",
            "description" : "User is notified before a `Payment` is sent."
          },
          "paymentSent" : {
            "type" : "boolean",
            "description" : "User is notified when a `Payment` is sent."
          },
          "beforeSendingLastPayment" : {
            "type" : "boolean",
            "description" : "User is notified before the last `Payment` is sent."
          }
        },
        "description" : "Determines what type of `Payment` notification events are sent to the user."
      },
      "WeeklySchedule" : {
        "required" : [ "dayOfWeekToRecurOn", "repeatEveryXWeeks" ],
        "type" : "object",
        "properties" : {
          "repeatEveryXWeeks" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The weekly frequency at which to make a `Payment`. If the user specifies the value 1 for `repeatEveryXWeeks`, the `Payment` is made every week.  If the user specifies 2 for `repeatEveryXWeeks` the `Payment` is made every other week.",
            "format" : "int32",
            "example" : 2
          },
          "dayOfWeekToRecurOn" : {
            "type" : "array",
            "description" : "The days of the week on which a `Payment` is made.",
            "example" : "THURSDAY",
            "items" : {
              "type" : "string",
              "description" : "The days of the week on which a `Payment` is made.",
              "example" : "THURSDAY",
              "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
            }
          }
        },
        "description" : "Determines when `Payments` are made for the associated `PayeeAccount`."
      },
      "MerchantLogo" : {
        "type" : "object",
        "properties" : {
          "imageType" : {
            "type" : "string",
            "description" : "The style of Logo associated with a Merchant",
            "example" : "ACCENT",
            "enum" : [ "ACCENT", "ACCENTONPRIMARY", "DARKONWHITE", "ICON", "DEFAULT", "LEGACY" ]
          },
          "fallback" : {
            "type" : "boolean",
            "description" : "Request to get a category logo back if the `Merchant` logo does not exist. Defaults true.",
            "default" : true
          },
          "logoBoundWidth" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Resizes the image width to the requested width if the requested width is smaller than the original image size.",
            "format" : "int32"
          },
          "logoBoundHeight" : {
            "maximum" : 2000,
            "type" : "integer",
            "description" : "Resizes the image height to the requested height if the requested height is smaller  than the original image size.",
            "format" : "int32"
          },
          "keepAspectRatio" : {
            "type" : "boolean",
            "description" : "Resizes to match the images original aspect ratio if it does not match the bound dimension aspect ratio requested. Defaults to true. If set to false, the image may stretch to match both bounds. If set to true, the image may resize a dimension smaller than the requested bound"
          },
          "resizingRequested" : {
            "type" : "boolean"
          }
        },
        "description" : "Optional payload to customize `Merchant` suggestions. One or all of the object values can be populated."
      },
      "ManualDatumResponse" : {
        "required" : [ "datumId", "responseToken" ],
        "type" : "object",
        "properties" : {
          "datumId" : {
            "type" : "string",
            "description" : "The identifier that uniquely identifies a `ManualDatumResponse` within a set of `ManualDatumResponses`."
          },
          "responseToken" : {
            "type" : "string",
            "description" : "The value that was provided by the user as `ManualDatumResponse's` value.",
            "example" : "dr_AR234LJAERAW..."
          }
        },
        "description" : "The value, provided by the user, of the required `Datum`."
      },
      "PayeeAccountRemittanceAccountRequest" : {
        "required" : [ "bankAccountNumber", "payeeAccountType", "routingNumber" ],
        "type" : "object",
        "properties" : {
          "bankAccountNumber" : {
            "pattern" : "\\d+",
            "type" : "string",
            "description" : "The account to account payee account number."
          },
          "routingNumber" : {
            "pattern" : "[0-9]{9}",
            "type" : "string",
            "description" : "The account to account payee routing number."
          },
          "payeeAccountType" : {
            "type" : "string",
            "description" : "The bank account type.",
            "enum" : [ "CHECKING", "SAVINGS", "LOAN" ]
          },
          "merchantRemittanceLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `PayeeAccount` should be associated with. Location ids are retrieved from the merchant directory. For non OFX client, a `remittanceAddress` or a `merchantRemittanceLocationId` should be provided, not both. For OFX client, both could be provided."
          },
          "remittanceAddress" : {
            "$ref" : "#/components/schemas/RemittanceAddressRequest"
          },
          "merchantPhoneNumber" : {
            "pattern" : "^\\+(?:[0-9] ?){6,14}[0-9]$",
            "type" : "string",
            "description" : "The merchant phone number formatted according to ITU-T E.164 and E.123 (without '~') standards.",
            "example" : "+1 415 123 1234"
          }
        },
        "description" : "Account Payee is used to provide data required for account to account payments."
      },
      "PayeeAccountRemittanceRequest" : {
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string"
          },
          "merchantRemittanceLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `PayeeAccount` should be associated with. Location ids are retrieved from the merchant directory. For non OFX client, a `remittanceAddress` or a `merchantRemittanceLocationId` should be provided, not both. For OFX client, both could be provided."
          },
          "remittanceAddress" : {
            "$ref" : "#/components/schemas/RemittanceAddressRequest"
          },
          "merchantPhoneNumber" : {
            "pattern" : "^\\+(?:[0-9] ?){6,14}[0-9]$",
            "type" : "string",
            "description" : "The merchant phone number formatted according to ITU-T E.164 and E.123 (without '~') standards.",
            "example" : "+1 415 123 1234"
          },
          "nameOnAccount" : {
            "$ref" : "#/components/schemas/Name"
          }
        },
        "description" : "Provides the remittance information needed to make the `Payment` for the `PayeeAccount`. If the request is for a check only payee, only the remittanceAddress or merchantRemittanceLocationId and the nameOnAccount fields are required. Manual and linked payees require nameOnAccount, manualDatumResponses, accountNumber, and either the merchantRemittanceLocationid or remittanceAddress fields."
      },
      "PayeeAccountRequest" : {
        "required" : [ "name", "payeeId" ],
        "type" : "object",
        "properties" : {
          "established" : {
            "type" : "string",
            "description" : "The timestamp when the `PayeeAccount` was established. Indicates when a converged `PayeeAccount` was originally created. If the `established` property is not provided then the `established` property receives the current timestamp.",
            "format" : "date-time",
            "example" : "2018-10-14T16:21:00Z"
          },
          "name" : {
            "type" : "string",
            "description" : "The `PayeeAccount` name.",
            "example" : "Ford F150 Insurance"
          },
          "accountRemittanceRequest" : {
            "$ref" : "#/components/schemas/PayeeAccountRemittanceRequest"
          },
          "paymentInfoRequest" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "payerAddressId" : {
            "type" : "string",
            "description" : "Id of an address from the `User`'s profile that should match the address on file for the `User`'s account with the `Payee`."
          },
          "payeeId" : {
            "type" : "string",
            "description" : "The identifier of the `Payee` to associate the newly created `PayeeAccount` with."
          },
          "accountToAccountPayeeRequest" : {
            "$ref" : "#/components/schemas/PayeeAccountRemittanceAccountRequest"
          },
          "manualDatumResponses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ManualDatumResponse"
            }
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The `integrationId` for the `ManualInstructions` selected by the user."
          },
          "bestAvailableOnly" : {
            "type" : "boolean",
            "description" : "After the `PayeeAccount` is created return only the best available `PaymentConstraint`.",
            "deprecated" : true
          },
          "latestPayment" : {
            "type" : "boolean",
            "description" : "After the `PayeeAccount` is created return the latest payment instead of the latest successful payment.",
            "deprecated" : true
          }
        },
        "description" : "Represents a request to add and associate a `PayeeAccount` with a `Payee`."
      },
      "PaymentInfoRequest" : {
        "type" : "object",
        "properties" : {
          "fundingAccountId" : {
            "type" : "string",
            "description" : "The identifier of the `FundingAccount` from which the user wants to fund the `Payment`. When neither `fundingAccountId` nor `customerFundingAccountId` is specified, then the `fundingAccountId` of the currently designated default `FundingAccount` is used."
          },
          "partnerFundingAccountId" : {
            "type" : "string",
            "description" : "The identifier to use when referencing the `FundingAccount` with the partner."
          },
          "fundingAccountRequest" : {
            "$ref" : "#/components/schemas/FundingAccountRequest"
          },
          "customerFundingAccountId" : {
            "type" : "string",
            "description" : "The identifier of the `CustomerFundingAccount` from which the user wants to fund the `Payment`. If neither `fundingAccountId` or `customerFundingAccountId` are specified, then the `fundingAccountId` of the currently designated default `FundingAccount` is used."
          },
          "customerFundingAccountRequest" : {
            "$ref" : "#/components/schemas/CustomerFundingAccountRequest"
          }
        },
        "description" : "Information about when to make the `Payment` and whether or not to use the supplied `FundingAccount` or the supplied `CustomerFundingAccount` or the default `FundingAccount`."
      },
      "RemittanceAddressRequest" : {
        "required" : [ "addressLine1", "city", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          }
        },
        "description" : "Contains the remittance address for a `PayeeAccount`."
      },
      "PayeeAccountPage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/PayeeAccount"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for payee accounts."
      },
      "payee_account_ofx_sync" : {
        "required" : [ "ACTCODE", "ADDR1", "ADDR2", "ADDR3", "CITY", "COUNTRY", "NAME", "PAYEEACCT", "PAYEEID", "PAYEELSTID", "PAYEENAME", "PHONE", "POSTALCODE", "STATE", "TOKEN", "TRNUID" ],
        "type" : "object",
        "properties" : {
          "TOKEN" : {
            "type" : "string",
            "description" : "The OFX token.",
            "readOnly" : true,
            "example" : "B1F3AUSKBE"
          },
          "TRNUID" : {
            "type" : "string",
            "description" : "The OFX client-assigned transaction UID.",
            "readOnly" : true,
            "example" : "0"
          },
          "ACTCODE" : {
            "type" : "string",
            "description" : "The operation type.",
            "readOnly" : true,
            "example" : "ADD",
            "enum" : [ "ADD", "MOD", "DEL" ]
          },
          "PAYEELSTID" : {
            "type" : "string",
            "description" : "The `PayeeAccount` id.",
            "readOnly" : true,
            "example" : "DDmx05Rhf7yc"
          },
          "PAYEEACCT" : {
            "type" : "string",
            "description" : "The `PayeeAccount` number.",
            "readOnly" : true,
            "example" : "CEZAPD-123-456-789"
          },
          "NAME" : {
            "type" : "string",
            "description" : "The `Payee Account`name.",
            "readOnly" : true,
            "example" : "GEICO Insurance Company"
          },
          "PAYEEID" : {
            "type" : "string",
            "description" : "The `PayeeId`.",
            "readOnly" : true,
            "example" : "payee_b496e068-837b-4e56-97ea-e1207649560e"
          },
          "PAYEENAME" : {
            "type" : "string",
            "description" : "The `Payee` name.",
            "readOnly" : true,
            "example" : "Acme Insurance Co"
          },
          "ADDR1" : {
            "type" : "string",
            "description" : "The address line 1 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "123 Main Street"
          },
          "ADDR2" : {
            "type" : "string",
            "description" : "The address line 2 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Suite 100"
          },
          "ADDR3" : {
            "type" : "string",
            "description" : "The address line 3 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Room 100"
          },
          "CITY" : {
            "type" : "string",
            "description" : "The city of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Denver"
          },
          "STATE" : {
            "type" : "string",
            "description" : "The state of the `Payee Account`.",
            "readOnly" : true,
            "example" : "CO"
          },
          "POSTALCODE" : {
            "type" : "string",
            "description" : "The postal code of the `Payee Account`.",
            "readOnly" : true,
            "example" : "80205"
          },
          "COUNTRY" : {
            "type" : "string",
            "description" : "The country code of the `Payee Account`.",
            "readOnly" : true,
            "example" : "US"
          },
          "PHONE" : {
            "type" : "string",
            "description" : "The telephone number of the `Payee Account`. Formatted to ITU-T E.164 and E.123 (without '~') standards.",
            "readOnly" : true,
            "example" : "US"
          }
        },
        "description" : "The `PayeeAccount` associated with the sync request.",
        "readOnly" : true,
        "xml" : {
          "name" : "payee_account_ofx_sync"
        }
      },
      "payee_accounts_ofx_sync" : {
        "type" : "object",
        "properties" : {
          "payee_accounts_ofx_sync" : {
            "type" : "array",
            "description" : "The list of `PayeeAccount`.",
            "readOnly" : true,
            "xml" : {
              "name" : "payee_account_ofx_sync"
            },
            "items" : {
              "$ref" : "#/components/schemas/payee_account_ofx_sync"
            }
          }
        },
        "description" : "The results of a `PayeeAccount` ofx sync request.",
        "xml" : {
          "name" : "payee_accounts_ofx_sync"
        }
      },
      "PayeeAccountRemittanceAccountUpdate" : {
        "type" : "object",
        "properties" : {
          "bankAccountNumber" : {
            "pattern" : "\\d+",
            "type" : "string",
            "description" : "The account to account payee account number."
          },
          "routingNumber" : {
            "pattern" : "[0-9]{9}",
            "type" : "string",
            "description" : "The account to account payee routing number."
          },
          "payeeAccountType" : {
            "type" : "string",
            "description" : "The bank account type.",
            "enum" : [ "CHECKING", "SAVINGS", "LOAN" ]
          },
          "remittanceAddress" : {
            "$ref" : "#/components/schemas/RemittanceAddressRequest"
          },
          "merchantRemittanceLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `PayeeAccount` should be associated with. Location ids are retrieved from the merchant directory. A `remittanceAddress` or a `merchantRemittanceLocationId` should be provided, not both."
          },
          "merchantPhoneNumber" : {
            "pattern" : "^\\+(?:[0-9] ?){6,14}[0-9]$",
            "type" : "string",
            "description" : "The merchant phone number formatted according to ITU-T E.164 and E.123 (without '~') standards.",
            "example" : "+1 415 123 1234"
          }
        },
        "description" : "Updates data for account to account payments."
      },
      "PayeeAccountRemittanceUpdate" : {
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string"
          },
          "accountNumberOrigin" : {
            "type" : "string",
            "description" : "Indicates the source of the `AccountNumber`.",
            "example" : "USER_PROVIDED",
            "enum" : [ "USER_PROVIDED", "SYSTEM_PROVIDED", "CSR_PROVIDED" ]
          },
          "remittanceAddress" : {
            "$ref" : "#/components/schemas/RemittanceAddressRequest"
          },
          "merchantRemittanceLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `PayeeAccount` should be associated with. Location ids are retrieved from the merchant directory. A `remittanceAddress` or a `merchantRemittanceLocationId` should be provided, not both."
          },
          "merchantPhoneNumber" : {
            "pattern" : "^\\+(?:[0-9] ?){6,14}[0-9]$",
            "type" : "string",
            "description" : "The merchant phone number formatted according to ITU-T E.164 and E.123 (without '~') standards.",
            "example" : "+1 415 123 1234"
          },
          "nameOnAccount" : {
            "$ref" : "#/components/schemas/Name"
          }
        },
        "description" : "Represents a request to update a `PayeeAccountRemittance`."
      },
      "PayeeAccountUpdate" : {
        "type" : "object",
        "properties" : {
          "hidden" : {
            "type" : "boolean",
            "description" : "Indicates if the user wants the `PayeeAccount` displayed in the UI."
          },
          "billStatus" : {
            "type" : "string",
            "enum" : [ "UNPAID", "PAID_EXTERNAL", "SKIPPED" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The `PayeeAccount` name.",
            "example" : "State Farm"
          },
          "payerAddressId" : {
            "type" : "string",
            "description" : "Id of an address from the `User`'s profile that should match the address on file for the `User`'s account with the `Payee`."
          },
          "payeeAccountRemittance" : {
            "$ref" : "#/components/schemas/PayeeAccountRemittanceUpdate"
          },
          "payeeAccountRemittanceAccount" : {
            "$ref" : "#/components/schemas/PayeeAccountRemittanceAccountUpdate"
          },
          "paymentInfo" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "manualDatumResponses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ManualDatumResponse"
            }
          },
          "bestAvailableOnly" : {
            "type" : "boolean",
            "description" : "After the `PayeeAccount` is updated return only the best available `PaymentConstraint`.",
            "deprecated" : true
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The `integrationId` for the `ManualInstructions` selected by the user."
          },
          "latestPayment" : {
            "type" : "boolean",
            "description" : "After the `PayeeAccount` is updated return the latest payment instead of the latest successful payment.",
            "deprecated" : true
          }
        },
        "description" : "Represents a request to update a `PayeeAccount`."
      },
      "Payee" : {
        "required" : [ "created", "id", "linkStatus", "name", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Payee`.",
            "readOnly" : true,
            "example" : "p_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Payee`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Payee` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Payee` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Represents the status of the `Payee`. `ACTIVE` is a `Payee` in good standing. `PENDING` payees are in the process of being set up. `ARCHIVED` payees should not be shown to the user.",
            "readOnly" : true,
            "example" : "ARCHIVED",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the `Payee` provided by the user or the `Merchant` name if not provided by the user.",
            "readOnly" : true
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the `Payee` provided by the user.",
            "readOnly" : true
          },
          "merchantPhoneNumber" : {
            "type" : "string",
            "readOnly" : true
          },
          "naicsCodes" : {
            "type" : "array",
            "description" : "The list of North American Industry Classification System codes for the `Merchant`",
            "readOnly" : true,
            "items" : {
              "type" : "string",
              "description" : "The list of North American Industry Classification System codes for the `Merchant`",
              "readOnly" : true
            }
          },
          "linkData" : {
            "$ref" : "#/components/schemas/LinkData"
          },
          "notice" : {
            "type" : "string",
            "description" : "A message providing additional information about the `Payee`.",
            "readOnly" : true
          },
          "shortNotice" : {
            "type" : "string",
            "description" : "A short message providing additional information about the `Payee`.",
            "readOnly" : true
          },
          "accounts" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/PayeeAccount"
            }
          },
          "merchantLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "merchantDirectoryId" : {
            "type" : "string",
            "description" : "The identifier of the `Merchant` associated with the `Payee`.",
            "readOnly" : true
          },
          "merchantLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `Payee` should be associated with. Location ids are retrieved from the merchant directory."
          },
          "merchantAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "trusted" : {
            "type" : "boolean",
            "description" : "Is the `Payee` trusted."
          },
          "linkStatus" : {
            "type" : "string",
            "description" : "Indicates the linking status of the `Payee`. `LINKABLE` indicates the `Payee` can be linked, but there is currently no attempt to link the `Payee`. `NOT_LINKABLE` indicates the `Payee` does not support linking. `LINKED` indicates the `Payee` has been linked. Other statuses are indicators of the status of an in progress link attempt. Please see the documentation on linking `Payee`s for further information.",
            "example" : "DATUMS_VALID",
            "enum" : [ "LINKING", "LINKING_DATUMS_VERIFIED", "DATUMS_INVALID", "DATUMS_MISSING", "LOCKED", "CLOSED", "LINKED", "OUTAGE", "PENDING", "DATUMS_VALID", "LINKABLE", "NOT_LINKABLE", "DEPRECATED", "NONE" ]
          },
          "payerAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "isNew" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The `integrationId` for the `LinkingInstructions` selected by the user.",
            "readOnly" : true
          },
          "migratedMerchantId" : {
            "type" : "string",
            "description" : "The id that the existing merchant has been migrated to. The `Payee` that was associated with the previous merchant id is now deprecated and a new `Payee` should be created.",
            "readOnly" : true
          },
          "lastRefresh" : {
            "type" : "string",
            "description" : "The timestamp when the `Payee` was last refreshed with data from the linking service. This timestamp will be updated every time the linking service is checked for new `Payee`, `Payee Account`, and `Bill` data regardless of whether or not new data was discovered. For the timestamp when the `Payee`, Payee Account`, and `Bill` were updated from the `Merchant` see the `Payee` `LinkData`.`LastSync`",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          }
        },
        "description" : "`Users` can have more than one `Payee`. A payee represents a merchant that the user has configured for payment. A `PayeeAccount` represents the billing account at the `Merchant` that the `User` has linked. It is possible for a `Payee` to have more than one `PayeeAccount`. A common example is credit card companies. If a user links the `CapitalOne` merchant, there may be multiple credit card accounts associated with that `Payee`.",
        "readOnly" : true
      },
      "LinkDatumResponse" : {
        "required" : [ "datumId", "responseToken" ],
        "type" : "object",
        "properties" : {
          "datumId" : {
            "type" : "string",
            "description" : "The id of the `Datum` provided from the list of required datums."
          },
          "responseToken" : {
            "type" : "string",
            "description" : "The value provided by the user for the `Datum`."
          }
        },
        "description" : "The value, provided by the user, of the required `Datum`."
      },
      "PayeeRequest" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the `Payee` provided by the `User`, if not provided then the `Merchant` name."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the `Payee` provided by the user.",
            "readOnly" : true
          },
          "merchantPhoneNumber" : {
            "pattern" : "^\\+(?:[0-9] ?){6,14}[0-9]$",
            "type" : "string"
          },
          "merchantId" : {
            "type" : "string",
            "description" : "The unique identifier of the `Merchant` selected by the user."
          },
          "merchantLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `Payee` should be associated with. Location ids are retrieved from the merchant directory. A `merchantLocationId` or a `merchantAddress` can be provided, but not both."
          },
          "merchantAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The `integrationId` for the `LinkingInstructions` selected by the user."
          },
          "linkDatumResponses" : {
            "type" : "array",
            "description" : "Provides the set of values for the set of required `Datums` needed to link the `Merchant` selected by the `User`. The set of required `Datums` is provided by the `LinkingInstructions` in the `Merchant`.",
            "items" : {
              "$ref" : "#/components/schemas/LinkDatumResponse"
            }
          },
          "payerAddressId" : {
            "type" : "string",
            "description" : "Id of an address from the `User`'s profile that should match the address on file for the `User`'s account with the `Payee`."
          },
          "bestAvailableOnly" : {
            "type" : "boolean",
            "description" : "After the `Payee` is created return only the best available `PaymentConstraint` for each associated `PayeeAccount`.",
            "deprecated" : true
          }
        },
        "description" : "Provides information needed to add and associate the `Payee` with the `User`."
      },
      "PayeePage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Payee"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for payees."
      },
      "PayeeUpdateRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the `Payee` provided by the `User`, if not provided then the `Merchant` name."
          },
          "merchantPhoneNumber" : {
            "pattern" : "^\\+(?:[0-9] ?){6,14}[0-9]$",
            "type" : "string"
          },
          "linkDatumResponses" : {
            "type" : "array",
            "description" : "Provides the set of values for the set of required `Datums` needed to link the `Merchant` selected by the `User`. The set of required `Datums` is provided by the `LinkingInstructions` in the `Merchant`.",
            "items" : {
              "$ref" : "#/components/schemas/LinkDatumResponse"
            }
          },
          "merchantLocationId" : {
            "type" : "string",
            "description" : "The `Merchant`'s location that the `Payee` should be associated with. Location ids are retrieved from the merchant directory. A `merchantLocationId` or a `merchantAddress` should be provided, not both."
          },
          "merchantAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "payerAddressId" : {
            "type" : "string",
            "description" : "Id of an address from the `User`'s profile that should match the address on file for the `User`'s account with the `Payee`."
          },
          "unlinkPayee" : {
            "type" : "boolean",
            "description" : "If true, the `Payee` will be unlinked. This will also disable bill syncing."
          },
          "bestAvailableOnly" : {
            "type" : "boolean",
            "description" : "After the `Payee` is updated return only the best available `PaymentConstraint` for each associated `PayeeAccount`.",
            "deprecated" : true
          },
          "integrationId" : {
            "type" : "string",
            "description" : "The `integrationId` for the `LinkingInstructions` selected by the user."
          },
          "latestPayment" : {
            "type" : "boolean",
            "description" : "After the `Payee` is updated return the latest payment instead of the latest successful payment for each `PayeeAccount`.",
            "deprecated" : true
          }
        },
        "description" : "Provides information needed to add and associate the `Payee` with the `User`."
      },
      "PaymentRequest" : {
        "required" : [ "payeeAccountId", "paymentAmount" ],
        "type" : "object",
        "properties" : {
          "partnerId" : {
            "type" : "string",
            "description" : "The unique client identifier associated with the `Payment` to ensure that the `Payment` is not made more than once."
          },
          "payNow" : {
            "type" : "boolean",
            "description" : "Prioritize the `Payment` when set to true. Either `payNow` or `sendOnDate` should be provided. Additionally, the `feeAllowance` field should be left empty."
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date the `Payment` will be sent to the merchant. Either `sendOnDate` or `payNow` should be provided.",
            "format" : "date",
            "example" : "2017-01-01"
          },
          "feeAllowance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "memo" : {
            "maxLength" : 50,
            "minLength" : 0,
            "type" : "string",
            "description" : "A note provided by the user describing what the `Payment` is for. The `memo` will be added to the check if the `Payment` is made with a check."
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Additional attributes of the `Payment`",
            "items" : {
              "$ref" : "#/components/schemas/PaymentAttribute"
            }
          },
          "paymentInfoRequest" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "payeeAccountId" : {
            "type" : "string",
            "description" : "The `PayeeAccount` identifier that the `Payment` is for."
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          }
        },
        "description" : "Provides information to the application for making a payment for the `PayeeAccount`."
      },
      "PaymentPage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Payment"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for payments."
      },
      "payment_ofx_sync" : {
        "required" : [ "ACTCODE", "ADDR1", "ADDR2", "ADDR3", "AMT", "CANPEND", "CHECKMEMO", "CITY", "COUNTRY", "DTSTATUS", "FUNDINGACCT", "MODPEND", "NAME", "PAYEEACCT", "PAYEEID", "PAYEELSTID", "PAYEENAME", "PHONE", "POSTALCODE", "RELEASEDT", "SSTATUSCD", "STATE", "TOKEN", "TRACE", "TRNUID" ],
        "type" : "object",
        "properties" : {
          "TOKEN" : {
            "type" : "string",
            "description" : "The OFX token.",
            "readOnly" : true,
            "example" : "B1F3AUSKBE"
          },
          "TRNUID" : {
            "type" : "string",
            "description" : "The OFX client-assigned transaction UID.",
            "readOnly" : true,
            "example" : "0"
          },
          "ACTCODE" : {
            "type" : "string",
            "description" : "The operation type.",
            "readOnly" : true,
            "example" : "PAYEERQ",
            "enum" : [ "PAYEEDELRQ", "PAYEEMODRQ", "PAYEERQ" ]
          },
          "TRACE" : {
            "type" : "string",
            "description" : "The `PaymentId`.",
            "readOnly" : true,
            "example" : "pymt_00390448-2540-46c8-878f-b052e2fe4ca0"
          },
          "RELEASEDT" : {
            "type" : "string",
            "description" : "The send-on or effective date.",
            "readOnly" : true,
            "example" : "2020-10-01"
          },
          "CHECKMEMO" : {
            "type" : "string",
            "description" : "The `PaymentResult` check memo.",
            "readOnly" : true,
            "example" : "Paid in full"
          },
          "SSTATUSCD" : {
            "type" : "string",
            "description" : "The status of the `Payment`.",
            "readOnly" : true,
            "example" : "WILLPROCESSON",
            "enum" : [ "WILLPROCESSON", "PROCESSEDON", "NOFUNDSON", "CANCELEDON" ]
          },
          "DTSTATUS" : {
            "type" : "string",
            "description" : "The effective date.",
            "readOnly" : true,
            "example" : "2020-10-01"
          },
          "AMT" : {
            "type" : "string",
            "description" : "The amount paid.",
            "readOnly" : true,
            "example" : "100.0"
          },
          "FUNDINGACCT" : {
            "type" : "string",
            "description" : "The partner's `FundingAccountId`.",
            "readOnly" : true,
            "example" : "09ceb847-6c31-4916-b3c4-d91ef5c3f95a"
          },
          "MODPEND" : {
            "type" : "string",
            "description" : "The mod pending flag.",
            "readOnly" : true,
            "example" : "Y",
            "enum" : [ "Y", "N" ]
          },
          "CANPEND" : {
            "type" : "string",
            "description" : "The cancel pending flag.",
            "readOnly" : true,
            "example" : "Y",
            "enum" : [ "Y", "N" ]
          },
          "PAYEELSTID" : {
            "type" : "string",
            "description" : "The `PayeeAccount` id.",
            "readOnly" : true,
            "example" : "DDmx05Rhf7yc"
          },
          "PAYEEACCT" : {
            "type" : "string",
            "description" : "The `PayeeAccount` number.",
            "readOnly" : true,
            "example" : "CEZAPD-123-456-789"
          },
          "NAME" : {
            "type" : "string",
            "description" : "The `Payee Account`name.",
            "readOnly" : true,
            "example" : "GEICO Insurance Company"
          },
          "PAYEEID" : {
            "type" : "string",
            "description" : "The `PayeeId`.",
            "readOnly" : true,
            "example" : "payee_b496e068-837b-4e56-97ea-e1207649560e"
          },
          "PAYEENAME" : {
            "type" : "string",
            "description" : "The `Payee` name.",
            "readOnly" : true,
            "example" : "Acme Insurance Co"
          },
          "ADDR1" : {
            "type" : "string",
            "description" : "The address line 1 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "123 Main Street"
          },
          "ADDR2" : {
            "type" : "string",
            "description" : "The address line 2 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Suite 100"
          },
          "ADDR3" : {
            "type" : "string",
            "description" : "The address line 3 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Room 100"
          },
          "CITY" : {
            "type" : "string",
            "description" : "The city of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Denver"
          },
          "STATE" : {
            "type" : "string",
            "description" : "The state of the `Payee Account`.",
            "readOnly" : true,
            "example" : "CO"
          },
          "POSTALCODE" : {
            "type" : "string",
            "description" : "The postal code of the `Payee Account`.",
            "readOnly" : true,
            "example" : "80205"
          },
          "COUNTRY" : {
            "type" : "string",
            "description" : "The country code of the `Payee Account`.",
            "readOnly" : true,
            "example" : "US"
          },
          "PHONE" : {
            "type" : "string",
            "description" : "The telephone number of the `Payee Account`. Formatted to ITU-T E.164 and E.123 (without '~') standards.",
            "readOnly" : true,
            "example" : "US"
          }
        },
        "description" : "The `Payment` associated with the sync request.",
        "readOnly" : true,
        "xml" : {
          "name" : "payment_ofx_sync"
        }
      },
      "payments_ofx_sync" : {
        "type" : "object",
        "properties" : {
          "payments_ofx_sync" : {
            "type" : "array",
            "description" : "The list of `Payment`.",
            "readOnly" : true,
            "xml" : {
              "name" : "payment_ofx_sync"
            },
            "items" : {
              "$ref" : "#/components/schemas/payment_ofx_sync"
            }
          }
        },
        "description" : "The results of a `Payment` ofx sync request.",
        "xml" : {
          "name" : "payments_ofx_sync"
        }
      },
      "PaymentReview" : {
        "required" : [ "originationType", "payeeAccountLink", "sendOnDate" ],
        "type" : "object",
        "properties" : {
          "originationType" : {
            "type" : "string",
            "description" : "Indicates how the `Payment` was generated. This has implications on the mutability of the `Payment`.",
            "example" : "ONE_TIME_PAYMENT",
            "enum" : [ "RECURRENCE_SCHEDULE_PAYMENT", "ONE_TIME_PAYMENT" ]
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The unique client idempotency identifier associated with the `Payment` to ensure that the `Payment` is not made more than once."
          },
          "payNow" : {
            "type" : "boolean",
            "description" : "This directs the system to prioritize the `Payment` when set to true. Additionally, the feeAllowance field should be left empty."
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date of the credit authorization and the date the payment will be sent to the merchant.",
            "format" : "date",
            "example" : "2017-01-01"
          },
          "deliverByDate" : {
            "type" : "string",
            "description" : "The estimated date that the merchant will receive the payment.",
            "format" : "date",
            "example" : "2020-01-01"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional user provided message to associate with the `Payment`. The `memo` will be added to the check if the `Payment` is made with a check."
          },
          "feeAllowance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "fundingAccount" : {
            "$ref" : "#/components/schemas/FundingAccount"
          },
          "customerFundingAccount" : {
            "$ref" : "#/components/schemas/CustomerFundingAccount"
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "recurrenceScheduleId" : {
            "type" : "string",
            "description" : "Only populated if the `Payment` was generated from the `RecurrenceSchedule`."
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentAttribute"
            }
          },
          "payeeSummary" : {
            "$ref" : "#/components/schemas/PayeeSummary"
          },
          "ofxToken" : {
            "type" : "string",
            "description" : "OFX token",
            "example" : "R1EOD39I5V"
          },
          "refundAmount" : {
            "type" : "string"
          }
        },
        "description" : "Indicates what data the `Payment` will contain if it is created."
      },
      "ReviewPaymentRequest" : {
        "required" : [ "payeeAccountId", "paymentAmount" ],
        "type" : "object",
        "properties" : {
          "partnerId" : {
            "type" : "string",
            "description" : "The unique client identifier associated with the `Payment` to ensure that the `Payment` is not made more than once."
          },
          "payNow" : {
            "type" : "boolean",
            "description" : "Prioritize the `Payment` when set to true. Either `payNow` or `sendOnDate` should be provided. Additionally, the `feeAllowance` field should be left empty."
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date on which the user desires the `Payment` to be sent to the merchant. When provided the estimated deliverByDate is computed using the provided sendOnDate.",
            "format" : "date",
            "example" : "2017-01-01"
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "memo" : {
            "type" : "string",
            "description" : "A note provided by the user describing what the `Payment` is for. The `memo` will be added to the check if the `Payment` is made with a check."
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Additional attributes of the `Payment`",
            "items" : {
              "$ref" : "#/components/schemas/PaymentAttribute"
            }
          },
          "paymentInfoRequest" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "payeeAccountId" : {
            "type" : "string",
            "description" : "The `PayeeAccount` identifier that the `Payment` is for."
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          }
        },
        "description" : "Provides payment details to the application for review and validation."
      },
      "PaymentUpdate" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Set to `CANCELLED` to cancel the `Payment`.",
            "enum" : [ "CANCELLED" ]
          },
          "payNow" : {
            "type" : "boolean",
            "description" : "Prioritize the `Payment` when set to true. The field is optional. When specified, either `payNow` or `sendOnDate` should be provided. Additionally, the `feeAllowance` field should be left empty."
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date the `Payment` will be sent to the merchant. The field is optional. When specified, either `sendOnDate` or `payNow` should be provided.",
            "format" : "date",
            "example" : "2017-01-01"
          },
          "feeAllowance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "clearFeeAllowance" : {
            "type" : "boolean",
            "description" : "Clears `feeAllowance` when true."
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "memo" : {
            "type" : "string",
            "description" : "A note provided by the user describing what the `Payment` is for. The `memo` will be added to the check if the `Payment` is made with a check."
          },
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Additional attributes of the `Payment`",
            "items" : {
              "$ref" : "#/components/schemas/PaymentAttribute"
            }
          },
          "clearAttributes" : {
            "type" : "boolean",
            "description" : "Clears `attributes` when true."
          },
          "paymentInfoRequest" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "payeeAccountId" : {
            "type" : "string",
            "description" : "The `PayeeAccount` identifier that the `Payment` is for."
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          },
          "clearPaymentDeviceInfo" : {
            "type" : "boolean",
            "description" : "Clears `paymentDeviceInfo` when true."
          }
        },
        "description" : "Provides updated information about the `Payment` and can be used to cancel the `Payment`."
      },
      "AuditLogReport" : {
        "type" : "object",
        "properties" : {
          "creationDate" : {
            "type" : "string",
            "description" : "The updated date of the audit transaction",
            "format" : "date-time"
          },
          "userLastName" : {
            "type" : "string",
            "description" : "The last name of the user associated with the audit transaction"
          },
          "userFirstName" : {
            "type" : "string",
            "description" : "The first name of the user associated with the audit transaction"
          },
          "accountType" : {
            "type" : "string",
            "description" : "The account type denoting Business or Consumer"
          },
          "businessName" : {
            "type" : "string",
            "description" : "The company name associated with the audit transaction"
          },
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique identifier of the partner"
          },
          "requestedSource" : {
            "type" : "string",
            "description" : "The action modified by Customer or Admin User"
          },
          "actionTaken" : {
            "type" : "string",
            "description" : "The action associated with the `Audit`"
          },
          "updatedValue" : {
            "type" : "string",
            "description" : "The action associated with the `Audit`"
          }
        },
        "description" : "Contains the contract for the 'Audit Log Report'."
      },
      "LocalDateParam" : {
        "type" : "object",
        "description" : "The end date, exclusive, of the report to run.",
        "example" : "`2020-12-15`"
      },
      "BillPaySummaryReportDto" : {
        "type" : "object",
        "properties" : {
          "created" : {
            "type" : "string",
            "description" : "The creation date of the report",
            "format" : "date-time"
          },
          "totalEnrolledBillPayCustomers" : {
            "type" : "string",
            "description" : "The aggregated total amount (unfiltered) of enrolled bill pay customers "
          },
          "numOfActiveCustomersTotal" : {
            "type" : "string",
            "description" : "The aggregated total number of active customers within the last 1-90 days of the given date"
          },
          "numOfActiveCustomersFirstRange" : {
            "type" : "string",
            "description" : "The aggregated total number of active customers within the first 1-30 days of the given date"
          },
          "numOfActiveCustomersSecondRange" : {
            "type" : "string",
            "description" : "The aggregated total number of active customers within the last 31-60 days of the given date"
          },
          "numOfActiveCustomersThirdRange" : {
            "type" : "string",
            "description" : "The aggregated total number of active customers within the last 61-90 days of the given date"
          },
          "totalNumOfCustomersScheduledPayment" : {
            "type" : "string",
            "description" : "The aggregated total number of customers within the given date range that have scheduled a payment"
          },
          "numOfClosedCustomerAccounts" : {
            "type" : "string",
            "description" : "The aggregated total number of customer accounts that were closed (disabled/archived) in the given date range"
          },
          "percentOfClosedCustomerAccounts" : {
            "type" : "string",
            "description" : "The percent of customer accounts that were closed (disabled/archived) in the given date range"
          },
          "numOfNewCustomerAccounts" : {
            "type" : "string",
            "description" : "The aggregated total number of customer accounts that were opened (new) in the given date range"
          },
          "percentOfNewCustomerAccounts" : {
            "type" : "string",
            "description" : "The percent of customer accounts that were opened (new) in the given date range"
          },
          "totalNumOfPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of payments processed in the given date range"
          },
          "totalNumOfElectronicPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of electronic payments processed in the given date range"
          },
          "numOfVCPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of electronic (Virtual Card) payments processed in the given date range"
          },
          "numOfEBNPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of electronic (EBN) payments processed in the given date range"
          },
          "numOfUnCheckPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of electronic (Uncheck) payments processed in the given date range"
          },
          "numOfACHPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of electronic (ACH) payments processed in the given date range"
          },
          "totalNumOfPaperPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total number of paper payments processed in the given date range"
          },
          "totalDollarAmountOfPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total dollar amount of payments processed in the given date range"
          },
          "totalDollarAmountOfElectronicPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total dollar amount of electronic payments processed in the given date range"
          },
          "totalDollarAmountOfPaperPaymentsProcessed" : {
            "type" : "string",
            "description" : "The aggregated total dollar amount of paper payments processed in the given date range"
          },
          "percentOfElectronicPaymentsProcessed" : {
            "type" : "string",
            "description" : "The percent of electronic payments processed in the given date range"
          },
          "percentOfPaperPaymentsProcessed" : {
            "type" : "string",
            "description" : "The percent of paper payments processed in the given date range"
          },
          "avgNumOfPaymentsPerCustomer" : {
            "type" : "string",
            "description" : "The average number of payments processed per customer in the given date range"
          },
          "avgNumOfElectronicPaymentsPerCustomer" : {
            "type" : "string",
            "description" : "The average number of electronic payments processed per customer in the given date range"
          },
          "avgNumOfPaperPaymentsPerCustomer" : {
            "type" : "string",
            "description" : "The average number of paper payments processed per customer in the given date range"
          },
          "avgDollarAmountOfPaymentsPerCustomer" : {
            "type" : "string",
            "description" : "The average dollar amount of payments processed per customer in the given date range"
          },
          "avgDollarAmountOfElectronicPaymentsPerCustomer" : {
            "type" : "string",
            "description" : "The average dollar amount of electronic payments processed per customer in the given date range"
          },
          "avgDollarAmountOfPaperPaymentsPerCustomer" : {
            "type" : "string",
            "description" : "The average dollar amount of paper payments processed per customer in the given date range"
          }
        },
        "description" : "Contains the contract for the 'Bill Pay Summary Report'."
      },
      "PaymentDetailReportDto" : {
        "type" : "object",
        "properties" : {
          "transactionDate" : {
            "type" : "string",
            "description" : "The effective date of the `Payment`",
            "format" : "date"
          },
          "clientTransactionId" : {
            "type" : "string",
            "description" : "The partner_id of the associated `Payment`"
          },
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique identifier of the partner"
          },
          "billgoTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the `Payment`"
          },
          "transactionAmount" : {
            "type" : "string",
            "description" : "The transaction amount of the `Payment`"
          },
          "paymentInstrumentLast4" : {
            "type" : "string",
            "description" : "The last 4 digits of the payment instrument associated with the `Payment`"
          },
          "paymentInstrumentType" : {
            "type" : "string",
            "description" : "The payment type used to make the `Payment`"
          },
          "fundingAccountId" : {
            "type" : "string",
            "description" : "The BillGO ID of the funding account used make the `Payment`"
          },
          "fundingAccountPartnerId" : {
            "type" : "string",
            "description" : "The partner's ID of the funding account used make the `Payment`"
          },
          "paymentType" : {
            "type" : "string",
            "description" : "The rail type of the `Payment`"
          },
          "userLastName" : {
            "type" : "string",
            "description" : "The last name of the user associated with the `Payment`"
          },
          "userFirstName" : {
            "type" : "string",
            "description" : "The first name of the user associated with the `Payment`"
          },
          "businessName" : {
            "type" : "string",
            "description" : "The company name associated with the `Payment`"
          },
          "addressLine1" : {
            "type" : "string",
            "description" : "The first line of the address"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "The second line of the address"
          },
          "addressCity" : {
            "type" : "string",
            "description" : "The city name"
          },
          "addressState" : {
            "type" : "string",
            "description" : "The two character abbreviation for the address state"
          },
          "addressPostalCode" : {
            "type" : "string",
            "description" : "The postal code. Supports international postal codes as well"
          },
          "paymentReferenceNumber" : {
            "type" : "string",
            "description" : "The `Payment` reference number"
          },
          "billerConfirmationNumber" : {
            "type" : "string",
            "description" : "The biller confirmation number associated with the `Payment`"
          }
        },
        "description" : "Contains the contract for the 'Payment Detail Report'."
      },
      "PaymentRejectsReportDto" : {
        "type" : "object",
        "properties" : {
          "transactionDate" : {
            "type" : "string",
            "description" : "The effective date of the `Payment`",
            "format" : "date"
          },
          "clientTransactionId" : {
            "type" : "string",
            "description" : "The partner_id of the associated `Payment`"
          },
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique identifier of the partner"
          },
          "billgoTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the `Payment`"
          },
          "transactionAmount" : {
            "type" : "string",
            "description" : "The transaction amount of the `Payment`"
          },
          "userLastName" : {
            "type" : "string",
            "description" : "The last name of the user associated with the `Payment`"
          },
          "userFirstName" : {
            "type" : "string",
            "description" : "The first name of the user associated with the `Payment`"
          },
          "fundingAccountId" : {
            "type" : "string",
            "description" : "The BillGO ID of the funding account used make the `Payment`"
          },
          "fundingAccountPartnerId" : {
            "type" : "string",
            "description" : "The partner's ID of the funding account used make the `Payment`"
          },
          "businessName" : {
            "type" : "string",
            "description" : "The company name associated with the `Payment`"
          },
          "rejectReason" : {
            "type" : "string",
            "description" : "The reason that the `Payment` was rejected"
          },
          "userStatus" : {
            "type" : "object",
            "description" : "The status of the user"
          }
        },
        "description" : "Contains the contract for the 'Payments Rejects Report'."
      },
      "PaymentStatusReportDto" : {
        "type" : "object",
        "properties" : {
          "sendOnDate" : {
            "type" : "string",
            "description" : "The send on date of the 'Payment'",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the 'Payment'"
          },
          "numberOfPayments" : {
            "type" : "integer",
            "description" : "The number of payments",
            "format" : "int32"
          },
          "railType" : {
            "type" : "string",
            "description" : "The rail type of the `Payment`"
          },
          "railName" : {
            "type" : "string",
            "description" : "The rail name of the `Payment`"
          }
        },
        "description" : "Contains the contract for the 'Payment Status Report based on send on date'."
      },
      "PaymentStatusSummaryReportDto" : {
        "type" : "object",
        "properties" : {
          "sendOnDate" : {
            "type" : "string",
            "description" : "The send on date of the 'Payment'",
            "format" : "date",
            "example" : "2020-12-31"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the 'Payment'"
          },
          "data" : {
            "type" : "array",
            "description" : "The columns data of the `Payment`",
            "items" : {
              "type" : "object",
              "description" : "The columns data of the `Payment`"
            }
          }
        },
        "description" : "Contains the contract for the 'Payments Status Summary Report based on send on date and status'."
      },
      "PaymentsCanceledReportDto" : {
        "type" : "object",
        "properties" : {
          "transactionDate" : {
            "type" : "string",
            "description" : "The effective date of the `Payment`",
            "format" : "date"
          },
          "clientTransactionId" : {
            "type" : "string",
            "description" : "The partner_id of the associated `Payment`"
          },
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique identifier of the partner"
          },
          "billgoTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the `Payment`"
          },
          "transactionAmount" : {
            "type" : "string",
            "description" : "The transaction amount of the `Payment`"
          },
          "fundingAccountId" : {
            "type" : "string",
            "description" : "The BillGO ID of the funding account used make the `Payment`"
          },
          "fundingAccountPartnerId" : {
            "type" : "string",
            "description" : "The partner's ID of the funding account used make the `Payment`"
          },
          "paymentType" : {
            "type" : "string",
            "description" : "The rail type of the `Payment`"
          },
          "userLastName" : {
            "type" : "string",
            "description" : "The last name of the user associated with the `Payment`"
          },
          "userFirstName" : {
            "type" : "string",
            "description" : "The first name of the user associated with the `Payment`"
          },
          "businessName" : {
            "type" : "string",
            "description" : "The company name associated with the `Payment`"
          },
          "userStatus" : {
            "type" : "object",
            "description" : "The status of the user"
          },
          "canceledReason" : {
            "type" : "string",
            "description" : "The reason for cancelling the `Payment`"
          }
        },
        "description" : "Contains the contract for the 'Payments Canceled Report'."
      },
      "ReturnsReportDto" : {
        "type" : "object",
        "properties" : {
          "transactionDate" : {
            "type" : "string",
            "description" : "The effective date of the `Payment`",
            "format" : "date"
          },
          "transactionId" : {
            "type" : "string",
            "description" : "The id of the associated `Payment`"
          },
          "originalTransactionAmount" : {
            "type" : "string",
            "description" : "The original transaction amount of the `Payment`"
          },
          "userLastName" : {
            "type" : "string",
            "description" : "The last name of the user associated with the `Payment`"
          },
          "userFirstName" : {
            "type" : "string",
            "description" : "The first name of the user associated with the `Payment`"
          },
          "fundingAccountId" : {
            "type" : "string",
            "description" : "The BillGO ID of the funding account used make the `Payment`"
          },
          "fundingAccountPartnerId" : {
            "type" : "string",
            "description" : "The partner's ID of the funding account used make the `Payment`"
          },
          "billerBusinessName" : {
            "type" : "string",
            "description" : "The company name associated with the `Payment`"
          },
          "userStatus" : {
            "type" : "object",
            "description" : "The status of the user"
          },
          "refundAmount" : {
            "type" : "string",
            "description" : "The amount of the `Payment` that was credited/refunded"
          }
        },
        "description" : "Contains the contract for the 'Returns Report'."
      },
      "TopBillersReport" : {
        "type" : "object",
        "properties" : {
          "merchantId" : {
            "type" : "string",
            "description" : "The merchant id from the top billers report list, aggregated on transaction amount "
          },
          "aggregatePaymentAmount" : {
            "type" : "number",
            "description" : "The aggregated transaction amount for each biller",
            "format" : "double"
          }
        },
        "description" : "Contains the contract for the 'Top Billers Report'."
      },
      "TopBillerUsageDetailReport" : {
        "type" : "object",
        "properties" : {
          "transactionDate" : {
            "type" : "string",
            "description" : "The effective date of the `Payment`",
            "format" : "date"
          },
          "clientTransactionId" : {
            "type" : "string",
            "description" : "The partner_id of the associated `Payment`"
          },
          "uniqueId" : {
            "type" : "string",
            "description" : "The unique identifier of the partner"
          },
          "billgoTransactionId" : {
            "type" : "string",
            "description" : "The unique identifier of the `Payment`"
          },
          "transactionAmount" : {
            "type" : "string",
            "description" : "The transaction amount of the `Payment`"
          },
          "paymentType" : {
            "type" : "string",
            "description" : "The rail type of the `Payment`"
          },
          "userLastName" : {
            "type" : "string",
            "description" : "The last name of the user associated with the `Payment`"
          },
          "userFirstName" : {
            "type" : "string",
            "description" : "The first name of the user associated with the `Payment`"
          },
          "businessName" : {
            "type" : "string",
            "description" : "The company name associated with the `Payment`"
          },
          "addressLine1" : {
            "type" : "string",
            "description" : "The first line of the address"
          },
          "addressLine2" : {
            "type" : "string",
            "description" : "The second line of the address"
          },
          "addressCity" : {
            "type" : "string",
            "description" : "The city name"
          },
          "addressState" : {
            "type" : "string",
            "description" : "The two character abbreviation for the address state"
          },
          "addressPostalCode" : {
            "type" : "string",
            "description" : "The postal code. Supports international postal codes as well"
          },
          "billerConfirmationNumber" : {
            "type" : "string",
            "description" : "The biller confirmation number associated with the `Payment`"
          }
        },
        "description" : "Contains the contract for the 'Top Biller Usage Detail Report'."
      },
      "BillBasedRequest" : {
        "required" : [ "daysRelativeToDueDate", "paymentAmountConfig" ],
        "type" : "object",
        "properties" : {
          "paymentAmountConfig" : {
            "type" : "string",
            "description" : "Determines which amount is paid each billing period as classified by the merchant.",
            "enum" : [ "MINIMUM_DUE", "AMOUNT_DUE", "BALANCE", "FIXED_AMOUNT" ]
          },
          "daysRelativeToDueDate" : {
            "type" : "string",
            "description" : "Determines when a payment is made for a `BillBased` schedule.",
            "example" : "DUE_DATE",
            "enum" : [ "DUE_DATE", "ONE_BUSINESS_DAY_BEFORE", "THREE_BUSINESS_DAYS_BEFORE" ]
          },
          "fixedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "payCurrentBill" : {
            "type" : "boolean",
            "description" : "Determines if the current `Bill` is paid at the start of the `RecurringSchedule`.",
            "default" : false
          }
        },
        "description" : "Creates a `BillBased` schedule. The amount paid for each `Payment` is determined by the merchant unless the user indicates that they want to pay a `FIXED_AMOUNT`. In order to create a `BillBased` `RecurringSchedule` the `Payee` must be successfully linked."
      },
      "CalendarBasedRequest" : {
        "required" : [ "paymentAmount", "startDate", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates which of `weeklySchedule`, `monthlySchedule` or `annualSchedule` is provided.",
            "example" : "MONTHLY",
            "enum" : [ "WEEKLY", "MONTHLY", "ANNUALLY" ]
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional user provided message to associate with a `Payment` to indicate what the `Payment` is for. The `memo` is printed on the check if the `Payment` is made using a check."
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date the `RecurringSchedule` should begin scheduling `Payments`.",
            "format" : "date"
          },
          "weeklySchedule" : {
            "$ref" : "#/components/schemas/WeeklySchedule"
          },
          "monthlySchedule" : {
            "$ref" : "#/components/schemas/MonthlySchedule"
          },
          "annualSchedule" : {
            "$ref" : "#/components/schemas/AnnualSchedule"
          }
        },
        "description" : "Creates a `CalendarBased` schedule. `CalendarBased` schedules also provide additional payment options to the user. `CalendarBased` schedules have three possible schedule types; `WeeklySchedule`, `MonthlySchedule`, and `AnnualSchedule`. Only one of these schedule types can be used in each `CalendarBased` schedule."
      },
      "RecurringScheduleRequest" : {
        "required" : [ "payeeAccountId" ],
        "type" : "object",
        "properties" : {
          "payeeAccountId" : {
            "type" : "string",
            "description" : "The identifier of the `PayeeAccount` to associate the `RecurringSchedule` with."
          },
          "partnerScheduleId" : {
            "type" : "string",
            "description" : "The partner identifier for the `RecurringSchedule` that allows the partner to retrieve the `RecurringSchedule`."
          },
          "calendarBased" : {
            "$ref" : "#/components/schemas/CalendarBasedRequest"
          },
          "billBased" : {
            "$ref" : "#/components/schemas/BillBasedRequest"
          },
          "notifications" : {
            "$ref" : "#/components/schemas/ScheduleNotifications"
          },
          "endingSetting" : {
            "$ref" : "#/components/schemas/ScheduleEndingRequest"
          },
          "paymentInfoRequest" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "holidaySchedulingStrategy" : {
            "type" : "string",
            "description" : "In the event that a `Bill` due date or the next date in a `RecurringSchedule` falls on a non-banking day, this property determines if the `Bill` is paid on the next soonest business day (`PAY_EARLY`) or if it is paid on the next business day after the intended date (`PAY_LATE`).",
            "default" : "PAY_EARLY",
            "enum" : [ "PAY_EARLY", "PAY_LATE" ]
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          }
        },
        "description" : "Represents a `RecurringSchedule`."
      },
      "ScheduleEndingRequest" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The allowed `ScheduleEndingTypes` for a `ScheduleEndingRequest`.",
            "example" : "END_DATE",
            "enum" : [ "NUMBER", "END_DATE", "NO_END_DATE" ]
          },
          "numberOfPayments" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The number of `Payments` to make for the associated `RecurringSchedule`.",
            "format" : "int32",
            "example" : 10
          },
          "endDateInclusive" : {
            "type" : "string",
            "description" : "The date to stop making `Payments` for the associated `RecurringSchedule`. `Payments` can be made on this date, but not after. The specified can be today's date or a future date.",
            "format" : "date",
            "example" : "2021-12-25"
          }
        },
        "description" : "Determines when `Payments` for a `RecurringSchedule` should be stopped."
      },
      "recurring_schedule_ofx_sync" : {
        "required" : [ "ACTCODE", "ADDR1", "ADDR2", "ADDR3", "AMT", "CITY", "COUNTRY", "FREQ", "FUNDINGACCT", "NAME", "NEXTPMTDT", "NUMINSTS", "PAYEEACCT", "PAYEEID", "PAYEELSTID", "PAYEENAME", "PHONE", "POSTALCODE", "RECPMTID", "STATE", "TOKEN", "TRNUID" ],
        "type" : "object",
        "properties" : {
          "TOKEN" : {
            "type" : "string",
            "description" : "The OFX token.",
            "readOnly" : true,
            "example" : "B1F3AUSKBE"
          },
          "TRNUID" : {
            "type" : "string",
            "description" : "The OFX client-assigned transaction UID.",
            "readOnly" : true,
            "example" : "0"
          },
          "ACTCODE" : {
            "type" : "string",
            "description" : "The operation type.",
            "readOnly" : true,
            "example" : "PAYEERQ",
            "enum" : [ "ADD", "MOD", "DEL" ]
          },
          "RECPMTID" : {
            "type" : "string",
            "description" : "The `RecurringScheduleId`.",
            "readOnly" : true,
            "example" : "recsched_021902da-90a5-4f68-bf64-a557e291b17b"
          },
          "FREQ" : {
            "type" : "string",
            "description" : "The frequency of the payment.",
            "readOnly" : true,
            "example" : "WEEKLY",
            "enum" : [ "WEEKLY", "BIWEEKLY", "TWICEMONTHLY", "MONTHLY", "FOURWEEKS", "BIMONTHLY", "QUARTERLY", "SEMIANNUALLY", "ANNUALLY" ]
          },
          "NUMINSTS" : {
            "type" : "string",
            "description" : "The number of installments.",
            "readOnly" : true,
            "example" : "12"
          },
          "AMT" : {
            "type" : "string",
            "description" : "The amount to be paid for each installment.",
            "readOnly" : true,
            "example" : "100.0"
          },
          "NEXTPMTDT" : {
            "type" : "string",
            "description" : "The next payment date.",
            "readOnly" : true,
            "example" : "2020-10-01"
          },
          "FUNDINGACCT" : {
            "type" : "string",
            "description" : "The partner's `FundingAccount` id.",
            "readOnly" : true,
            "example" : "09ceb847-6c31-4916-b3c4-d91ef5c3f95a"
          },
          "PAYEELSTID" : {
            "type" : "string",
            "description" : "The partner's `PayeeAccount` id.",
            "readOnly" : true,
            "example" : "DDmx05Rhf7yc"
          },
          "PAYEEACCT" : {
            "type" : "string",
            "description" : "The `PayeeAccount` number.",
            "readOnly" : true,
            "example" : "CEZAPD-123-456-789"
          },
          "NAME" : {
            "type" : "string",
            "description" : "The `Payee Account`name.",
            "readOnly" : true,
            "example" : "GEICO Insurance Company"
          },
          "PAYEEID" : {
            "type" : "string",
            "description" : "The `PayeeId`.",
            "readOnly" : true,
            "example" : "payee_b496e068-837b-4e56-97ea-e1207649560e"
          },
          "PAYEENAME" : {
            "type" : "string",
            "description" : "The `Payee` name.",
            "readOnly" : true,
            "example" : "Acme Insurance Co"
          },
          "ADDR1" : {
            "type" : "string",
            "description" : "The address line 1 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "123 Main Street"
          },
          "ADDR2" : {
            "type" : "string",
            "description" : "The address line 2 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Suite 100"
          },
          "ADDR3" : {
            "type" : "string",
            "description" : "The address line 3 of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Room 100"
          },
          "CITY" : {
            "type" : "string",
            "description" : "The city of the `Payee Account`.",
            "readOnly" : true,
            "example" : "Denver"
          },
          "STATE" : {
            "type" : "string",
            "description" : "The state of the `Payee Account`.",
            "readOnly" : true,
            "example" : "CO"
          },
          "POSTALCODE" : {
            "type" : "string",
            "description" : "The postal code of the `Payee Account`.",
            "readOnly" : true,
            "example" : "80205"
          },
          "COUNTRY" : {
            "type" : "string",
            "description" : "The country code of the `Payee Account`.",
            "readOnly" : true,
            "example" : "US"
          },
          "PHONE" : {
            "type" : "string",
            "description" : "The telephone number of the `Payee Account`. Formatted to ITU-T E.164 and E.123 (without '~') standards.",
            "readOnly" : true,
            "example" : "US"
          }
        },
        "description" : "The `RecurringSchedule` associated with the sync request.",
        "readOnly" : true,
        "xml" : {
          "name" : "recurring_schedule_ofx_sync"
        }
      },
      "recurring_schedules_ofx_sync" : {
        "type" : "object",
        "properties" : {
          "recurring_schedules_ofx_sync" : {
            "type" : "array",
            "description" : "The list of `RecurringSchedule`s.",
            "readOnly" : true,
            "xml" : {
              "name" : "recurring_schedule_ofx_sync"
            },
            "items" : {
              "$ref" : "#/components/schemas/recurring_schedule_ofx_sync"
            }
          }
        },
        "description" : "The results of a `RecurringSchedule` ofx sync request.",
        "xml" : {
          "name" : "recurring_schedules_ofx_sync"
        }
      },
      "RecurringScheduleList" : {
        "required" : [ "schedules" ],
        "type" : "object",
        "properties" : {
          "schedules" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/RecurringSchedule"
            }
          }
        },
        "description" : "The list of `RecurringSchedules` associated with a `User`."
      },
      "RecurringScheduleReview" : {
        "required" : [ "holidaySchedulingStrategy", "payeeAccountLink" ],
        "type" : "object",
        "properties" : {
          "partnerScheduleId" : {
            "type" : "string",
            "description" : "The partner identifier for a `RecurringSchedule` that allows a partner to retrieve the associated `RecurringSchedule`."
          },
          "calendarBased" : {
            "$ref" : "#/components/schemas/CalendarBased"
          },
          "billBased" : {
            "$ref" : "#/components/schemas/BillBased"
          },
          "holidaySchedulingStrategy" : {
            "type" : "string",
            "description" : "In the event that a `Bill` due date or the next date in a `RecurringSchedule` falls on a non-banking day, this property determines if the `Bill` is paid on the next soonest business day (`PAY_EARLY`) or if it is paid on the next business day after the intended date (`PAY_LATE`).",
            "readOnly" : true,
            "default" : "PAY_EARLY",
            "enum" : [ "PAY_EARLY", "PAY_LATE" ]
          },
          "notifications" : {
            "$ref" : "#/components/schemas/ScheduleNotifications"
          },
          "endingSetting" : {
            "$ref" : "#/components/schemas/ScheduleEnding"
          },
          "nextPayment" : {
            "$ref" : "#/components/schemas/PaymentReview"
          },
          "payeeAccountSummary" : {
            "$ref" : "#/components/schemas/PayeeAccountSummary"
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "payeeAccountId" : {
            "type" : "string"
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          }
        },
        "description" : "Returns the result of submitting a `RecurringScheduleRequest` to the review endpoint."
      },
      "BillBasedUpdate" : {
        "type" : "object",
        "properties" : {
          "paymentAmountConfig" : {
            "type" : "string",
            "description" : "Determines which amount is paid each billing period as classified by the merchant.",
            "enum" : [ "MINIMUM_DUE", "AMOUNT_DUE", "BALANCE", "FIXED_AMOUNT" ]
          },
          "daysRelativeToDueDate" : {
            "type" : "string",
            "description" : "Determines when a payment is made for a `BillBased` schedule.",
            "example" : "DUE_DATE",
            "enum" : [ "DUE_DATE", "ONE_BUSINESS_DAY_BEFORE", "THREE_BUSINESS_DAYS_BEFORE" ]
          },
          "fixedAmount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        },
        "description" : "Updates an existing `BillBased` `RecurringSchedule`."
      },
      "CalendarBasedUpdate" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates which of `weeklySchedule`, `monthlySchedule` or `annualSchedule` is provided.",
            "example" : "MONTHLY",
            "enum" : [ "WEEKLY", "MONTHLY", "ANNUALLY" ]
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional message to associate with a `Payment` to indicate what the `Payment` is for. The `memo` is printed on the check if the `Payment` is made using a check."
          },
          "weeklySchedule" : {
            "$ref" : "#/components/schemas/WeeklySchedule"
          },
          "monthlySchedule" : {
            "$ref" : "#/components/schemas/MonthlySchedule"
          },
          "annualSchedule" : {
            "$ref" : "#/components/schemas/AnnualSchedule"
          }
        },
        "description" : "Updates an existing `CalendarBased` `RecurringSchedule`."
      },
      "RecurringScheduleUpdate" : {
        "type" : "object",
        "properties" : {
          "calendarBasedUpdate" : {
            "$ref" : "#/components/schemas/CalendarBasedUpdate"
          },
          "billBasedUpdate" : {
            "$ref" : "#/components/schemas/BillBasedUpdate"
          },
          "notifications" : {
            "$ref" : "#/components/schemas/ScheduleNotifications"
          },
          "endingSetting" : {
            "$ref" : "#/components/schemas/ScheduleEndingRequest"
          },
          "holidaySchedulingStrategy" : {
            "type" : "string",
            "description" : "In the event that a `Bill` due date or the next date in a `RecurringSchedule` falls on a non-banking day, this property determines if the `Bill` is paid on the next soonest business day (`PAY_EARLY`) or if it is paid on the next business day after the intended date (`PAY_LATE`).",
            "default" : "PAY_EARLY",
            "enum" : [ "PAY_EARLY", "PAY_LATE" ]
          },
          "paymentInfoRequest" : {
            "$ref" : "#/components/schemas/PaymentInfoRequest"
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          }
        },
        "description" : "Updates an existing `RecurringSchedule`."
      },
      "CustomerConsent" : {
        "type" : "object",
        "properties" : {
          "virtCardAcceptTimestamp" : {
            "type" : "string",
            "description" : "The timestamp when the `User` accepted the virtual card customer consent terms and conditions.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "virtCardTermsId" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string",
            "description" : "The virtual card customer consent `Terms` identifier for the `User`."
          },
          "billPayAcceptTimestamp" : {
            "type" : "string",
            "description" : "The timestamp when the `User` accepted the bill pay customer consent terms and conditions.",
            "format" : "date-time",
            "example" : "2019-10-14T16:22:00Z"
          },
          "billPayTermsId" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string",
            "description" : "The bill pay customer consent `Terms` identifier for the `User`."
          }
        },
        "description" : "User's consent for making payments with virtual cards."
      },
      "PhoneNumber" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "phoneNumber" : {
            "type" : "string",
            "description" : "The phone number ideally formatted according to ITU-T E.164 and E.123 (without '~') standards.",
            "example" : "+1 415 123 1234"
          },
          "extension" : {
            "type" : "string",
            "description" : "The phone number extension.",
            "example" : "00234"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the phone number type.",
            "example" : "MOBILE",
            "enum" : [ "LANDLINE", "MOBILE" ]
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Has the phone number been verified for KYC compliance.",
            "default" : false
          },
          "verifiedTimestamp" : {
            "type" : "string",
            "description" : "The timestamp in UTC when the phone number was last verified",
            "format" : "date-time",
            "example" : "2022-03-04T04:45:42Z"
          }
        },
        "description" : "Represents a phone number."
      },
      "Profile" : {
        "required" : [ "accountHolderName", "addresses", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "An `AccountType`.",
            "example" : "PERSONAL",
            "enum" : [ "PERSONAL", "JOINT", "BUSINESS" ]
          },
          "accountHolderName" : {
            "$ref" : "#/components/schemas/Name"
          },
          "taxId" : {
            "pattern" : "(^[0-9]{2}-[0-9]{7}$)|(^[0-9]{3}-[0-9]{2}-[0-9]{4}$)|(^[#]*[0-9]{4}$)",
            "type" : "string"
          },
          "dateOfBirth" : {
            "type" : "string",
            "description" : "The birth date of the user.",
            "format" : "date",
            "example" : "2020-06-04"
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "secondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "tertiaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "The email address of the user."
          },
          "emailVerified" : {
            "type" : "boolean",
            "description" : "Has the email been verified for KYC compliance.",
            "default" : false
          },
          "emailVerifiedTimestamp" : {
            "type" : "string",
            "description" : "The timestamp in UTC when the `Email` was last verified.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "emailLastUpdated" : {
            "type" : "string",
            "description" : "The timestamp when the `Email` was last updated.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "customerConsent" : {
            "$ref" : "#/components/schemas/CustomerConsent"
          },
          "addresses" : {
            "type" : "array",
            "description" : "The list of `UserAddress` for the account holder.",
            "items" : {
              "$ref" : "#/components/schemas/UserAddress"
            }
          },
          "accountSubType" : {
            "type" : "string",
            "description" : "Further classification of the account.",
            "enum" : [ "PRIVATE_CLIENT", "VIP" ]
          },
          "businessProprietor" : {
            "$ref" : "#/components/schemas/Name"
          },
          "bankAccountEnrollmentDate" : {
            "type" : "string",
            "description" : "When the user first opened an account with the financial institution.",
            "format" : "date"
          },
          "enrollmentSource" : {
            "type" : "string",
            "description" : "How the user was initially engaged with the financial institution.",
            "enum" : [ "ONLINE", "MOBILE", "BRANCH", "PHONE_BANK" ]
          },
          "olbStartDate" : {
            "type" : "string",
            "description" : "When user started online banking.",
            "format" : "date"
          },
          "billPaySinceDate" : {
            "type" : "string",
            "description" : "The date the user was enrolled in bill pay.",
            "format" : "date"
          },
          "customerRelationshipStartDate" : {
            "type" : "string",
            "description" : "When customer relationship began.",
            "format" : "date"
          }
        },
        "description" : "Represents the profile information for the `User`"
      },
      "User" : {
        "required" : [ "accountOrigin", "created", "id", "partnerUserId", "profile", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `User`.",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `User`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `User` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `User` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "partnerUserId" : {
            "type" : "string",
            "description" : "The partner identifier for the `User` that allows the partner to access the BillGO `User` with their identifier."
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of the `User`.",
            "enum" : [ "ACTIVE", "LOCKED", "ARCHIVED", "DORMANT" ]
          },
          "reasonForDisabling" : {
            "type" : "string"
          },
          "reasonForEnabling" : {
            "type" : "string"
          },
          "profile" : {
            "$ref" : "#/components/schemas/Profile"
          },
          "accountOrigin" : {
            "type" : "string",
            "description" : "Indicates if the `User` was `CONVERTED` from an another application.",
            "enum" : [ "NEW", "CONVERTED" ]
          },
          "test" : {
            "type" : "boolean",
            "description" : "A flag indicating that the `User` is a test `User`.",
            "deprecated" : true
          },
          "payees" : {
            "type" : "array",
            "description" : "The list of `Payees` associated with the `User`.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/Payee"
            }
          }
        },
        "description" : "The `User` associated with a partner bank."
      },
      "UserAddress" : {
        "required" : [ "addressLine1", "city", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Address`",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Address`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Has the address been verified for KYC compliance.",
            "readOnly" : true,
            "default" : false
          },
          "defaultAddress" : {
            "type" : "boolean",
            "description" : "Denotes whether this is the default address."
          }
        },
        "description" : "Represents a user address within the API."
      },
      "UserAddressRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The id of the address to update."
          },
          "defaultAddress" : {
            "type" : "boolean",
            "description" : "Denotes whether this is the default address."
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable. Only used in international addresses."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable. Only used in international addresses."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state.",
            "example" : "NJ"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The state or province name or abbreviation. Only used in international addresses."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address.",
            "example" : "10001"
          },
          "countryCode" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character country code",
            "default" : "US"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          }
        },
        "description" : "Provides the information required to add or update a `UserAddress`. If updating an address, the only fields that may be updated are the `defaultAddress`, and `status` fields. If no ID is provided, we will attempt to match to an existing address."
      },
      "UserRequest" : {
        "required" : [ "partnerUserId", "profileInformation" ],
        "type" : "object",
        "properties" : {
          "partnerUserId" : {
            "type" : "string",
            "description" : "The partner identifier for the `User` that allows the partner to access the BillGO `User` with their identifier."
          },
          "test" : {
            "type" : "boolean",
            "description" : "A flag indicating that the `User` is a test `User`.",
            "deprecated" : true
          },
          "profileInformation" : {
            "$ref" : "#/components/schemas/Profile"
          }
        },
        "description" : "Represents the information required to create a partner bank `User`."
      },
      "UserPage" : {
        "required" : [ "data", "page" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "A generic list of data to return with the pagination information.",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageInfo"
          }
        },
        "description" : "A Pageable object for returning server-side pagination information for users."
      },
      "CustomerConsentUpdate" : {
        "type" : "object",
        "properties" : {
          "virtCardAcceptTimestamp" : {
            "type" : "string",
            "description" : "The timestamp when the `User` accepted the virtual card customer consent terms and conditions. Setting this may update the delivery date for pending payments.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "virtCardTermsId" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string",
            "description" : "The virtual card customer consent `Terms` identifier for the `User`. Setting this may update the delivery date for pending payments."
          },
          "removeVirtualCardConsent" : {
            "type" : "boolean",
            "description" : "Removes Virtual Card consent. Setting this to true may update the delivery date for pending payments."
          },
          "billPayAcceptTimestamp" : {
            "type" : "string",
            "description" : "The timestamp when the `User` accepted the bill pay customer consent terms and conditions.",
            "format" : "date-time",
            "example" : "2019-10-14T16:22:00Z"
          },
          "billPayTermsId" : {
            "pattern" : "([0-9a-zA-Z_@\\.-]+)",
            "type" : "string",
            "description" : "The bill pay customer consent `Terms` identifier for the `User`."
          }
        },
        "description" : "Customer's consent for making payments with virtual cards."
      },
      "UpdateProfile" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "An `AccountType`.",
            "example" : "BUSINESS",
            "enum" : [ "PERSONAL", "JOINT", "BUSINESS" ]
          },
          "accountHolderName" : {
            "$ref" : "#/components/schemas/Name"
          },
          "addresses" : {
            "type" : "array",
            "description" : "The list of `Addresses` for the account holder.",
            "items" : {
              "$ref" : "#/components/schemas/UserAddressRequest"
            }
          },
          "taxId" : {
            "pattern" : "(^[0-9]{2}-[0-9]{7}$)|(^[0-9]{3}-[0-9]{2}-[0-9]{4}$)|(^$)",
            "type" : "string"
          },
          "dateOfBirth" : {
            "type" : "string",
            "description" : "The birth date of the user.",
            "format" : "date",
            "example" : "2020-06-04"
          },
          "clearDateOfBirth" : {
            "type" : "boolean",
            "description" : "Clears `dateOfBirth` when true."
          },
          "primaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "clearPrimaryPhone" : {
            "type" : "boolean",
            "description" : "Clears `primaryPhone` when true."
          },
          "secondaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "clearSecondaryPhone" : {
            "type" : "boolean",
            "description" : "Clears `secondaryPhone` when true."
          },
          "tertiaryPhone" : {
            "$ref" : "#/components/schemas/PhoneNumber"
          },
          "clearTertiaryPhone" : {
            "type" : "boolean",
            "description" : "Clears `tertiaryPhone` when true."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "The email address of the user."
          },
          "emailVerifiedTimestamp" : {
            "type" : "string",
            "description" : "The timestamp in UTC when the `Email` was last verified.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "emailLastUpdated" : {
            "type" : "string",
            "description" : "The timestamp when the `Email` was last updated.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "customerConsent" : {
            "$ref" : "#/components/schemas/CustomerConsentUpdate"
          },
          "enrollmentSource" : {
            "type" : "string",
            "description" : "How the user is engaged with the financial institution.",
            "enum" : [ "ONLINE", "MOBILE", "BRANCH", "PHONE_BANK" ]
          },
          "removeCustomerConsent" : {
            "type" : "boolean",
            "description" : "Removes Bill Pay consent and Virtual Card consent when true."
          },
          "dateOfBirthAsString" : {
            "type" : "string"
          },
          "validUpdateProfile" : {
            "type" : "boolean"
          }
        },
        "description" : "Provides the information required to update a user's `Profile`."
      },
      "UserUpdate" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "The new `UserStatus` to move the `User` to.",
            "enum" : [ "ACTIVE", "ARCHIVED", "LOCKED", "DORMANT" ]
          },
          "isTest" : {
            "type" : "boolean",
            "description" : "A flag indicating that this is a test `User`.",
            "deprecated" : true
          },
          "profileInformation" : {
            "$ref" : "#/components/schemas/UpdateProfile"
          },
          "reasonForDisabling" : {
            "type" : "string"
          },
          "reasonForEnabling" : {
            "type" : "string"
          }
        },
        "description" : "Represents the information to update a partner bank `User`."
      },
      "JwtVerificationRequest" : {
        "required" : [ "jwt" ],
        "type" : "object",
        "properties" : {
          "jwt" : {
            "type" : "string",
            "description" : "The JWT to verify"
          }
        },
        "description" : "Verify the JWT was issued by this API."
      },
      "ResourceNotificationsRequest" : {
        "required" : [ "limit" ],
        "type" : "object",
        "properties" : {
          "starttime" : {
            "type" : "string",
            "description" : "Send `Notifications` created after the `starttime`.",
            "format" : "date-time",
            "example" : "2019-01-01T13:01:01Z"
          },
          "endtime" : {
            "type" : "string",
            "description" : "Send `Notifications` created before the `endtime`.",
            "format" : "date-time"
          },
          "limit" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "Indicates the maximum number of `Notifications` to issue.",
            "format" : "int32",
            "example" : 100
          },
          "operationTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Indicates if the resource was `CREATED`, `UPDATED`, or `REMOVED`.",
              "example" : "CREATED",
              "enum" : [ "CREATED", "UPDATED", "REMOVED" ]
            }
          },
          "resourceTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Indicates the type of the resource.",
              "example" : "USER",
              "enum" : [ "USER", "PAYEE", "PAYEE_ACCOUNT", "BILL", "DOCUMENT", "PAYMENT", "SCHEDULE", "USER_NOTIFICATION", "USER_JWT", "PKCE_JWT" ]
            }
          }
        },
        "description" : "Provides selection criteria to the application for the `Notifications` to issue."
      },
      "PaymentDispute" : {
        "required" : [ "initiatedByUserId" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the dispute.",
            "readOnly" : true,
            "example" : "pd_83ede6ae-a080-11ea-bb37-0242ac13000"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the dispute was initiated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the dispute was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "externalId" : {
            "type" : "string",
            "description" : "An optional, external identifier of the dispute.",
            "example" : "Salesforce1"
          },
          "initiatedByUserId" : {
            "type" : "string",
            "description" : "The unique identifier of the user initiating the payment dispute."
          },
          "paymentId" : {
            "type" : "string",
            "description" : "The identifier of the payment the dispute is associated with.",
            "readOnly" : true,
            "example" : "pymt_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of a payment dispute.",
            "enum" : [ "DISPUTED", "REJECTED", "RESOLVED" ]
          }
        },
        "description" : "Presents information about a payment dispute."
      },
      "PaymentDisputeUpdate" : {
        "type" : "object",
        "properties" : {
          "initiatedByUserId" : {
            "type" : "string",
            "description" : "The unique identifier of the user initiating the payment dispute."
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of a payment dispute.",
            "enum" : [ "DISPUTED", "REJECTED", "RESOLVED" ]
          }
        },
        "description" : "Used to update a payment dispute."
      },
      "PayeeAccountNotificationData" : {
        "required" : [ "isPayeeAccountHidden", "payeeAccountId" ],
        "type" : "object",
        "properties" : {
          "payeeAccountId" : {
            "type" : "string",
            "description" : "The identifier for the `PayeeAccount`."
          },
          "isPayeeAccountHidden" : {
            "type" : "boolean",
            "description" : "Indicates if the `PayeeAccount` is hidden."
          }
        },
        "description" : "References the `PayeeAccount` that the `UserNotification` is associated with."
      },
      "UserNotification" : {
        "required" : [ "created", "deliveryAttempts", "deliveryStatus", "id", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Notification`.",
            "readOnly" : true,
            "example" : "e_fbd40f3f63b14400824b945635a63d52"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Notification`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp of when the `Notification` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-01-01T13:01:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp of when the `Notification` was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-01-01T13:30:01Z"
          },
          "delivered" : {
            "type" : "string",
            "description" : "The timestamp of when the `Notification` was delivered.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-01-01T13:30:01Z"
          },
          "deliveryStatus" : {
            "type" : "string",
            "description" : "Indicates the delivery status of the `Notification`.",
            "readOnly" : true,
            "example" : "QUEUED",
            "enum" : [ "QUEUED", "QUEUED_RETRY", "DELIVERED", "FAILED" ]
          },
          "deliveryAttempts" : {
            "type" : "integer",
            "description" : "The number of attempts made to deliver the `Notification`.",
            "format" : "int32",
            "readOnly" : true,
            "example" : 1
          },
          "details" : {
            "$ref" : "#/components/schemas/UserNotificationDetails"
          }
        },
        "description" : "Provides information that is of interest to the user of the partner bank account.",
        "readOnly" : true
      },
      "UserNotificationContent" : {
        "required" : [ "title" ],
        "type" : "object",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "Provides the `title` of the `UserNotification`.",
            "readOnly" : true
          },
          "subtitle" : {
            "type" : "string",
            "description" : "Provides the optional `subtitle` of the `UserNotification`.",
            "readOnly" : true
          },
          "content" : {
            "type" : "string",
            "description" : "Provides the optional `content` of the `UserNotification`.",
            "readOnly" : true
          }
        },
        "description" : "Provides the content of the `UserNotification` to be displayed to the `User`."
      },
      "UserNotificationDetails" : {
        "required" : [ "content", "level", "partnerUserId", "payeeAccountIds", "resourceType", "state", "status", "type", "userId" ],
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string",
            "description" : "The unique identifier for the `User`.",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "partnerUserId" : {
            "type" : "string",
            "description" : "The partner identifier for the `User` that allows the partner to access the BillGO `User` with their identifier."
          },
          "level" : {
            "type" : "string",
            "description" : "Indicates the importance of the `Notification`.",
            "readOnly" : true,
            "example" : "NORMAL",
            "enum" : [ "NORMAL", "WARNING", "ERROR" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the resource type associated with the `Notification`.",
            "readOnly" : true,
            "example" : "PAYMENT",
            "enum" : [ "SYNC", "PAYMENT", "BILL", "PAYEE", "PAYEE_ACCOUNT", "USER" ]
          },
          "payeeAccountIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PayeeAccountNotificationData"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "Provides resource type status about the resource type event that triggered the `Notification`."
          },
          "state" : {
            "$ref" : "#/components/schemas/UserNotificationState"
          },
          "content" : {
            "$ref" : "#/components/schemas/UserNotificationContent"
          },
          "extendedStatus" : {
            "type" : "string",
            "description" : "Indicates to the user that an action needs to be taken in response to the `Notification`.",
            "enum" : [ "NONE", "USER_INPUT_REQUIRED", "AVAILABLE", "NEAR_DUE", "DUE", "PAST_DUE", "OUTAGE", "DATUMS_NEEDED", "PAYEE_ACCOUNT_DECLINED", "PAYEE_ACTION_REQUIRED", "PAYMENT_AMOUNT_DECLINED", "IDENTIFICATION_CODE_REQUIRED" ]
          },
          "referenceResourceUrl" : {
            "type" : "string"
          },
          "referenceResourceType" : {
            "type" : "string",
            "description" : "Indicates the type of the resource.",
            "example" : "USER",
            "enum" : [ "USER", "PAYEE", "PAYEE_ACCOUNT", "BILL", "DOCUMENT", "PAYMENT", "SCHEDULE", "USER_NOTIFICATION", "USER_JWT", "PKCE_JWT" ]
          },
          "referenceResource" : {
            "type" : "string"
          },
          "resourceType" : {
            "type" : "string",
            "description" : "Indicates the type of the resource.",
            "readOnly" : true,
            "example" : "USER",
            "enum" : [ "USER", "PAYEE", "PAYEE_ACCOUNT", "BILL", "DOCUMENT", "PAYMENT", "SCHEDULE", "USER_NOTIFICATION", "USER_JWT", "PKCE_JWT" ]
          }
        },
        "description" : "Provides information of interest to a user about the `Payees`, `PayeeAccounts`, and `Payments`."
      },
      "UserNotificationState" : {
        "required" : [ "dismissed", "read", "seen" ],
        "type" : "object",
        "properties" : {
          "seen" : {
            "type" : "boolean",
            "description" : "Indicates that the `UserNotification` has been seen by the user. Set the `seen` flag when the `UserNotification's` content has been presented to the user. For example, the `UserNotification's` content is presented to the user initially, but in subsequent sessions only the `UserNotification's` `title` is presented to the user.",
            "readOnly" : true
          },
          "read" : {
            "type" : "boolean",
            "description" : "Indicates that the `UserNotification` has been read by the user. Set the `read` flag when the the `UserNotification's` `title`, `subtitle`, and `content` have been presented to the user. For example, the `UserNotification` content is displayed and the user presses the `Read` button. Once the `UserNotification` has been read by the user it is a good idea to visually indicate this state to the user.",
            "readOnly" : true
          },
          "dismissed" : {
            "type" : "boolean",
            "description" : "Indicates that the `UserNotification` has been dismissed by the user. Set the `dismissed` flag when the user indicates that the `UserNotification` has been dismissed.  For example, the `UserNotification` summary is presented to the user and the user presses the `Dismiss` button.  Once the `UserNotification` has been dismissed it is a good idea not to present the dismissed `UserNotification` to the user again unless the user requests to see the dismissed `UserNotifications`.",
            "readOnly" : true
          }
        },
        "description" : "Represents the state of the `UserNotification`."
      },
      "NotificationList" : {
        "required" : [ "notifications" ],
        "type" : "object",
        "properties" : {
          "notifications" : {
            "type" : "array",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/UserNotification"
            }
          }
        },
        "description" : "The list of `Notifications` returned as the response to an update or retrieval request."
      },
      "UpdateResult" : {
        "required" : [ "updateSuccessful" ],
        "type" : "object",
        "properties" : {
          "updateSuccessful" : {
            "type" : "boolean",
            "description" : "Indicates the success of the request to update all `UserNotifications` associated with the `User`.",
            "readOnly" : true
          }
        },
        "description" : "Represents the response to the update all `UserNotifications` request."
      },
      "ResourceNotificationsFilter" : {
        "required" : [ "created", "id", "updated" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `ResourceNotificationsFilter`.",
            "readOnly" : true,
            "example" : "nr_fbd40f3f63b14400824b945635a63d52"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `ResourceNotificationsFilter`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp of when the `ResourceNotificationsFilter` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-01-01T13:01:01Z"
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp of when the `ResourceNotificationsFilter` was updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2018-01-01T13:01:01Z"
          },
          "operationTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Indicates if the resource was `CREATED`, `UPDATED`, or `REMOVED`.",
              "example" : "CREATED",
              "enum" : [ "CREATED", "UPDATED", "REMOVED" ]
            }
          },
          "resourceTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Indicates the type of the resource.",
              "example" : "USER",
              "enum" : [ "USER", "PAYEE", "PAYEE_ACCOUNT", "BILL", "DOCUMENT", "PAYMENT", "SCHEDULE", "USER_NOTIFICATION", "USER_JWT", "PKCE_JWT" ]
            }
          }
        },
        "description" : "Represents the selection criteria the application is using to select the `Notifications` issued."
      },
      "ResourceNotificationsFilterRequest" : {
        "required" : [ "resourceTypes" ],
        "type" : "object",
        "properties" : {
          "operationTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Indicates if the resource was `CREATED`, `UPDATED`, or `REMOVED`.",
              "example" : "CREATED",
              "enum" : [ "CREATED", "UPDATED", "REMOVED" ]
            }
          },
          "resourceTypes" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "Indicates the type of the resource.",
              "example" : "USER",
              "enum" : [ "USER", "PAYEE", "PAYEE_ACCOUNT", "BILL", "DOCUMENT", "PAYMENT", "SCHEDULE", "USER_NOTIFICATION", "USER_JWT", "PKCE_JWT" ]
            }
          }
        },
        "description" : "Provides selection criteria to the application for the `Notifications` to issue."
      },
      "AccountBalance" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "pattern" : "^-?[0-9]*(\\.([0-9]{1,2}))?$",
            "type" : "string",
            "description" : "The amount of money expressed as a String.",
            "example" : "9999.99"
          },
          "currency" : {
            "type" : "string",
            "description" : "Indicates the `Currency` unit of the amount.",
            "default" : "USD",
            "enum" : [ "USD" ]
          }
        },
        "description" : "The balance of the Account"
      }
    }
  }
}
