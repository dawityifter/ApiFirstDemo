{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Partner Funding API",
    "description" : "BillGO's Funding API specifies the contract BillGO's partners must implement in order to provide authorization to proceed with a user's bill payment. BillGO is the client of this API and will make a request to the partner's implementation to reserve funds to cover a payment or reimburse funds for a returned payment.\n\n**The Funding API service *must* be idempotent.** If the service receives duplicate requests (such as two requests to authorize a debit of the same amount for the same PaymentID), the service must return the same response to both requests. When duplicate funding requests are received, the partner should _not_ reserve funds from the customer account twice. The API should simply return the `debitAuthTransactionId` and `status` values that were returned in the response to the original request. This ensures that debit authorizations interrupted in-flight can be retried successfully and minimizes the need for BillGO Payment Operations to contact the partner's support team.\n\n## Retries\nAPI invocation failures are handled by BillGO in two different manners. Re-tryable failures will be retried by BillGO with increasing back-off. When retries are exhausted or a non-retryable failure occurs (such as an HTTP `400` responses), the BillGO Payment Operations team will investigate the failure and may reach out to the partner's support team. In addition to HTTP status codes documented for individual endpoints below, BillGO will always retry errors that suggest transient infrastructure issues including:\n * `401` Unauthorized\n * `403` Not Allowed\n * `404` Not Found\n * `429` Too Many Requests\n * `503` Service Unavailable\n\nRepeated failures for retryable errors will cause the BillGO Payment Operations team to contact the partner's support team.\n",
    "version" : "20220706",
    "x-logo" : {
      "altText" : "BillGO logo",
      "backgroundColor" : "#101010",
      "url" : "https://api-docs.billgo-dev.com/assets/BillGOlogo_white.png"
    }
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "tags" : [ {
    "name" : "Funding",
    "description" : "Funding API endpoint"
  }, {
    "name" : "Health",
    "description" : "Health check endpoint"
  } ],
  "paths" : {
    "/credit-auths" : {
      "post" : {
        "tags" : [ "Funding" ],
        "description" : "Request to credit funds to a user's account. This API endpoint will be invoked when a payee returns funds for a previously-completed payment.\n\nGeneration of payment returns is at the discretion of the payee. A payee may return the original amount of the payment, an amount smaller than the original payment, or an amount larger than the original payment. A payee may generate multiple returns against a single payment. BillGO partners must be capable of supporting all of these return scenarios and crediting the original payer appropriately.\n\nIt is recommended that partners treat multiple credits for the same original payment and the same return amount on the same calendar date as duplicate requests. When a duplicate credit authorization is detected, the partner implementation should return the same response as was returned to the original request *without* crediting the users account a second time. This  ensures that credit authorization requests interrupted in-flight (e.g. due to a network interruption) can be successfully re-processed without requiring manual intervention. In cases where credit authorizations fail repeatedly, BillGO Payment Operations will contact the partner's support team.",
        "operationId" : "Request credit authorization",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreditAuthRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Any 2xx status code will indicate the credit authorization request was received and handled.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreditAuthResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request was malformed or could not be understood by the service. This response will trigger BillGO Payment Operations to investigate the problem.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "The request has been throttled. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "503" : {
            "description" : "The service is unavailable. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/credit-auths/{creditAuthTransactionId}" : {
      "delete" : {
        "tags" : [ "Funding" ],
        "description" : "Cancel the request to credit funds to a user's account. This API endpoint will only be invoked in anomalous situations and in coordination with the partner's payment operations organization.",
        "operationId" : "Cancel credit authorization",
        "parameters" : [ {
          "name" : "creditAuthTransactionId",
          "in" : "path",
          "description" : "The ID of the credit authorization to be canceled. This value is partner-generated and provided to BillGO in the `Request Credit Authorization` response.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "The request to cancel the credit authorization was successful. Any 2xx response code will be considered a successful cancellation."
          },
          "404" : {
            "description" : "The `creditAuthTransactionId` was not recognized.  Because the `creditAuthTransactionId` value was provided by the partner previously during a \"Request Credit Authorization\" request, this response indicates a significant discrepancy between the records at BillGO and the partner. BillGO Payment Operations may contact the partner's support organization to diagnose the problem.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "The request has been throttled. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "503" : {
            "description" : "The service is unavailable. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/debit-auths" : {
      "post" : {
        "tags" : [ "Funding" ],
        "description" : "Request to debit funds from a user's account to cover a payment.\n\nThis API method *must* be  idempotent. If the service receives duplicate requests (such as two requests to authorize a debit of the same amount for the same payment ID), the service must return the same response to both requests. When duplicate funding requests are received, the partner should _not_ reserve duplicate funds from the customer account. The API should simply return the `debitAuthTransactionId` and `status` values that were returned in the response to the original request. This ensures that debit authorizations interrupted in-flight can be retried successfully and minimizes the need for BillGO Payment Operations to contact the partner's support team. ",
        "operationId" : "Request debit authorization",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DebitAuthRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Any 2xx status code will indicate the debit authorization request was received and handled. A 2xx response does not necessarily indicate that the authorization was approved - it simply indicates that the request was recognized and processed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DebitAuthResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request was malformed or could not be understood by the service. This response will trigger BillGO Payment Operations to investigate the problem.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "The request has been throttled. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "503" : {
            "description" : "The service is unavailable. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/debit-auths/{debitAuthTransactionId}" : {
      "delete" : {
        "tags" : [ "Funding" ],
        "description" : "Cancel the request to debit funds from a user's account. This API endpoint will be invoked when a payment cannot be paid successfully.",
        "operationId" : "Cancel debit authorization",
        "parameters" : [ {
          "name" : "debitAuthTransactionId",
          "in" : "path",
          "description" : "The ID of the debit authorization to be canceled. This value is partner-generated and provided to BillGO in the `Request Debit Authorization` response.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "The request to cancel the debit authorization was successful. Any 2xx response code will be considered a successful cancellation."
          },
          "404" : {
            "description" : "The `debitAuthTransactionId` was not found. Because the `debitAuthTransactionId` value was provided by the partner previously during a \"Request Debit Authorization\" request, this response indicates a significant discrepancy between the records at BillGO and the partner. BillGO Payment Operations may contact the partner's support organization to diagnose the problem.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "429" : {
            "description" : "The request has been throttled. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          },
          "503" : {
            "description" : "The service is unavailable. BillGO will retry the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/health-check" : {
      "get" : {
        "tags" : [ "Health" ],
        "description" : "200 response code indicates that the service is up and able to process requests.",
        "operationId" : "Health check",
        "responses" : {
          "200" : {
            "description" : "The service is healthy."
          },
          "503" : {
            "description" : "The service is not available. Common causes are a system that is down for maintenance,overloaded, or encountering another failure condition. BillGO will consider the service  unavailable until the health check resumes returning `200` response codes."
          }
        }
      }
    },
    "/version" : {
      "get" : {
        "tags" : [ "Version" ],
        "description" : "Returns the current build info for the service.",
        "operationId" : "Version",
        "responses" : {
          "200" : {
            "description" : "The current build version."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Address" : {
        "required" : [ "addressLine1", "city", "postalCode", "type" ],
        "type" : "object",
        "properties" : {
          "addressLine1" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The first line of the address.",
            "example" : "123 Main St."
          },
          "addressLine2" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The second line of the address if applicable.",
            "example" : "PO Box 101"
          },
          "addressLine3" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The third line of the address if applicable."
          },
          "addressLine4" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The fourth line of the address if applicable."
          },
          "city" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The address city.",
            "example" : "New Brunswick"
          },
          "countryCode" : {
            "maxLength" : 3,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two or three character country code from ISO-3166. If the client is designated as OFX, three letter country code from ISO-3166 is provided.",
            "default" : "US"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Address`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Address`",
            "readOnly" : true,
            "example" : "u_a60be9da-3316-42c1-a582-f41bea56470b"
          },
          "isValid" : {
            "type" : "boolean",
            "writeOnly" : true
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code for this address. Supports international postal codes as well.",
            "example" : "10001"
          },
          "province" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The province for international addresses"
          },
          "stateAbbreviation" : {
            "maxLength" : 2,
            "minLength" : 2,
            "type" : "string",
            "description" : "The two character abbreviation for the address state. Not used in international addresses.",
            "example" : "NJ"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the address status.",
            "example" : "ACTIVE",
            "default" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the address type.",
            "example" : "MAILING",
            "enum" : [ "MAILING", "PHYSICAL" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Address` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "valid" : {
            "type" : "boolean"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Has the address been verified for KYC compliance.",
            "readOnly" : true,
            "default" : false
          }
        },
        "description" : "Represents an address within the API."
      },
      "Amount" : {
        "required" : [ "amount" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "pattern" : "^-?[0-9]*(\\.([0-9]{1,2}))?$",
            "type" : "string",
            "description" : "The amount of money expressed as a String.",
            "example" : "9999.99"
          },
          "currency" : {
            "type" : "string",
            "description" : "Indicates the `Currency` unit of the amount.",
            "default" : "USD",
            "enum" : [ "USD" ]
          }
        },
        "description" : "Represents an amount of money, such as a payment amount or an account balance."
      },
      "AnnualSchedule" : {
        "required" : [ "dayOfYearToRepeat", "repeatEveryXYears" ],
        "type" : "object",
        "properties" : {
          "dayOfYearToRepeat" : {
            "type" : "integer",
            "description" : "The day(s) of the year on which to schedule a payment.",
            "format" : "int32"
          },
          "repeatEveryXYears" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The yearly frequency at which to schedule a payment. If the user specifies a value of \"1\" for `repeatEveryXYears`, a payment is scheduled every year.  If the user specifies a value of \"2\" for `repeatEveryXYears`, a payment is scheduled every other year.",
            "format" : "int32"
          }
        },
        "description" : "When provided with a `CalendarBasedRequest`, a `AnnualSchedule` specifies which day(s) of the year a payment should be scheduled for and the yearly frequency that should be used for scheduling subsequent payments."
      },
      "AuthorizedUser" : {
        "required" : [ "addresses", "name", "status" ],
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "description" : "The list of `Address` for the `AuthorizedUser`.",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `AuthorizedUser` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `AuthorizedUser`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `AuthorizedUser`.",
            "readOnly" : true,
            "example" : "auser_45fc183f900c4d9292610254b04c0089"
          },
          "name" : {
            "$ref" : "#/components/schemas/Name"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the status of the `AuthorizedUser`.",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `AuthorizedUser` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          }
        },
        "description" : "Represents a user associated with a partner bank account or a funding `BankAccount`."
      },
      "BankAccount" : {
        "required" : [ "accountNumber", "created", "id", "routingNumber", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 digits of the `BankAccount` account number.",
            "example" : "0812"
          },
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized users of the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `BankAccount`.",
            "readOnly" : true,
            "example" : "ba_45fc183f900c4d9292610254b04c0089"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The `BankAccount` routing number.",
            "example" : "689340812"
          },
          "subType" : {
            "type" : "string",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of `BankAccount`.",
            "example" : "DDA",
            "enum" : [ "DDA", "MMA", "LOAN" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          }
        },
        "description" : "Represents the `BankAccount` associated with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "BillBasedSummary" : {
        "required" : [ "daysRelativeToDueDate", "paymentAmountConfig" ],
        "type" : "object",
        "properties" : {
          "daysRelativeToDueDate" : {
            "type" : "string",
            "description" : "Indicates which of `DUE_DATE`, `ONE_BUSINESS_DAY_BEFORE` or `THREE_BUSINESS_DAYS_BEFORE` is used to determine a payment's scheduled deliver by date.",
            "example" : "DUE_DATE",
            "enum" : [ "DUE_DATE", "ONE_BUSINESS_DAY_BEFORE", "THREE_BUSINESS_DAYS_BEFORE" ]
          },
          "payCurrentBill" : {
            "type" : "boolean",
            "description" : "Indicates if the current `Bill` was paid when the `RecurringSchedule` was created.",
            "default" : false
          },
          "paymentAmountConfig" : {
            "type" : "string",
            "description" : "Indicates which of `MINIMUM_DUE`, `AMOUNT_DUE`, or `BALANCE` is used to determine the amount of the payment.",
            "enum" : [ "MINIMUM_DUE", "AMOUNT_DUE", "BALANCE" ]
          }
        },
        "description" : "Returns the summary details for a `BillBased` `RecurringSchedule`."
      },
      "CalendarBasedSummary" : {
        "required" : [ "paymentAmount", "startDate", "type" ],
        "type" : "object",
        "properties" : {
          "annualSchedule" : {
            "$ref" : "#/components/schemas/AnnualSchedule"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional message associated with a `Payment` to indicate what the `Payment` is for. The `memo` is printed on the check if the `Payment` is made using a check."
          },
          "monthlySchedule" : {
            "$ref" : "#/components/schemas/MonthlySchedule"
          },
          "nextDate" : {
            "type" : "string",
            "description" : "The date of the next `Payment`.",
            "format" : "date"
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The staring date of the `RecurringSchedule`.",
            "format" : "date"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates which of `weeklySchedule`, `monthlySchedule` or `annualSchedule` is being provided with the `CalendarBasedRequest`.",
            "example" : "MONTHLY",
            "enum" : [ "WEEKLY", "MONTHLY", "ANNUALLY" ]
          },
          "weeklySchedule" : {
            "$ref" : "#/components/schemas/WeeklySchedule"
          }
        },
        "description" : "Returns the summary details for a `CalendarBased` `RecurringSchedule`."
      },
      "Card" : {
        "required" : [ "billingAddress", "brand", "created", "expirationDate", "id", "nameOnCard", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address"
          },
          "brand" : {
            "type" : "string",
            "description" : "Indicates the network of the `Card`.",
            "example" : "AMEX",
            "enum" : [ "VISA", "MASTERCARD", "DISCOVER", "AMEX", "DINERS_CLUB", "JCB", "UNKNOWN" ]
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Card` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          },
          "expirationDate" : {
            "type" : "string",
            "description" : "The date the `Card` expires.",
            "format" : "date",
            "example" : "2021-01-01"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Card`.",
            "readOnly" : true,
            "example" : "Qyh1JwU2t4JA"
          },
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `Card`",
            "readOnly" : true,
            "example" : "c_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "nameOnCard" : {
            "type" : "string",
            "description" : "The name of the card holder as printed on the `Card`.",
            "readOnly" : true,
            "example" : "Able N. Dwelling"
          },
          "number" : {
            "pattern" : "[#0-9]{12,}[0-9]{4}",
            "type" : "string",
            "description" : "The card number.",
            "readOnly" : true,
            "example" : "############3333"
          },
          "token" : {
            "type" : "string",
            "description" : "For improved security, instead of providing a card number, a token can be provided that BillGO will use to lookup the `Card` details."
          },
          "type" : {
            "type" : "string",
            "enum" : [ "CREDIT", "DEBIT" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Card` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2019-10-14T16:21:00Z"
          }
        },
        "description" : "Represents the `Card` to use for a `CustomerFundingAccount`."
      },
      "Check" : {
        "required" : [ "created", "id" ],
        "type" : "object",
        "properties" : {
          "backImageHash" : {
            "type" : "string",
            "description" : "The SHA-1 hash of the back of the `Check`."
          },
          "backImageLink" : {
            "$ref" : "#/components/schemas/ResourceLink"
          },
          "backImageSize" : {
            "type" : "integer",
            "description" : "The size of the back of the `Check` image in bytes.",
            "format" : "int32"
          },
          "checkClearedDate" : {
            "type" : "string",
            "description" : "The date when the check cleared.",
            "format" : "date",
            "example" : "2022-04-10"
          },
          "checkGeneratedDateTime" : {
            "type" : "string",
            "description" : "The date and time when the check was generated.",
            "format" : "date-time",
            "example" : "2022-03-14T16:21:00Z"
          },
          "contentType" : {
            "type" : "string",
            "description" : "The MIME content type of the `Check` image."
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Check` was created.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Check`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "fboAccountNumber" : {
            "type" : "string",
            "description" : "The fbo account number on the check."
          },
          "fboRoutingNumber" : {
            "type" : "string",
            "description" : "The fbo routing number on the check."
          },
          "frontImageHash" : {
            "type" : "string",
            "description" : "The SHA-1 hash of the front of the `Check`."
          },
          "frontImageLink" : {
            "$ref" : "#/components/schemas/ResourceLink"
          },
          "frontImageSize" : {
            "type" : "integer",
            "description" : "The size of the front of the `Check` image in bytes.",
            "format" : "int32"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `Check`."
          },
          "memo" : {
            "type" : "string",
            "description" : "The user provided message associated with the `Payment`. The `memo` will be found on the `Check` image."
          },
          "partnerId" : {
            "type" : "string",
            "description" : "An optional field for partners to add a partner ID for this `Check`."
          },
          "sequenceNumber" : {
            "type" : "string",
            "description" : "The sequence number on the check."
          },
          "validCheck" : {
            "type" : "boolean"
          }
        },
        "description" : "Represents the `Check` that was used to make the `Payment`. Provides resource links for retrieving front and back images of the `Check`."
      },
      "CreditAuthRequest" : {
        "required" : [ "billGoUserId", "partnerUserId", "paymentDetails" ],
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The account number of the user's account where the amount will be credited. This value will be populated if a partnerId was not provided when the `FundingAccount` was created."
          },
          "billGoUserId" : {
            "type" : "string",
            "description" : "BillGO-generated unique ID of the user associated with the credit authorization."
          },
          "partnerId" : {
            "type" : "string",
            "description" : "When a user's `FundingAccount` is created with a `partnerId` value, the id will be populated on the auth request instead of the `routingNumber` and `accountNumber`. To minimize communication of sensitive data, BillGO strongly encourages partners to use the `partnerId` parameter when creating `FundingAccount` records."
          },
          "partnerUserId" : {
            "type" : "string",
            "description" : "Partner-generated unique ID of the user associated with the credit authorization."
          },
          "paymentDetails" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The routing number of the user's account where the amount will be credited. This value will be populated if a partnerId was not provided when the `FundingAccount` was created."
          }
        },
        "description" : "A request from BillGO to a partner to credit funds to a user's account if a payment is returned."
      },
      "CreditAuthResponse" : {
        "required" : [ "paymentId" ],
        "type" : "object",
        "properties" : {
          "creditAuthTransactionId" : {
            "type" : "string",
            "description" : "The Client-generated unique id representing the credit authorization."
          },
          "paymentId" : {
            "type" : "string",
            "description" : "BillGO-generated unique id for the payment."
          }
        },
        "description" : "A partner's response to BillGO's request to credit funds to a user's account."
      },
      "CustomerFundingAccount" : {
        "required" : [ "created", "id", "status", "type", "updated", "userLink" ],
        "type" : "object",
        "properties" : {
          "bankAccount" : {
            "$ref" : "#/components/schemas/ExternalBankAccount"
          },
          "card" : {
            "$ref" : "#/components/schemas/Card"
          },
          "created" : {
            "type" : "string",
            "description" : "When the `CustomerFundingAccount` was created.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `CustomerFundingAccount`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `CustomerFundingAccount`.",
            "example" : "cfa_b8ef29c894cc4ecca9446d00b0a1e838"
          },
          "nickname" : {
            "type" : "string",
            "description" : "User supplied name for this account"
          },
          "partnerId" : {
            "type" : "string",
            "description" : "An optional field for partners to add a partner ID for this `CustomerFundingAccount`.",
            "example" : "f5a1859358dc4c44bf27c7fb73d29c03"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the `CustomerFundingAccount`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of the `CustomerFundingAccountType`.",
            "example" : "CARD",
            "enum" : [ "CARD", "BANK_ACCOUNT" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "When the `CustomerFundingAccount` was last updated.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "userLink" : {
            "$ref" : "#/components/schemas/Link"
          }
        },
        "description" : "Represents the `CustomerFundingAccount` for making `Payment`s. `CustomerFundingAccount` can be one of two types: `Card` or `BankAccount`. Only one of the two types can be used per `CustomerFundingAccount` instance."
      },
      "DebitAuthRequest" : {
        "required" : [ "billGoUserId", "partnerUserId", "paymentDetails" ],
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The account number of the user's account where the amount will be debited. This value will be populated if a partnerId was not provided when the `FundingAccount` was created."
          },
          "billGoUserId" : {
            "type" : "string",
            "description" : "BillGO-generated unique ID of the user associated with the debit authorization."
          },
          "partnerId" : {
            "type" : "string",
            "description" : "When a user's `FundingAccount` is created with a `partnerId` value, the id will be populated on the auth request instead of the `routingNumber` and `accountNumber`. To minimize communication of sensitive data, BillGO strongly encourages partners to use the `partnerId` parameter when creating `FundingAccount` records."
          },
          "partnerUserId" : {
            "type" : "string",
            "description" : "Partner-generated unique ID of the user associated with the debit authorization."
          },
          "paymentDetails" : {
            "$ref" : "#/components/schemas/Payment"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The routing number of the user's account where the amount will be debited. This value will be populated if a partnerId was not provided when the `FundingAccount` was created."
          }
        },
        "description" : "A request from BillGO to a partner to debit funds from a user's account to cover a payment."
      },
      "DebitAuthResponse" : {
        "required" : [ "paymentId", "status" ],
        "type" : "object",
        "properties" : {
          "debitAuthTransactionId" : {
            "type" : "string",
            "description" : "The partner's unique id representing the debit auth request. If duplicate debit authorization requests are received, the same `status` and the same `debitAuthTransactionId` should be returned in each response."
          },
          "paymentId" : {
            "type" : "string",
            "description" : "BillGO's unique id associated with the payment."
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the debit auth request. If a status of `DECLINED` isreturned, the payment will not be processed and the payment status will be set to `CANCELLED` with a status code of `CANCELLED_NSF`. A status of `FAILED` indicates a failure in the service supporting thisAPI. BillGO will retry the request later, or BillGO Payment Operations may contact the client to diagnose andresolve the issue.",
            "enum" : [ "AUTHORIZED", "DECLINED", "FAILED" ]
          }
        },
        "description" : "A partner's response to BillGO's request to debit funds from a user's account."
      },
      "Device" : {
        "type" : "object",
        "properties" : {
          "anonymizerInUse" : {
            "type" : "boolean",
            "description" : "Is an anonymizer in use on the device"
          },
          "areaCode" : {
            "type" : "string",
            "description" : "The telephone area code the device is in"
          },
          "browser" : {
            "type" : "string",
            "description" : "The browser used to create the payment"
          },
          "city" : {
            "type" : "string",
            "description" : "The city where the device is"
          },
          "clientTimeZone" : {
            "type" : "string",
            "description" : "The time zone the device is in"
          },
          "continentCode" : {
            "type" : "string",
            "description" : "The continent where the device is"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country where the device is"
          },
          "deviceId" : {
            "type" : "string",
            "description" : "The device ID captured when the customer initiated the transaction."
          },
          "deviceOs" : {
            "type" : "string",
            "description" : "The device's operating system"
          },
          "flashData" : {
            "type" : "string",
            "description" : "Any flash data from the device"
          },
          "httpRequestHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "description" : "Any HTTP request headers on the payment creation request"
            },
            "description" : "Any HTTP request headers on the payment creation request"
          },
          "installedFlashFonts" : {
            "type" : "array",
            "description" : "The flash fonts installed on the device",
            "items" : {
              "type" : "string",
              "description" : "The flash fonts installed on the device"
            }
          },
          "installedJsFonts" : {
            "type" : "array",
            "description" : "Any javascript fonts installed on the device",
            "items" : {
              "type" : "string",
              "description" : "Any javascript fonts installed on the device"
            }
          },
          "installedPlugins" : {
            "type" : "array",
            "description" : "Plugins installed in the user's browser",
            "items" : {
              "type" : "string",
              "description" : "Plugins installed in the user's browser"
            }
          },
          "ipAddress" : {
            "type" : "string",
            "description" : "The IP address of the device"
          },
          "latitude" : {
            "type" : "string",
            "description" : "The location of the device"
          },
          "longitude" : {
            "type" : "string",
            "description" : "The location of the device"
          },
          "metroCode" : {
            "type" : "string",
            "description" : "The metropolitan code where the device is"
          },
          "mimeTypes" : {
            "type" : "array",
            "description" : "MIME types specified",
            "items" : {
              "type" : "string",
              "description" : "MIME types specified"
            }
          },
          "mobileNumber" : {
            "type" : "string",
            "description" : "The mobile number of the device used to create the payment."
          },
          "navigator" : {
            "type" : "string",
            "description" : "Any screen navigator in use by the user"
          },
          "networkCarrier" : {
            "type" : "string",
            "description" : "The network carrier the device is connected to"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code of the device's location"
          },
          "proxyDescription" : {
            "type" : "string",
            "description" : "The description of any proxy in use"
          },
          "proxyType" : {
            "type" : "string",
            "description" : "The type of any proxy in use"
          },
          "region" : {
            "type" : "string",
            "description" : "The region the device is in"
          },
          "screenResolutionX" : {
            "type" : "integer",
            "description" : "The screen width in pixels",
            "format" : "int32"
          },
          "screenResolutionY" : {
            "type" : "integer",
            "description" : "The screen height in pixels",
            "format" : "int32"
          },
          "silverlightData" : {
            "type" : "string",
            "description" : "Any silverlight data from the device"
          },
          "speedOfInteraction" : {
            "type" : "string",
            "description" : "The speed of the device's connection"
          },
          "tpDeviceScore" : {
            "type" : "integer",
            "description" : "Third party Risk score (InAuth, biocatch…etc). Can be used for systems like SOCURE passing a device authorization score.",
            "format" : "int32"
          },
          "tpDeviceScoreReason" : {
            "type" : "string",
            "description" : "Third party Risk score Reason Code (InAuth, biocatch…etc)"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of device: mobile or PC",
            "enum" : [ "MOBILE", "PC" ]
          },
          "userAgent" : {
            "type" : "string",
            "description" : "Any software agent in use at the time"
          }
        },
        "description" : "Information about the device used by the user to create the payment."
      },
      "Error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The response code, typically a 3-digit HTTP response code, although partners may choose to use custom response codes.",
            "readOnly" : true,
            "example" : "500"
          },
          "details" : {
            "type" : "string",
            "description" : "The details of the error message. This value will be used by BillGO Payment Operations to diagnose and resolve the failure.",
            "readOnly" : true,
            "example" : "An internal system error occurred while processing the request. Please try again later."
          },
          "message" : {
            "type" : "string",
            "description" : "The HTTP response code message.",
            "readOnly" : true,
            "example" : "Internal Server Error"
          }
        },
        "description" : "Represents an error response to a Funding API request."
      },
      "ExternalBankAccount" : {
        "required" : [ "bankName", "created", "id", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 digits of the `BankAccount` account number.",
            "example" : "0812"
          },
          "authorizedUsers" : {
            "type" : "array",
            "description" : "The list of `AuthorizedUsers` that are authorized users of the `BankAccount`.",
            "items" : {
              "$ref" : "#/components/schemas/AuthorizedUser"
            }
          },
          "bankName" : {
            "type" : "string",
            "description" : "The name of the bank the `BankAccount` belongs to.",
            "example" : "Hero Bank"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was created.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `BankAccount`.",
            "readOnly" : true,
            "example" : "ba_45fc183f900c4d9292610254b04c0089"
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The `BankAccount` routing number.",
            "example" : "134570812"
          },
          "subType" : {
            "type" : "string",
            "enum" : [ "CHECKING", "SAVINGS" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the type of `BankAccount`.",
            "example" : "DDA",
            "enum" : [ "DDA", "MMA", "LOAN" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `BankAccount` was last updated.",
            "format" : "date-time",
            "readOnly" : true,
            "example" : "2017-01-01T13:01:01Z"
          }
        },
        "description" : "Represents the `BankAccount` associated with a `FundingAccount` or `CustomerFundingAccount`."
      },
      "FundingAccount" : {
        "required" : [ "created", "defaultFundingAccount", "id", "status", "type", "updated" ],
        "type" : "object",
        "properties" : {
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccount"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp the `FundingAccount` was created.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          },
          "defaultFundingAccount" : {
            "type" : "boolean",
            "description" : "Indicates if the `FundingAccount` is the default for the `User`.",
            "example" : true
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `FundingAccount`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier for the `FundingAccount`.",
            "example" : "fa_b8ef29c894cc4ecca9446d00b0a1e838"
          },
          "nickname" : {
            "type" : "string",
            "description" : "A nickname to use when displaying the `FundingAccount`.",
            "example" : "Joint Checking"
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The identifier to use when referencing the `FundingAccount` with the partner.",
            "example" : "6fec849a4fee406a955c59a7557c1e21"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the `FundingAccount`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          },
          "type" : {
            "type" : "string",
            "description" : "If `FOREIGN_KEY`, then `partnerId` must be set. If `ACCOUNT_DETAILS`, then the `BankAccount` must be supplied and `partnerId` is optional.",
            "example" : "ACCOUNT_DETAILS",
            "enum" : [ "FOREIGN_KEY", "ACCOUNT_DETAILS" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp the `FundingAccount` was last updated.",
            "format" : "date-time",
            "example" : "2018-03-15T18:20:01Z"
          }
        },
        "description" : "This is the account to fund the `Payment` from and it is a bank account at the partner bank."
      },
      "Link" : {
        "required" : [ "rel", "uri" ],
        "type" : "object",
        "properties" : {
          "rel" : {
            "type" : "string",
            "description" : "The type of the relationship with the related API resource.",
            "readOnly" : true
          },
          "uri" : {
            "type" : "string",
            "description" : "The relative `URI` to use to retrieve the related API resource.",
            "readOnly" : true
          }
        },
        "description" : "Provides a relative uri to a related API resource."
      },
      "MonthlySchedule" : {
        "required" : [ "daysOfMonthToRepeat", "repeatEveryXMonths" ],
        "type" : "object",
        "properties" : {
          "daysOfMonthToRepeat" : {
            "type" : "array",
            "description" : "If a payment is to be scheduled bi-monthly, the user provides the first scheduled day of the month and the client application determines second day of the month by adding 15 days to the first scheduled day of the month. If a payment is to be scheduled on the last day of the month, the user should provide the value `[31]`. If the scheduled month does not contain that day of the month, the payment will be scheduled for the last day of the month. For example if the user selects the 29th day of the month, payments made in the month of February will be made on the 28th unless the year is a leap year.",
            "items" : {
              "type" : "integer",
              "description" : "If a payment is to be scheduled bi-monthly, the user provides the first scheduled day of the month and the client application determines second day of the month by adding 15 days to the first scheduled day of the month. If a payment is to be scheduled on the last day of the month, the user should provide the value `[31]`. If the scheduled month does not contain that day of the month, the payment will be scheduled for the last day of the month. For example if the user selects the 29th day of the month, payments made in the month of February will be made on the 28th unless the year is a leap year.",
              "format" : "int32"
            }
          },
          "repeatEveryXMonths" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The monthly frequency at which to schedule a payment. If the user specifies a value of \"1\" for `repeatEveryXMonths`, a payment is scheduled every month. If the user specifies a value of \"2\" for `repeatEveryXMonths`, a payment is scheduled every other month.",
            "format" : "int32"
          }
        },
        "description" : "When provided with a `CalendarBasedRequest`, a `MonthlySchedule` specifies which day(s) of the month a payment should be scheduled for and the monthly frequency that should be used for scheduling subsequent payments."
      },
      "Name" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "businessName" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the business the account belongs to.",
            "example" : "Downtown Electric, Inc."
          },
          "firstName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's first name.",
            "example" : "Joe"
          },
          "lastName" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's last name.",
            "example" : "Doe"
          },
          "middleNameOrInitial" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's middle name or initial.",
            "example" : "R."
          },
          "openFormNameField" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "If the user's name cannot be broken into parts, a single line for the user's name can be set here.",
            "example" : "Joe R. Doe Jr."
          },
          "suffix" : {
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "The user's suffix if applicable.",
            "example" : "Jr."
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates the name type.",
            "example" : "INDIVIDUAL",
            "enum" : [ "INDIVIDUAL", "BUSINESS" ]
          }
        },
        "description" : "Represents a name within the API."
      },
      "PayeeSummary" : {
        "type" : "object",
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The last 4 of the `accountNumber` for the `PayeeAccount`. For security reasons, the full `accountNumber` will never be returned from the API."
          },
          "linkStatus" : {
            "type" : "string",
            "description" : "Indicates the linking status of the `Payee`. `LINKABLE` indicates the `Payee` can be linked, but there is currently no attempt to link the `Payee`. `NOT_LINKABLE` indicates the `Payee` does not support linking. `LINKED` indicates the `Payee` has been linked. Other statuses are indicators of the status of an in progress link attempt. Please see the documentation on linking `Payee`s for further information.",
            "example" : "DATUMS_VALID",
            "enum" : [ "LINKING", "LINKING_DATUMS_VERIFIED", "DATUMS_INVALID", "DATUMS_MISSING", "LOCKED", "CLOSED", "LINKED", "OUTAGE", "PENDING", "DATUMS_VALID", "LINKABLE", "NOT_LINKABLE", "DEPRECATED", "NONE" ]
          },
          "merchantId" : {
            "type" : "string",
            "description" : "The identifier of the `Merchant` associated with the `Payee`."
          },
          "payeeAccountName" : {
            "type" : "string",
            "description" : "The name that identifies the `PayeeAccount` within the `Payee`."
          },
          "payeeEmail" : {
            "type" : "string",
            "description" : "The email address of the `Payee` provided by the user."
          },
          "payeeName" : {
            "type" : "string",
            "description" : "The name of the `Payee` provided by the user or the `Merchant` name if not provided by the user."
          },
          "status" : {
            "type" : "string",
            "description" : "Represents the status of the `Payee`. `ACTIVE` is a `Payee` in good standing. `PENDING` payees are in the process of being set up. `ARCHIVED` payees should not be shown to the user.",
            "example" : "ARCHIVED",
            "enum" : [ "ACTIVE", "ARCHIVED" ]
          }
        },
        "description" : "Contains summary information about the `Payee`."
      },
      "Payment" : {
        "required" : [ "created", "id", "originationType", "payeeAccountLink", "sendOnDate", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "attributes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PaymentAttribute"
            }
          },
          "billId" : {
            "type" : "string",
            "description" : "The reference to the `Bill` that the payment was created from."
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `Payment` was created.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "customerFundingAccount" : {
            "$ref" : "#/components/schemas/CustomerFundingAccount"
          },
          "deliverByDate" : {
            "type" : "string",
            "description" : "The date the payment will be delivered to the merchant.",
            "format" : "date",
            "example" : "2020-01-01"
          },
          "derivedFromPreviousBill" : {
            "type" : "boolean",
            "description" : "Indicates if the payment was created using a derived bill. A derived bill is a `Bill` that was  created based on a previously synced `Bill`."
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `Payment`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "feeAllowance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "fraudStatus" : {
            "type" : "string",
            "description" : "Indicates if a fraud review has been requested, or if requested and a response was received, what the result was.",
            "enum" : [ "NOT_REQUESTED", "REQUESTED", "RE_REQUESTED", "NEEDS_REVIEW", "APPROVED", "DENIED" ]
          },
          "fraudUpdated" : {
            "type" : "integer",
            "description" : "The last time the fraud status was changed.",
            "format" : "int64"
          },
          "fundingAccount" : {
            "$ref" : "#/components/schemas/FundingAccount"
          },
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `Payment`.",
            "example" : "p_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "lastRefundDate" : {
            "type" : "string",
            "description" : "The date of the last refund for the payment.",
            "format" : "date",
            "example" : "2020-01-01"
          },
          "memo" : {
            "type" : "string",
            "description" : "An optional user provided message to associate with the `Payment`. The `memo` will be added to the check if the `Payment` is made with a check."
          },
          "ofxToken" : {
            "type" : "string",
            "description" : "OFX token",
            "example" : "R1EOD39I5V"
          },
          "originationType" : {
            "type" : "string",
            "description" : "Indicates how the `Payment` was generated. This has implications on the mutability of the `Payment`.",
            "example" : "ONE_TIME_PAYMENT",
            "enum" : [ "RECURRENCE_SCHEDULE_PAYMENT", "ONE_TIME_PAYMENT" ]
          },
          "partnerId" : {
            "type" : "string",
            "description" : "The unique client idempotency identifier associated with the `Payment` to ensure that the `Payment` is not made more than once."
          },
          "payNow" : {
            "type" : "boolean",
            "description" : "This directs the system to prioritize the `Payment` when set to true. Additionally, the feeAllowance field should be left empty."
          },
          "payeeAccountLink" : {
            "$ref" : "#/components/schemas/Link"
          },
          "payeeSummary" : {
            "$ref" : "#/components/schemas/PayeeSummary"
          },
          "paymentAmount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "paymentDeviceInfo" : {
            "$ref" : "#/components/schemas/PaymentDeviceInfo"
          },
          "paymentResult" : {
            "$ref" : "#/components/schemas/PaymentResult"
          },
          "paymentResults" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Only populated if returnAllPaymentResults flag is set to true on the Get Payment by id call",
            "readOnly" : false,
            "items" : {
              "$ref" : "#/components/schemas/PaymentResult"
            }
          },
          "recurrenceScheduleId" : {
            "type" : "string",
            "description" : "Only populated if the `Payment` was generated from the `RecurrenceSchedule`."
          },
          "recurrenceScheduleSummary" : {
            "$ref" : "#/components/schemas/RecurrenceScheduleSummary"
          },
          "refundAmount" : {
            "type" : "string"
          },
          "resourceExtendedStatus" : {
            "type" : "string"
          },
          "resourceStatus" : {
            "type" : "string"
          },
          "sendOnDate" : {
            "type" : "string",
            "description" : "The date the payment will be sent to the merchant.",
            "format" : "date",
            "example" : "2017-01-01"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the current status of the `Payment`.",
            "example" : "PROCESSING",
            "enum" : [ "PENDING", "PENDING_DEBITED", "CANCELLED", "FAILURE", "INFORMATION_NEEDED", "PROCESSING", "SUBMITTED", "SUCCESS", "SUCCESS_RETURN", "SUCCESS_PARTIAL_RETURN" ]
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Indicates additional details for the current status of the `Payment`. The following fields are deprecated:<ul><li>BILL_NOT_FOUND<li>CARD_SECURITY_CODE_INCORRECT<li>DEPRECATED<li>LOCKED<li>OUTAGE<li>SUBSUMED<li>BANK_ONLY<li>CARD_EXPIRED<li>CARD_ONLY<li>CREATE_SECURITY_QUESTIONS<li>DECLINED<li>EXTERNAL_NOT_ALLOWED<li>EXTERNAL_NOT_VALIDATED<li>VIRTUAL_PAYMENT_ALLOCATION<li>ZIP_CODE_INCORRECT<li>LESS_THAN_AMOUNT_DISALLOWED<li>LESS_THAN_OWED_DISALLOWED<li>NEW_LARGER_AMOUNT_DUE<li>IDENTIFICATION_CODE_REQUIRED<li>DATUMS_INVALID<li>DATUMS_MISSING<li>COMPLIANCE_DECLINED<li>EXPIRATION_TIME_EXCEEDED</ul>",
            "example" : "CANCELLED_CSR",
            "enum" : [ "BILL_NOT_FOUND", "CARD_SECURITY_CODE_INCORRECT", "DEPRECATED", "LOCKED", "OUTAGE", "PAYMENT_DISABLED", "SUBSUMED", "BANK_ONLY", "CARD_EXPIRED", "CARD_ONLY", "CREATE_SECURITY_QUESTIONS", "DECLINED", "EXTERNAL_NOT_ALLOWED", "EXTERNAL_NOT_VALIDATED", "VIRTUAL_PAYMENT_ALLOCATION", "ZIP_CODE_INCORRECT", "LESS_THAN_AMOUNT_DISALLOWED", "LESS_THAN_OWED_DISALLOWED", "NEW_LARGER_AMOUNT_DUE", "IDENTIFICATION_CODE_REQUIRED", "DATUMS_INVALID", "DATUMS_MISSING", "COMPLIANCE_DECLINED", "EXPIRATION_TIME_EXCEEDED", "CANCELLED_CSR", "CANCELLED_CUSTOMER", "CANCELLED_NSF", "CANCELLED_FRAUD", "PROCESSING_ERROR", "NEEDS_FRAUD_REVIEW", "FRAUD_REVIEW_HOLD", "RETURN_INITIATED", "PROCESSING_RETURN", "NEEDS_DEBIT_AUTH" ]
          },
          "statusCodeReason" : {
            "type" : "string",
            "description" : "A reason given for the `Payment`s `StatusCode`.",
            "readOnly" : true
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `Payment` was last updated.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          }
        },
        "description" : "Contains information about the `Payment`."
      },
      "PaymentAttribute" : {
        "required" : [ "key", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "pattern" : "^([0-9a-zA-Z_@\\.-]+){1,255}$",
            "type" : "string",
            "description" : "The given name of the `PaymentAttribute` on the `Payment`."
          },
          "value" : {
            "pattern" : "^([0-9a-zA-Z_@\\.-]+){1,255}$",
            "type" : "string",
            "description" : "The value of the `PaymentAttribute` on the `Payment`."
          }
        },
        "description" : "User defined attributes of the `Payment`. The attribute field is free form for the user to associate key/value pairs of information with the payment that are meaningful to the user. There is no validation of the key/value pair. The key and value are alphanumeric strings limited to 255 characters."
      },
      "PaymentDeviceInfo" : {
        "type" : "object",
        "properties" : {
          "counterpartyRiskScore" : {
            "type" : "string",
            "description" : "Counterparty fraud risk score"
          },
          "currentBalance" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "customerRiskDecision" : {
            "type" : "string",
            "description" : "Risk decision from legacy fraud monitoring system: valid values include PASSED, REVIEW, REJECT, and AUTO_RELEASE. If this field is set to REJECT, then the payment will automatically be denied."
          },
          "customerRiskScore" : {
            "type" : "string",
            "description" : "Customer fraud risk score"
          },
          "device" : {
            "$ref" : "#/components/schemas/Device"
          }
        },
        "description" : "Information about the device the user used to setup the payment."
      },
      "PaymentRail" : {
        "type" : "object",
        "properties" : {
          "paymentType" : {
            "type" : "string",
            "description" : "The method used to fund the payment. Deprecated and replaced with PaymentResult PaymentInstrumentType",
            "example" : "VIRTUAL_CARD",
            "deprecated" : true,
            "enum" : [ "DDA", "MMA", "VIRTUAL_CARD", "VIRTUAL_ACCOUNT", "CONSUMER_CARD" ]
          },
          "railPaymentId" : {
            "type" : "string",
            "description" : "The identifier of the payment returned by the Payment Rail."
          },
          "railType" : {
            "type" : "string",
            "description" : "The general method used to process the payment.",
            "example" : "REALTIME",
            "enum" : [ "REALTIME", "EBN", "CHECK", "ACH" ]
          }
        },
        "description" : "Represents the method that was used to make the payment."
      },
      "PaymentResult" : {
        "required" : [ "created", "id", "status", "updated" ],
        "type" : "object",
        "properties" : {
          "amountPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "cancelled" : {
            "type" : "string",
            "description" : "The timestamp when the `PaymentResult` was cancelled.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "cancelledMessage" : {
            "type" : "string",
            "description" : "The reason the payment was `CANCELLED`."
          },
          "check" : {
            "$ref" : "#/components/schemas/Check"
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when the `PaymentResult` was created.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "effectiveDate" : {
            "type" : "string",
            "description" : "The effective date the `Payment` was actually made.",
            "format" : "date"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "The error returned by the merchant when the payment `FAILED`."
          },
          "extendedStatus" : {
            "type" : "string",
            "description" : "Provides additional information on the status of the `Payment`.",
            "example" : "PAYMENT_AMOUNT_DECLINED",
            "enum" : [ "NONE", "DATUMS_NEEDED", "PAYEE_ACTION_REQUIRED", "PAYMENT_AMOUNT_DECLINED", "PAYMENT_ACCOUNT_DECLINED", "OUTAGE", "DISPUTED", "BILL_NOT_FOUND", "CARD_SECURITY_CODE_INCORRECT", "DEPRECATED", "LOCKED", "PAYMENT_DISABLED", "SUBSUMED", "BANK_ONLY", "CARD_EXPIRED", "CARD_ONLY", "CREATE_SECURITY_QUESTIONS", "DECLINED", "EXTERNAL_NOT_ALLOWED", "EXTERNAL_NOT_VALIDATED", "VIRTUAL_PAYMENT_ALLOCATION", "ZIP_CODE_INCORRECT", "LESS_THAN_AMOUNT_DISALLOWED", "LESS_THAN_OWED_DISALLOWED", "NEW_LARGER_AMOUNT_DUE", "IDENTIFICATION_CODE_REQUIRED", "DATUMS_INVALID", "DATUMS_MISSING", "COMPLIANCE_DECLINED", "EXPIRATION_TIME_EXCEEDED" ]
          },
          "externalId" : {
            "type" : "string",
            "description" : "The unique, shortened (12 chars) identifier for the `PaymentResult`.",
            "example" : "Qyh1JwU2t4JA"
          },
          "feesPaid" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "id" : {
            "type" : "string",
            "description" : "The identifier for the `PaymentResult`.",
            "example" : "pr_83ede6ae-a080-11ea-bb37-0242ac130002"
          },
          "merchantConfirmationNumber" : {
            "type" : "string",
            "description" : "The payment confirmation number returned by the merchant when the payment is `PAID`. The `merchantConfirmationNumber` may not be provided if the payment is made through a network or with a check."
          },
          "paymentInstrumentLast4" : {
            "pattern" : "[0-9]{4}",
            "type" : "string",
            "description" : "The last four digits of the payment instrument used to make the payment."
          },
          "paymentInstrumentType" : {
            "type" : "string",
            "description" : "The payment instrument used to make the payment.",
            "enum" : [ "EXTERNAL_MMA", "EXTERNAL_DDA", "EXTERNAL_CARD", "VIRTUAL_BANK_ACCOUNT", "VIRTUAL_CARD" ]
          },
          "paymentRail" : {
            "$ref" : "#/components/schemas/PaymentRail"
          },
          "referenceNumber" : {
            "type" : "string",
            "description" : "The `referenceNumber` for the `Payment` when the payment is made through a network or with a check."
          },
          "refundReason" : {
            "type" : "string",
            "description" : "The reason the payment was `REFUNDED`."
          },
          "sentOnDate" : {
            "type" : "string",
            "description" : "The date the `Payment` was sent to the merchant.",
            "format" : "date"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates the final status of the `Payment`.",
            "example" : "PAID",
            "enum" : [ "SCHEDULED", "SENT", "PAID", "REFUNDED", "CANCELLED", "FAILED", "PARTIALLY_REFUNDED" ]
          },
          "updated" : {
            "type" : "string",
            "description" : "The timestamp when the `PaymentResult` was updated.",
            "format" : "date-time",
            "example" : "2019-10-14T16:21:00Z"
          },
          "virtualCardLast4" : {
            "pattern" : "[0-9]{4}",
            "type" : "string",
            "description" : "The last four digits of the virtual card if the payment was made with a virtual card."
          }
        },
        "description" : "Indicates the final result of the `Payment`.",
        "readOnly" : false
      },
      "RecurrenceScheduleSummary" : {
        "type" : "object",
        "properties" : {
          "billBased" : {
            "$ref" : "#/components/schemas/BillBasedSummary"
          },
          "calendarBased" : {
            "$ref" : "#/components/schemas/CalendarBasedSummary"
          },
          "endingSetting" : {
            "$ref" : "#/components/schemas/ScheduleEnding"
          },
          "holidaySchedulingStrategy" : {
            "type" : "string",
            "description" : "Indicates which of `PAY_EARLY` or `PAY_LATE` is used to determine the adjusted scheduled date when the scheduled payment date false on a weekend or a holiday. If the user selects `PAY_EARLY`, the payment is scheduled for the next soonest business day; otherwise, the payment is schedule for the next business day after the original scheduled date.\n**Note:** Bill based schedules do not support the `PAY_LATE` option.",
            "default" : "PAY_EARLY",
            "enum" : [ "PAY_EARLY", "PAY_LATE" ]
          },
          "partnerScheduleId" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "description" : "Indicates if an existing `RecurringSchedule` is `ACTIVE`, `TERMINATED`, or `COMPLETE`.",
            "example" : "ACTIVE",
            "enum" : [ "ACTIVE", "TERMINATED", "COMPLETE" ]
          }
        },
        "description" : "Provides details about a `RecurrenceSchedule`."
      },
      "ResourceLink" : {
        "required" : [ "resourceUrl" ],
        "type" : "object",
        "properties" : {
          "expiration" : {
            "type" : "string",
            "description" : "Indicates when the resource is no longer available for retrieval.",
            "format" : "date-time",
            "readOnly" : true
          },
          "resourceUrl" : {
            "type" : "string",
            "description" : "Indicates the URL to retrieve the resource from.",
            "readOnly" : true
          }
        },
        "description" : "Provides resource retrieval information for resources available for download throughout the API."
      },
      "ScheduleEnding" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "endDateInclusive" : {
            "type" : "string",
            "description" : "The date to stop scheduling payments for the `RecurringSchedule`. Payments can be made on this date, but not after.",
            "format" : "date"
          },
          "finalSendOnDate" : {
            "type" : "string",
            "description" : "The send on date for the final payment of the `RecurringSchedule`.",
            "format" : "date"
          },
          "numberOfPayments" : {
            "type" : "integer",
            "description" : "The maximum number of payments to make for the `RecurringSchedule`.",
            "format" : "int32"
          },
          "paymentsMade" : {
            "type" : "integer",
            "description" : "The number of payments made since the start of the `RecurringSchedule`.",
            "format" : "int32"
          },
          "paymentsRemaining" : {
            "type" : "integer",
            "description" : "The number of payments remaining in the `RecurringSchedule`.",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "description" : "Indicates which of `NUMBER`, `END_DATE`, or `NO_END_DATE` was specified when creating an existing `RecurringSchedule`. A value of `USER_STOPPED` indicates the `RecurringSchedule` was cancelled by the user.",
            "example" : "END_DATE",
            "enum" : [ "NUMBER", "USER_STOPPED", "END_DATE", "NO_END_DATE", "SYSTEM_STOPPED" ]
          },
          "userEndedTimestamp" : {
            "type" : "string",
            "description" : "The timestamp at which the user canceled the `RecurringSchedule`.",
            "format" : "date-time"
          }
        },
        "description" : "Provides the schedule ending details for an existing `RecurringSchedule`."
      },
      "WeeklySchedule" : {
        "required" : [ "dayOfWeekToRecurOn", "repeatEveryXWeeks" ],
        "type" : "object",
        "properties" : {
          "dayOfWeekToRecurOn" : {
            "type" : "array",
            "description" : "The day of the week on which a payment should be scheduled.",
            "example" : [ "THURSDAY" ],
            "items" : {
              "type" : "string",
              "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
            }
          },
          "repeatEveryXWeeks" : {
            "minimum" : 1,
            "type" : "integer",
            "description" : "The weekly frequency at which to scheduled a payment. If the user specifies \"1\" for the value of `repeatEveryXWeeks`, then a payment is scheduled every week. If the user specifies \"2\" for for the value of `repeatEveryXWeeks`, then a payment is scheduled every other week.",
            "format" : "int32",
            "example" : 2
          }
        },
        "description" : "When provided with a `CalendarBasedRequest`, a `WeeklySchedule` specifies which day(s) of the weeka payment should be scheduled for and the weekly frequency that should be used for scheduling subsequent payments."
      }
    }
  }
}